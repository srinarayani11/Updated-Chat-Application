{
  "version": 3,
  "sources": ["../src/platform/web/index.ts", "../src/common/platform.ts", "../src/common/lib/util/logger.ts", "../src/common/lib/util/utils.ts", "../src/common/lib/types/errorinfo.ts", "../package.json", "../src/common/lib/util/defaults.ts", "../src/common/lib/util/multicaster.ts", "../src/common/constants/HttpMethods.ts", "../src/common/constants/HttpStatusCodes.ts", "../src/common/lib/client/auth.ts", "../src/common/types/http.ts", "../src/common/lib/util/eventemitter.ts", "../src/common/lib/types/protocolmessagecommon.ts", "../src/common/lib/types/basemessage.ts", "../src/common/lib/client/baseclient.ts", "../src/common/lib/types/devicedetails.ts", "../src/common/lib/client/resource.ts", "../src/common/lib/client/paginatedresource.ts", "../src/common/lib/types/pushchannelsubscription.ts", "../src/common/lib/client/push.ts", "../src/common/lib/types/presencemessage.ts", "../src/common/lib/client/restpresence.ts", "../src/common/lib/types/message.ts", "../src/common/lib/client/restchannel.ts", "../src/common/lib/types/stats.ts", "../src/common/lib/client/restchannelmixin.ts", "../src/common/lib/client/restpresencemixin.ts", "../src/common/lib/client/rest.ts", "../src/common/lib/client/baserest.ts", "../src/common/lib/client/modularplugins.ts", "../src/common/lib/types/defaultmessage.ts", "../src/common/lib/types/defaultpresencemessage.ts", "../src/common/lib/types/annotation.ts", "../src/common/lib/types/defaultannotation.ts", "../src/common/lib/client/restannotations.ts", "../src/common/lib/types/protocolmessage.ts", "../src/common/lib/client/channelstatechange.ts", "../src/common/lib/client/realtimechannel.ts", "../src/common/lib/client/realtimeannotations.ts", "../src/common/lib/client/defaultrest.ts", "../src/common/lib/transport/messagequeue.ts", "../src/common/lib/transport/protocol.ts", "../src/common/lib/client/connectionstatechange.ts", "../src/common/lib/transport/connectionerrors.ts", "../src/common/lib/transport/transport.ts", "../src/common/constants/TransportName.ts", "../src/common/lib/transport/connectionmanager.ts", "../src/common/lib/client/connection.ts", "../src/common/lib/client/baserealtime.ts", "../src/common/lib/client/presencemap.ts", "../src/common/lib/client/realtimepresence.ts", "../src/common/lib/transport/websockettransport.ts", "../src/common/lib/client/filteredsubscriptions.ts", "../src/common/lib/client/defaultrealtime.ts", "../src/platform/web/lib/util/hmac-sha256.ts", "../src/platform/web/lib/util/bufferutils.ts", "../src/platform/web/lib/util/crypto.ts", "../src/common/constants/XHRStates.ts", "../src/platform/web/lib/http/http.ts", "../src/platform/web/lib/util/webstorage.ts", "../src/platform/web/config.ts", "../src/common/lib/transport/comettransport.ts", "../src/platform/web/lib/http/request/xhrrequest.ts", "../src/platform/web/lib/transport/xhrpollingtransport.ts", "../src/platform/web/lib/transport/index.ts", "../src/platform/web/lib/util/defaults.ts", "../src/platform/web/lib/util/msgpack.ts", "../src/platform/web/lib/http/request/fetchrequest.ts", "../src/platform/web/lib/http/request/index.ts"],
  "sourcesContent": ["// Common\nimport { DefaultRest } from '../../common/lib/client/defaultrest';\nimport { DefaultRealtime } from '../../common/lib/client/defaultrealtime';\nimport Platform from '../../common/platform';\nimport ErrorInfo from '../../common/lib/types/errorinfo';\nimport { makeFromDeserializedWithDependencies as makeProtocolMessageFromDeserialized } from '../../common/lib/types/protocolmessage';\n\n// Platform Specific\nimport BufferUtils from './lib/util/bufferutils';\n// @ts-ignore\nimport { createCryptoClass } from './lib/util/crypto';\nimport Http from './lib/http/http';\nimport Config from './config';\n// @ts-ignore\nimport Transports from './lib/transport';\nimport Logger from '../../common/lib/util/logger';\nimport { getDefaults } from '../../common/lib/util/defaults';\nimport WebStorage from './lib/util/webstorage';\nimport PlatformDefaults from './lib/util/defaults';\nimport msgpack from './lib/util/msgpack';\nimport { defaultBundledRequestImplementations } from './lib/http/request';\n\nconst Crypto = createCryptoClass(Config, BufferUtils);\n\nPlatform.Crypto = Crypto;\nPlatform.BufferUtils = BufferUtils;\nPlatform.Http = Http;\nPlatform.Config = Config;\nPlatform.Transports = Transports;\nPlatform.WebStorage = WebStorage;\n\nfor (const clientClass of [DefaultRest, DefaultRealtime]) {\n  clientClass.Crypto = Crypto;\n  clientClass._MsgPack = msgpack;\n}\n\nHttp.bundledRequestImplementations = defaultBundledRequestImplementations;\n\nLogger.initLogHandlers();\n\nPlatform.Defaults = getDefaults(PlatformDefaults);\n\nif (Platform.Config.agent) {\n  // @ts-ignore\n  Platform.Defaults.agent += ' ' + Platform.Config.agent;\n}\n\nexport { DefaultRest as Rest, DefaultRealtime as Realtime, msgpack, makeProtocolMessageFromDeserialized, ErrorInfo };\n\nexport default {\n  ErrorInfo,\n  Rest: DefaultRest,\n  Realtime: DefaultRealtime,\n  msgpack,\n  makeProtocolMessageFromDeserialized,\n};\n", "import { IPlatformConfig } from './types/IPlatformConfig';\nimport { IPlatformHttpStatic } from './types/http';\nimport IDefaults from './types/IDefaults';\nimport IWebStorage from './types/IWebStorage';\nimport IBufferUtils from './types/IBufferUtils';\nimport * as WebBufferUtils from '../platform/web/lib/util/bufferutils';\nimport * as NodeBufferUtils from '../platform/nodejs/lib/util/bufferutils';\nimport { IUntypedCryptoStatic } from '../common/types/ICryptoStatic';\nimport TransportName from './constants/TransportName';\nimport { TransportCtor } from './lib/transport/transport';\n\nexport type Bufferlike = WebBufferUtils.Bufferlike | NodeBufferUtils.Bufferlike;\ntype BufferUtilsOutput = WebBufferUtils.Output | NodeBufferUtils.Output;\ntype ToBufferOutput = WebBufferUtils.ToBufferOutput | NodeBufferUtils.ToBufferOutput;\n\nexport type TransportImplementations = Partial<Record<TransportName, TransportCtor>>;\n\nexport default class Platform {\n  static Config: IPlatformConfig;\n  /*\n     What we actually _want_ is for Platform to be a generic class\n     parameterised by Bufferlike etc, but that requires far-reaching changes to\n     components that make use of Platform. So instead we have to advertise a\n     BufferUtils object that accepts a broader range of data types than it\n     can in reality handle.\n   */\n  static BufferUtils: IBufferUtils<Bufferlike, BufferUtilsOutput, ToBufferOutput>;\n  /*\n     We\u2019d like this to be ICryptoStatic with the correct generic arguments,\n     but Platform doesn\u2019t currently allow that, as described in the BufferUtils\n     comment above.\n   */\n  static Crypto: IUntypedCryptoStatic | null;\n  static Http: IPlatformHttpStatic;\n  static Transports: {\n    order: TransportName[];\n    // Transport implementations that always come with this platform\n    bundledImplementations: TransportImplementations;\n  };\n  static Defaults: IDefaults;\n  static WebStorage: IWebStorage | null;\n}\n", "import Platform from 'common/platform';\n\nexport type LoggerOptions = {\n  handler: LoggerFunction;\n  level: LogLevels;\n};\ntype LoggerFunction = (...args: string[]) => void;\n\n// Workaround for salesforce lightning locker compatibility\n// This is a shorthand version of Utils.getGlobalObject (which we can't use here without creating a circular import)\nlet globalObject = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : self;\n\nenum LogLevels {\n  None = 0,\n  Error = 1,\n  Major = 2,\n  Minor = 3,\n  Micro = 4,\n}\n\nfunction pad(timeSegment: number, three?: number) {\n  return `${timeSegment}`.padStart(three ? 3 : 2, '0');\n}\n\nfunction getHandler(logger: Function): Function {\n  return Platform.Config.logTimestamps\n    ? function (msg: unknown) {\n        const time = new Date();\n        logger(\n          pad(time.getHours()) +\n            ':' +\n            pad(time.getMinutes()) +\n            ':' +\n            pad(time.getSeconds()) +\n            '.' +\n            pad(time.getMilliseconds(), 1) +\n            ' ' +\n            msg,\n        );\n      }\n    : function (msg: string) {\n        logger(msg);\n      };\n}\n\nconst getDefaultLoggers = (): [Function, Function] => {\n  let consoleLogger;\n  let errorLogger;\n\n  // we expect ably-js to be run in environments which have `console` object available with its `log` function\n  if (typeof globalObject?.console?.log === 'function') {\n    consoleLogger = function (...args: unknown[]) {\n      console.log.apply(console, args);\n    };\n\n    errorLogger = console.warn\n      ? function (...args: unknown[]) {\n          console.warn.apply(console, args);\n        }\n      : consoleLogger;\n  } else {\n    // otherwise we should fallback to noop for log functions\n    consoleLogger = errorLogger = function () {};\n  }\n\n  return [consoleLogger, errorLogger].map(getHandler) as [Function, Function];\n};\n\nclass Logger {\n  private static defaultLogLevel: LogLevels = LogLevels.Error;\n  private static defaultLogHandler: Function;\n  private static defaultLogErrorHandler: Function;\n\n  private logLevel: LogLevels;\n  private logHandler: Function;\n  private logErrorHandler: Function;\n\n  // public constants\n  static readonly LOG_NONE: LogLevels = LogLevels.None;\n  static readonly LOG_ERROR: LogLevels = LogLevels.Error;\n  static readonly LOG_MAJOR: LogLevels = LogLevels.Major;\n  static readonly LOG_MINOR: LogLevels = LogLevels.Minor;\n  static readonly LOG_MICRO: LogLevels = LogLevels.Micro;\n\n  /**\n   * This logger instance should only be used when there is no more appropriate logger to use, for example when implementing a public static method or function whose API doesn\u2019t accept any logging configuration.\n   */\n  static defaultLogger: Logger;\n\n  static initLogHandlers() {\n    const [logHandler, logErrorHandler] = getDefaultLoggers();\n    this.defaultLogHandler = logHandler;\n    this.defaultLogErrorHandler = logErrorHandler;\n    this.defaultLogger = new Logger();\n  }\n\n  constructor() {\n    this.logLevel = Logger.defaultLogLevel;\n    this.logHandler = Logger.defaultLogHandler;\n    this.logErrorHandler = Logger.defaultLogErrorHandler;\n  }\n\n  /* public static functions */\n  /**\n   * In the modular variant of the SDK, the `stripLogs` esbuild plugin strips out all calls to this method (when invoked as `Logger.logAction(...)`) except when called with level `Logger.LOG_ERROR`. If you wish for a log statement to never be stripped, use the {@link logActionNoStrip} method instead.\n   *\n   * The aforementioned plugin expects `level` to be an expression of the form `Logger.LOG_*`; that is, you can\u2019t dynamically specify the log level.\n   */\n  static logAction = (logger: Logger, level: LogLevels, action: string, message?: string) => {\n    this.logActionNoStrip(logger, level, action, message);\n  };\n\n  /**\n   * Calls to this method are never stripped by the `stripLogs` esbuild plugin. Use it for log statements that you wish to always be included in the modular variant of the SDK.\n   */\n  static logActionNoStrip(logger: Logger, level: LogLevels, action: string, message?: string) {\n    logger.logAction(level, action, message);\n  }\n\n  private logAction(level: LogLevels, action: string, message?: string) {\n    if (this.shouldLog(level)) {\n      (level === LogLevels.Error ? this.logErrorHandler : this.logHandler)('Ably: ' + action + ': ' + message, level);\n    }\n  }\n\n  deprecated = (description: string, msg: string) => {\n    this.deprecationWarning(`${description} is deprecated and will be removed in a future version. ${msg}`);\n  };\n\n  renamedClientOption(oldName: string, newName: string) {\n    this.deprecationWarning(\n      `The \\`${oldName}\\` client option has been renamed to \\`${newName}\\`. Please update your code to use \\`${newName}\\` instead. \\`${oldName}\\` will be removed in a future version.`,\n    );\n  }\n\n  renamedMethod(className: string, oldName: string, newName: string) {\n    this.deprecationWarning(\n      `\\`${className}\\`\u2019s \\`${oldName}\\` method has been renamed to \\`${newName}\\`. Please update your code to use \\`${newName}\\` instead. \\`${oldName}\\` will be removed in a future version.`,\n    );\n  }\n\n  deprecationWarning(message: string) {\n    if (this.shouldLog(LogLevels.Error)) {\n      this.logErrorHandler(`Ably: Deprecation warning - ${message}`, LogLevels.Error);\n    }\n  }\n\n  /* Where a logging operation is expensive, such as serialisation of data, use shouldLog will prevent\n\t   the object being serialised if the log level will not output the message */\n  shouldLog = (level: LogLevels) => {\n    return level <= this.logLevel;\n  };\n\n  setLog = (level: LogLevels | undefined, handler: Function | undefined) => {\n    if (level !== undefined) this.logLevel = level;\n    if (handler !== undefined) this.logHandler = this.logErrorHandler = handler;\n  };\n}\n\nexport default Logger;\n", "import Platform, { Bufferlike } from 'common/platform';\r\nimport ErrorInfo, { PartialErrorInfo } from 'common/lib/types/errorinfo';\r\nimport { ModularPlugins } from '../client/modularplugins';\r\nimport { MsgPack } from 'common/types/msgpack';\r\n\r\nfunction randomPosn(arrOrStr: Array<unknown> | string) {\r\n  return Math.floor(Math.random() * arrOrStr.length);\r\n}\r\n\r\n/**\r\n * Add a set of properties to a target object\r\n *\r\n * @param target the target object\r\n * @param args objects, which enumerable properties are added to target, by reference only\r\n * @returns target object with added properties\r\n */\r\nexport function mixin(\r\n  target: Record<string, unknown>,\r\n  ...args: Array<object | undefined | null>\r\n): Record<string, unknown> {\r\n  for (let i = 0; i < args.length; i++) {\r\n    const source = args[i];\r\n    if (!source) {\r\n      break;\r\n    }\r\n\r\n    for (const key in source) {\r\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n        target[key] = (source as Record<string, unknown>)[key];\r\n      }\r\n    }\r\n  }\r\n  return target;\r\n}\r\n\r\n/**\r\n * Creates a copy of enumerable properties of the source object\r\n *\r\n * @param src object to copy\r\n * @returns copy of src\r\n */\r\nexport function copy<T = Record<string, unknown>>(src: T | Record<string, unknown> | null | undefined): T {\r\n  return mixin({}, src as Record<string, unknown>) as T;\r\n}\r\n\r\n/*\r\n * Ensures that an Array object is always returned\r\n * returning the original Array of obj is an Array\r\n * else wrapping the obj in a single element Array\r\n */\r\nexport function ensureArray(obj: Record<string, unknown>): unknown[] {\r\n  if (isNil(obj)) {\r\n    return [];\r\n  }\r\n  if (Array.isArray(obj)) {\r\n    return obj;\r\n  }\r\n  return [obj];\r\n}\r\n\r\nexport function isObject(ob: unknown): ob is Record<string, unknown> {\r\n  return Object.prototype.toString.call(ob) == '[object Object]';\r\n}\r\n\r\n/*\r\n * Determine whether or not an object contains\r\n * any enumerable properties.\r\n * ob: the object\r\n */\r\nexport function isEmpty(ob: Record<string, unknown> | unknown[]): boolean {\r\n  for (const prop in ob) return false;\r\n  return true;\r\n}\r\n\r\n/**\r\n * Checks if `value` is `null` or `undefined`.\r\n *\r\n * Source: https://github.com/lodash/lodash/blob/main/src/isNil.ts\r\n */\r\nexport function isNil(arg: unknown): arg is null | undefined {\r\n  return arg == null;\r\n}\r\n\r\n/*\r\n * Perform a simple shallow clone of an object.\r\n * Result is an object irrespective of whether\r\n * the input is an object or array. All\r\n * enumerable properties are copied.\r\n * ob: the object\r\n */\r\nexport function shallowClone(ob: Record<string, unknown>): Record<string, unknown> {\r\n  const result = new Object() as Record<string, unknown>;\r\n  for (const prop in ob) result[prop] = ob[prop];\r\n  return result;\r\n}\r\n\r\n/*\r\n * Clone an object by creating a new object with the\r\n * given object as its prototype. Optionally\r\n * a set of additional own properties can be\r\n * supplied to be added to the newly created clone.\r\n * ob:            the object to be cloned\r\n * ownProperties: optional object with additional\r\n *                properties to add\r\n */\r\nexport function prototypicalClone(\r\n  ob: Record<string, unknown>,\r\n  ownProperties: Record<string, unknown>,\r\n): Record<string, unknown> {\r\n  class F {}\r\n  F.prototype = ob;\r\n  const result = new F() as Record<string, unknown>;\r\n  if (ownProperties) mixin(result, ownProperties);\r\n  return result;\r\n}\r\n\r\n/*\r\n * Declare a constructor to represent a subclass\r\n * of another constructor\r\n * If platform has a built-in version we use that from Platform, else we\r\n * define here (so can make use of other Utils fns)\r\n * See node.js util.inherits\r\n */\r\nexport const inherits = function (ctor: any, superCtor: Function) {\r\n  if (Platform.Config.inherits) {\r\n    Platform.Config.inherits(ctor, superCtor);\r\n    return;\r\n  }\r\n  ctor.super_ = superCtor;\r\n  ctor.prototype = prototypicalClone(superCtor.prototype, { constructor: ctor });\r\n};\r\n\r\n/*\r\n * Determine whether or not an object has an enumerable\r\n * property whose value equals a given value.\r\n * ob:  the object\r\n * val: the value to find\r\n */\r\nexport function containsValue(ob: Record<string, unknown>, val: unknown): boolean {\r\n  for (const i in ob) {\r\n    if (ob[i] == val) return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function intersect<K extends string, T>(arr: Array<K>, ob: K[] | Partial<Record<K, T>>): K[] {\r\n  return Array.isArray(ob) ? arrIntersect(arr, ob) : arrIntersectOb(arr, ob);\r\n}\r\n\r\nexport function arrIntersect<T>(arr1: Array<T>, arr2: Array<T>): Array<T> {\r\n  const result = [];\r\n  for (let i = 0; i < arr1.length; i++) {\r\n    const member = arr1[i];\r\n    if (arr2.indexOf(member) != -1) result.push(member);\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function arrIntersectOb<K extends string>(arr: Array<K>, ob: Partial<Record<K, unknown>>): K[] {\r\n  const result = [];\r\n  for (let i = 0; i < arr.length; i++) {\r\n    const member = arr[i];\r\n    if (member in ob) result.push(member);\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function arrDeleteValue<T>(arr: Array<T>, val: T): boolean {\r\n  const idx = arr.indexOf(val);\r\n  const res = idx != -1;\r\n  if (res) arr.splice(idx, 1);\r\n  return res;\r\n}\r\n\r\nexport function arrWithoutValue<T>(arr: Array<T>, val: T): Array<T> {\r\n  const newArr = arr.slice();\r\n  arrDeleteValue(newArr, val);\r\n  return newArr;\r\n}\r\n\r\n/*\r\n * Construct an array of the keys of the enumerable\r\n * properties of a given object, optionally limited\r\n * to only the own properties.\r\n * ob:      the object\r\n * ownOnly: boolean, get own properties only\r\n */\r\nexport function keysArray(ob: Record<string, unknown>, ownOnly?: boolean): Array<string> {\r\n  const result = [];\r\n  for (const prop in ob) {\r\n    if (ownOnly && !Object.prototype.hasOwnProperty.call(ob, prop)) continue;\r\n    result.push(prop);\r\n  }\r\n  return result;\r\n}\r\n\r\n/*\r\n * Construct an array of the values of the enumerable\r\n * properties of a given object, optionally limited\r\n * to only the own properties.\r\n * ob:      the object\r\n * ownOnly: boolean, get own properties only\r\n */\r\nexport function valuesArray<T>(ob: Record<string, T>, ownOnly?: boolean): T[] {\r\n  const result = [];\r\n  for (const prop in ob) {\r\n    if (ownOnly && !Object.prototype.hasOwnProperty.call(ob, prop)) continue;\r\n    result.push(ob[prop]);\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function forInOwnNonNullProperties(ob: Record<string, unknown>, fn: (prop: string) => void): void {\r\n  for (const prop in ob) {\r\n    if (Object.prototype.hasOwnProperty.call(ob, prop) && ob[prop]) {\r\n      fn(prop);\r\n    }\r\n  }\r\n}\r\n\r\nexport function allSame(arr: Array<Record<string, unknown>>, prop: string): boolean {\r\n  if (arr.length === 0) {\r\n    return true;\r\n  }\r\n  const first = arr[0][prop];\r\n  return arr.every(function (item) {\r\n    return item[prop] === first;\r\n  });\r\n}\r\n\r\nexport enum Format {\r\n  msgpack = 'msgpack',\r\n  json = 'json',\r\n}\r\n\r\nexport function arrPopRandomElement<T>(arr: Array<T>): T {\r\n  return arr.splice(randomPosn(arr), 1)[0];\r\n}\r\n\r\nexport function toQueryString(params?: Record<string, string> | null): string {\r\n  const parts = [];\r\n  if (params) {\r\n    for (const key in params) parts.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));\r\n  }\r\n  return parts.length ? '?' + parts.join('&') : '';\r\n}\r\n\r\nexport function parseQueryString(query: string): Record<string, string> {\r\n  let match;\r\n  const search = /([^?&=]+)=?([^&]*)/g;\r\n  const result: Record<string, string> = {};\r\n\r\n  while ((match = search.exec(query))) result[decodeURIComponent(match[1])] = decodeURIComponent(match[2]);\r\n\r\n  return result;\r\n}\r\n\r\nexport function isErrorInfoOrPartialErrorInfo(err: unknown): err is ErrorInfo | PartialErrorInfo {\r\n  return typeof err == 'object' && err !== null && (err instanceof ErrorInfo || err instanceof PartialErrorInfo);\r\n}\r\n\r\nexport function inspectError(err: unknown): string {\r\n  if (\r\n    err instanceof Error ||\r\n    (err as ErrorInfo)?.constructor?.name === 'ErrorInfo' ||\r\n    (err as PartialErrorInfo)?.constructor?.name === 'PartialErrorInfo'\r\n  )\r\n    return (err as Error).toString();\r\n  return Platform.Config.inspect(err);\r\n}\r\n\r\nexport function inspectBody(body: unknown): string {\r\n  if (Platform.BufferUtils.isBuffer(body)) {\r\n    return (body as any).toString();\r\n  } else if (typeof body === 'string') {\r\n    return body;\r\n  } else {\r\n    return Platform.Config.inspect(body);\r\n  }\r\n}\r\n\r\n/**\r\n * Data is assumed to be either a string, a number, a boolean or a buffer.\r\n *\r\n * Returns the byte size of the provided data based on the spec:\r\n * - TM6a - size of the string is byte length of the string\r\n * - TM6c - size of the buffer is its size in bytes\r\n * - OD3d - size of a number is 8 bytes\r\n * - OD3b - size of a boolean is 1 byte\r\n */\r\nexport function dataSizeBytes(data: string | number | boolean | Bufferlike): number {\r\n  if (Platform.BufferUtils.isBuffer(data)) {\r\n    return Platform.BufferUtils.byteLength(data);\r\n  }\r\n  if (typeof data === 'string') {\r\n    return Platform.Config.stringByteSize(data);\r\n  }\r\n  if (typeof data === 'number') {\r\n    return 8;\r\n  }\r\n  if (typeof data === 'boolean') {\r\n    return 1;\r\n  }\r\n  throw new Error(\r\n    `Expected input of Utils.dataSizeBytes to be a string, a number, a boolean or a buffer, but was: ${typeof data}`,\r\n  );\r\n}\r\n\r\nexport function cheapRandStr(): string {\r\n  return String(Math.random()).substr(2);\r\n}\r\n\r\n/* Takes param the minimum number of bytes of entropy the string must\r\n * include, not the length of the string. String length produced is not\r\n * guaranteed. */\r\nexport const randomString = async (numBytes: number): Promise<string> => {\r\n  const buffer = await Platform.Config.getRandomArrayBuffer(numBytes);\r\n  return Platform.BufferUtils.base64Encode(buffer);\r\n};\r\n\r\n/* Pick n elements at random without replacement from an array */\r\nexport function arrChooseN<T>(arr: Array<T>, n: number): Array<T> {\r\n  const numItems = Math.min(n, arr.length),\r\n    mutableArr = arr.slice(),\r\n    result: Array<T> = [];\r\n  for (let i = 0; i < numItems; i++) {\r\n    result.push(arrPopRandomElement(mutableArr));\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Uses a callback to communicate the result of a `Promise`. The first argument passed to the callback will be either an error (when the promise is rejected) or `null` (when the promise is fulfilled). In the case where the promise is fulfilled, the resulting value will be passed to the callback as a second argument.\r\n */\r\nexport function whenPromiseSettles<T, E = unknown>(\r\n  promise: Promise<T>,\r\n  callback?: (err: E | null, result?: T) => void,\r\n) {\r\n  promise\r\n    .then((result) => {\r\n      callback?.(null, result);\r\n    })\r\n    .catch((err: unknown) => {\r\n      // We make no guarantees about the type of the error that gets passed to the callback. Issue https://github.com/ably/ably-js/issues/1617 will think about how to correctly handle error types.\r\n      callback?.(err as E);\r\n    });\r\n}\r\n\r\nexport function decodeBody<T>(body: unknown, MsgPack: MsgPack | null, format?: Format | null): T {\r\n  if (format == 'msgpack') {\r\n    if (!MsgPack) {\r\n      throwMissingPluginError('MsgPack');\r\n    }\r\n    return MsgPack.decode(body as Buffer);\r\n  }\r\n\r\n  return JSON.parse(String(body));\r\n}\r\n\r\nexport function encodeBody(body: unknown, MsgPack: MsgPack | null, format?: Format): string | Buffer {\r\n  if (format == 'msgpack') {\r\n    if (!MsgPack) {\r\n      throwMissingPluginError('MsgPack');\r\n    }\r\n    return MsgPack.encode(body, true) as Buffer;\r\n  }\r\n\r\n  return JSON.stringify(body);\r\n}\r\n\r\nexport function allToLowerCase(arr: Array<string>): Array<string> {\r\n  return arr.map(function (element) {\r\n    return element && element.toLowerCase();\r\n  });\r\n}\r\n\r\nexport function allToUpperCase(arr: Array<string>): Array<string> {\r\n  return arr.map(function (element) {\r\n    return element && element.toUpperCase();\r\n  });\r\n}\r\n\r\nexport function getBackoffCoefficient(count: number) {\r\n  return Math.min((count + 2) / 3, 2);\r\n}\r\n\r\nexport function getJitterCoefficient() {\r\n  return 1 - Math.random() * 0.2;\r\n}\r\n\r\n/**\r\n *\r\n * @param initialTimeout initial timeout value\r\n * @param retryAttempt integer indicating retryAttempt\r\n * @returns RetryTimeout value for given timeout and retryAttempt.\r\n * If x is the value generated then,\r\n * Upper bound = min((retryAttempt + 2) / 3, 2) * initialTimeout,\r\n * Lower bound = 0.8 * Upper bound,\r\n * Lower bound < x < Upper bound\r\n */\r\nexport function getRetryTime(initialTimeout: number, retryAttempt: number) {\r\n  return initialTimeout * getBackoffCoefficient(retryAttempt) * getJitterCoefficient();\r\n}\r\n\r\nexport function getGlobalObject() {\r\n  if (typeof global !== 'undefined') {\r\n    return global;\r\n  }\r\n\r\n  if (typeof window !== 'undefined') {\r\n    return window;\r\n  }\r\n\r\n  return self;\r\n}\r\n\r\nexport function shallowEquals(source: Record<string, unknown>, target: Record<string, unknown>) {\r\n  return (\r\n    Object.keys(source).every((key) => source[key] === target[key]) &&\r\n    Object.keys(target).every((key) => target[key] === source[key])\r\n  );\r\n}\r\n\r\nexport function matchDerivedChannel(name: string) {\r\n  /**\r\n   * This regex check is to retain existing channel params if any e.g [?rewind=1]foo to\r\n   * [filter=xyz?rewind=1]foo. This is to keep channel compatibility around use of\r\n   * channel params that work with derived channels.\r\n   *\r\n   * This eslint unsafe regex warning is triggered because the RegExp uses nested quantifiers,\r\n   * but it does not create any situation where the regex engine has to\r\n   * explore a large number of possible matches so it\u2019s safe to ignore\r\n   */\r\n  const regex = /^(\\[([^?]*)(?:(.*))\\])?(.+)$/; // eslint-disable-line\r\n  const match = name.match(regex);\r\n  if (!match || !match.length || match.length < 5) {\r\n    throw new ErrorInfo('regex match failed', 400, 40010);\r\n  }\r\n  // Fail if there is already a channel qualifier, eg [meta]foo should fail instead of just overriding with [filter=xyz]foo\r\n  if (match![2]) {\r\n    throw new ErrorInfo(`cannot use a derived option with a ${match[2]} channel`, 400, 40010);\r\n  }\r\n  // Return match values to be added to derive channel quantifier.\r\n  return {\r\n    qualifierParam: match[3] || '',\r\n    channelName: match[4],\r\n  };\r\n}\r\n\r\nexport function toBase64(str: string) {\r\n  const bufferUtils = Platform.BufferUtils;\r\n  const textBuffer = bufferUtils.utf8Encode(str);\r\n  return bufferUtils.base64Encode(textBuffer);\r\n}\r\n\r\nexport function arrEquals(a: any[], b: any[]) {\r\n  return (\r\n    a.length === b.length &&\r\n    a.every(function (val, i) {\r\n      return val === b[i];\r\n    })\r\n  );\r\n}\r\n\r\nexport function createMissingPluginError(pluginName: keyof ModularPlugins): ErrorInfo {\r\n  return new ErrorInfo(`${pluginName} plugin not provided`, 40019, 400);\r\n}\r\n\r\nexport function throwMissingPluginError(pluginName: keyof ModularPlugins): never {\r\n  throw createMissingPluginError(pluginName);\r\n}\r\n\r\nexport async function withTimeoutAsync<A>(promise: Promise<A>, timeout = 5000, err = 'Timeout expired'): Promise<A> {\r\n  const e = new ErrorInfo(err, 50000, 500);\r\n  return Promise.race([promise, new Promise<A>((_resolve, reject) => setTimeout(() => reject(e), timeout))]);\r\n}\r\n\r\ntype NonFunctionKeyNames<A> = { [P in keyof A]: A[P] extends Function ? never : P }[keyof A];\r\nexport type Properties<A> = Pick<A, NonFunctionKeyNames<A>>;\r\n", "import Platform from 'common/platform';\nimport * as Utils from '../util/utils';\nimport * as API from '../../../../ably';\n\nexport interface IPartialErrorInfo extends Error {\n  code: number | null;\n  statusCode?: number;\n  cause?: string | Error | ErrorInfo;\n  href?: string;\n}\n\nfunction toString(err: ErrorInfo | PartialErrorInfo) {\n  let result = '[' + err.constructor.name;\n  if (err.message) result += ': ' + err.message;\n  if (err.statusCode) result += '; statusCode=' + err.statusCode;\n  if (err.code) result += '; code=' + err.code;\n  if (err.cause) result += '; cause=' + Utils.inspectError(err.cause);\n  if (err.href && !(err.message && err.message.indexOf('help.ably.io') > -1)) result += '; see ' + err.href + ' ';\n  result += ']';\n  return result;\n}\n\nexport interface IConvertibleToErrorInfo {\n  message: string;\n  code: number;\n  statusCode: number;\n}\n\nexport interface IConvertibleToPartialErrorInfo {\n  message: string;\n  code: number | null;\n  statusCode?: number;\n}\n\nexport default class ErrorInfo extends Error implements IPartialErrorInfo, API.ErrorInfo {\n  code: number;\n  statusCode: number;\n  cause?: string | Error | ErrorInfo;\n  href?: string;\n\n  constructor(message: string, code: number, statusCode: number, cause?: string | Error | ErrorInfo) {\n    super(message);\n    if (typeof Object.setPrototypeOf !== 'undefined') {\n      Object.setPrototypeOf(this, ErrorInfo.prototype);\n    }\n    this.code = code;\n    this.statusCode = statusCode;\n    this.cause = cause;\n  }\n\n  toString(): string {\n    return toString(this);\n  }\n\n  static fromValues(values: IConvertibleToErrorInfo): ErrorInfo {\n    const { message, code, statusCode } = values;\n    if (typeof message !== 'string' || typeof code !== 'number' || typeof statusCode !== 'number') {\n      throw new Error('ErrorInfo.fromValues(): invalid values: ' + Platform.Config.inspect(values));\n    }\n    const result = Object.assign(new ErrorInfo(message, code, statusCode), values);\n    if (result.code && !result.href) {\n      result.href = 'https://help.ably.io/error/' + result.code;\n    }\n    return result;\n  }\n}\n\nexport class PartialErrorInfo extends Error implements IPartialErrorInfo {\n  code: number | null;\n  statusCode?: number;\n  cause?: string | Error | ErrorInfo;\n  href?: string;\n\n  constructor(message: string, code: number | null, statusCode?: number, cause?: string | Error | ErrorInfo) {\n    super(message);\n    if (typeof Object.setPrototypeOf !== 'undefined') {\n      Object.setPrototypeOf(this, PartialErrorInfo.prototype);\n    }\n    this.code = code;\n    this.statusCode = statusCode;\n    this.cause = cause;\n  }\n\n  toString(): string {\n    return toString(this);\n  }\n\n  static fromValues(values: IConvertibleToPartialErrorInfo): PartialErrorInfo {\n    const { message, code, statusCode } = values;\n    if (\n      typeof message !== 'string' ||\n      (!Utils.isNil(code) && typeof code !== 'number') ||\n      (!Utils.isNil(statusCode) && typeof statusCode !== 'number')\n    ) {\n      throw new Error('PartialErrorInfo.fromValues(): invalid values: ' + Platform.Config.inspect(values));\n    }\n    const result = Object.assign(new PartialErrorInfo(message, code, statusCode), values);\n    if (result.code && !result.href) {\n      result.href = 'https://help.ably.io/error/' + result.code;\n    }\n    return result;\n  }\n}\n", "{\r\n  \"name\": \"ably\",\r\n  \"description\": \"Realtime client library for Ably, the realtime messaging service\",\r\n  \"version\": \"2.10.1\",\r\n  \"license\": \"Apache-2.0\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/ably/ably-js/issues\",\r\n    \"email\": \"support@ably.com\"\r\n  },\r\n  \"main\": \"./build/ably-node.js\",\r\n  \"browser\": \"./build/ably.js\",\r\n  \"react-native\": \"./build/ably-reactnative.js\",\r\n  \"typings\": \"./ably.d.ts\",\r\n  \"exports\": {\r\n    \".\": {\r\n      \"types\": \"./ably.d.ts\",\r\n      \"node\": \"./build/ably-node.js\",\r\n      \"react-native\": \"./build/ably-reactnative.js\",\r\n      \"default\": \"./build/ably.js\"\r\n    },\r\n    \"./modular\": {\r\n      \"types\": \"./modular.d.ts\",\r\n      \"import\": \"./build/modular/index.mjs\"\r\n    },\r\n    \"./react\": {\r\n      \"require\": \"./react/cjs/index.js\",\r\n      \"import\": \"./react/mjs/index.js\"\r\n    },\r\n    \"./push\": {\r\n      \"types\": \"./push.d.ts\",\r\n      \"import\": \"./build/push.js\"\r\n    },\r\n    \"./objects\": {\r\n      \"types\": \"./objects.d.ts\",\r\n      \"import\": \"./build/objects.js\"\r\n    }\r\n  },\r\n  \"files\": [\r\n    \"build/**\",\r\n    \"ably.d.ts\",\r\n    \"objects.d.ts\",\r\n    \"modular.d.ts\",\r\n    \"push.d.ts\",\r\n    \"resources/**\",\r\n    \"src/**\",\r\n    \"react/**\"\r\n  ],\r\n  \"dependencies\": {\r\n    \"@ably/msgpack-js\": \"^0.4.0\",\r\n    \"dequal\": \"^2.0.3\",\r\n    \"fastestsmallesttextencoderdecoder\": \"^1.0.22\",\r\n    \"got\": \"^11.8.5\",\r\n    \"ulid\": \"^2.3.0\",\r\n    \"ws\": \"^8.17.1\"\r\n  },\r\n  \"peerDependencies\": {\r\n    \"react\": \">=16.8.0\",\r\n    \"react-dom\": \">=16.8.0\"\r\n  },\r\n  \"peerDependenciesMeta\": {\r\n    \"react\": {\r\n      \"optional\": true\r\n    },\r\n    \"react-dom\": {\r\n      \"optional\": true\r\n    }\r\n  },\r\n  \"devDependencies\": {\r\n    \"@ably/vcdiff-decoder\": \"1.0.6\",\r\n    \"@arethetypeswrong/cli\": \"^0.13.1\",\r\n    \"@babel/generator\": \"^7.23.6\",\r\n    \"@babel/parser\": \"^7.23.6\",\r\n    \"@babel/traverse\": \"^7.23.7\",\r\n    \"@testing-library/react\": \"^13.3.0\",\r\n    \"@types/cli-table\": \"^0.3.4\",\r\n    \"@types/jmespath\": \"^0.15.2\",\r\n    \"@types/node\": \"^18.0.0\",\r\n    \"@types/request\": \"^2.48.7\",\r\n    \"@types/ws\": \"^8.2.0\",\r\n    \"@typescript-eslint/eslint-plugin\": \"^5.59.6\",\r\n    \"@typescript-eslint/parser\": \"^5.59.6\",\r\n    \"@vitejs/plugin-react\": \"^1.3.2\",\r\n    \"async\": \"ably-forks/async#requirejs\",\r\n    \"aws-sdk\": \"^2.1413.0\",\r\n    \"chai\": \"^4.2.0\",\r\n    \"cli-table\": \"^0.3.11\",\r\n    \"cors\": \"^2.8.5\",\r\n    \"csv\": \"^6.3.9\",\r\n    \"dox\": \"^1.0.0\",\r\n    \"esbuild\": \"^0.18.10\",\r\n    \"esbuild-plugin-umd-wrapper\": \"ably-forks/esbuild-plugin-umd-wrapper#1.0.7-optional-amd-named-module\",\r\n    \"esbuild-runner\": \"^2.2.2\",\r\n    \"eslint\": \"^7.13.0\",\r\n    \"eslint-plugin-import\": \"^2.28.0\",\r\n    \"eslint-plugin-jsdoc\": \"^40.0.0\",\r\n    \"eslint-plugin-react\": \"^7.32.2\",\r\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\r\n    \"eslint-plugin-security\": \"^1.4.0\",\r\n    \"express\": \"^4.17.1\",\r\n    \"glob\": \"^10.4.2\",\r\n    \"grunt\": \"^1.6.1\",\r\n    \"grunt-cli\": \"~1.2.0\",\r\n    \"grunt-shell\": \"~1.1\",\r\n    \"grunt-webpack\": \"^5.0.0\",\r\n    \"hexy\": \"~0.2\",\r\n    \"jmespath\": \"^0.16.0\",\r\n    \"jsdom\": \"^20.0.0\",\r\n    \"minimist\": \"^1.2.5\",\r\n    \"mocha\": \"^8.1.3\",\r\n    \"mocha-junit-reporter\": \"^2.2.1\",\r\n    \"path-browserify\": \"^1.0.1\",\r\n    \"playwright\": \"^1.39.0\",\r\n    \"prettier\": \"^3.3.3\",\r\n    \"process\": \"^0.11.10\",\r\n    \"react\": \">=18.1.0\",\r\n    \"react-dom\": \">=18.1.0\",\r\n    \"requirejs\": \"~2.1\",\r\n    \"shelljs\": \"~0.8\",\r\n    \"source-map-explorer\": \"^2.5.2\",\r\n    \"source-map-support\": \"^0.5.21\",\r\n    \"stream-browserify\": \"^3.0.0\",\r\n    \"ts-loader\": \"^9.4.2\",\r\n    \"tsconfig-paths-webpack-plugin\": \"^4.0.1\",\r\n    \"tslib\": \"^2.3.1\",\r\n    \"typedoc\": \"^0.24.7\",\r\n    \"typescript\": \"^4.9.5\",\r\n    \"vite\": \"^4.4.9\",\r\n    \"vitest\": \"^0.18.0\",\r\n    \"webpack\": \"^5.79.0\",\r\n    \"webpack-cli\": \"^5.0.1\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=16\"\r\n  },\r\n  \"repository\": \"ably/ably-js\",\r\n  \"jspm\": {\r\n    \"registry\": \"npm\",\r\n    \"directories\": {\r\n      \"lib\": \"build\"\r\n    },\r\n    \"main\": \"ably\"\r\n  },\r\n  \"scripts\": {\r\n    \"start:react\": \"npx vite serve\",\r\n    \"grunt\": \"grunt\",\r\n    \"test\": \"npm run test:node\",\r\n    \"test:node\": \"npm run build:node && npm run build:push && npm run build:objects && mocha\",\r\n    \"test:grep\": \"npm run build:node && npm run build:push && npm run build:objects && mocha --grep\",\r\n    \"test:node:skip-build\": \"mocha\",\r\n    \"test:webserver\": \"grunt test:webserver\",\r\n    \"test:playwright\": \"node test/support/runPlaywrightTests.js\",\r\n    \"test:react\": \"vitest run\",\r\n    \"test:package\": \"grunt test:package\",\r\n    \"concat\": \"grunt concat\",\r\n    \"build\": \"grunt build:all && npm run build:react\",\r\n    \"build:node\": \"grunt build:node\",\r\n    \"build:browser\": \"grunt build:browser\",\r\n    \"build:react\": \"npm run build:react:mjs && npm run build:react:cjs && cp src/platform/react-hooks/res/package.react.json react/package.json\",\r\n    \"build:react:mjs\": \"tsc --project src/platform/react-hooks/tsconfig.mjs.json && cp src/platform/react-hooks/res/package.mjs.json react/mjs/package.json\",\r\n    \"build:react:cjs\": \"tsc --project src/platform/react-hooks/tsconfig.cjs.json && cp src/platform/react-hooks/res/package.cjs.json react/cjs/package.json\",\r\n    \"build:push\": \"grunt build:push\",\r\n    \"build:objects\": \"grunt build:objects\",\r\n    \"requirejs\": \"grunt requirejs\",\r\n    \"lint\": \"eslint .\",\r\n    \"lint:fix\": \"eslint --fix .\",\r\n    \"prepare\": \"npm run build\",\r\n    \"format\": \"prettier --write .\",\r\n    \"format:check\": \"prettier --check .\",\r\n    \"sourcemap\": \"source-map-explorer build/ably.min.js\",\r\n    \"modulereport\": \"tsc --noEmit --esModuleInterop scripts/moduleReport.ts && esr scripts/moduleReport.ts\",\r\n    \"speccoveragereport\": \"tsc --noEmit --esModuleInterop --target ES2017 --moduleResolution node scripts/specCoverageReport.ts && esr scripts/specCoverageReport.ts\",\r\n    \"process-private-api-data\": \"tsc --noEmit --esModuleInterop --strictNullChecks scripts/processPrivateApiData/run.ts && esr scripts/processPrivateApiData/run.ts\",\r\n    \"docs\": \"typedoc\"\r\n  }\r\n}\r\n", "import Platform from 'common/platform';\nimport * as Utils from './utils';\nimport Logger from './logger';\nimport ErrorInfo from 'common/lib/types/errorinfo';\nimport { version } from '../../../../package.json';\nimport ClientOptions, { NormalisedClientOptions } from 'common/types/ClientOptions';\nimport IDefaults from '../../types/IDefaults';\nimport { MsgPack } from 'common/types/msgpack';\nimport { IUntypedCryptoStatic } from 'common/types/ICryptoStatic';\nimport { ChannelOptions } from 'common/types/channel';\nimport { ModularPlugins } from '../client/modularplugins';\n\nlet agent = 'ably-js/' + version;\n\ntype CompleteDefaults = IDefaults & {\n  ENDPOINT: string;\n  ENVIRONMENT: string;\n  REST_HOST: string;\n  REALTIME_HOST: string;\n  FALLBACK_HOSTS: string[];\n  PORT: number;\n  TLS_PORT: number;\n  TIMEOUTS: {\n    disconnectedRetryTimeout: number;\n    suspendedRetryTimeout: number;\n    httpRequestTimeout: number;\n    httpMaxRetryDuration: number;\n    channelRetryTimeout: number;\n    fallbackRetryTimeout: number;\n    connectionStateTtl: number;\n    realtimeRequestTimeout: number;\n    recvTimeout: number;\n    webSocketConnectTimeout: number;\n    webSocketSlowTimeout: number;\n  };\n  httpMaxRetryCount: number;\n  maxMessageSize: number;\n  version: string;\n  protocolVersion: number;\n  agent: string;\n  getPort(options: ClientOptions, tls?: boolean): number | undefined;\n  getHttpScheme(options: ClientOptions): string;\n  getPrimaryDomainFromEndpoint(endpoint: string): string;\n  getEndpointFallbackHosts(endpoint: string): string[];\n  getFallbackHosts(options: NormalisedClientOptions): string[];\n  getHosts(options: NormalisedClientOptions, ws?: boolean): string[];\n  checkHost(host: string): void;\n  objectifyOptions(\n    options: undefined | ClientOptions | string,\n    allowKeyOrToken: boolean,\n    sourceForErrorMessage: string,\n    logger: Logger,\n    modularPluginsToInclude?: ModularPlugins,\n  ): ClientOptions;\n  normaliseOptions(options: ClientOptions, MsgPack: MsgPack | null, logger: Logger | null): NormalisedClientOptions;\n  defaultGetHeaders(options: NormalisedClientOptions, headersOptions?: HeadersOptions): Record<string, string>;\n  defaultPostHeaders(options: NormalisedClientOptions, headersOptions?: HeadersOptions): Record<string, string>;\n};\n\nconst Defaults = {\n  ENDPOINT: 'main',\n  ENVIRONMENT: '',\n  REST_HOST: 'rest.ably.io',\n  REALTIME_HOST: 'realtime.ably.io',\n  FALLBACK_HOSTS: [\n    'main.a.fallback.ably-realtime.com',\n    'main.b.fallback.ably-realtime.com',\n    'main.c.fallback.ably-realtime.com',\n    'main.d.fallback.ably-realtime.com',\n    'main.e.fallback.ably-realtime.com',\n  ],\n  PORT: 80,\n  TLS_PORT: 443,\n  TIMEOUTS: {\n    /* Documented as options params: */\n    disconnectedRetryTimeout: 15000,\n    suspendedRetryTimeout: 30000,\n    /* Undocumented, but part of the api and can be used by customers: */\n    httpRequestTimeout: 10000,\n    httpMaxRetryDuration: 15000,\n    channelRetryTimeout: 15000,\n    fallbackRetryTimeout: 600000,\n    /* For internal / test use only: */\n    connectionStateTtl: 120000,\n    realtimeRequestTimeout: 10000,\n    recvTimeout: 90000,\n    webSocketConnectTimeout: 10000,\n    webSocketSlowTimeout: 4000,\n  },\n  httpMaxRetryCount: 3,\n  maxMessageSize: 65536,\n\n  version,\n  protocolVersion: 3,\n  agent,\n  getPort,\n  getHttpScheme,\n  getPrimaryDomainFromEndpoint,\n  getEndpointFallbackHosts,\n  getFallbackHosts,\n  getHosts,\n  checkHost,\n  objectifyOptions,\n  normaliseOptions,\n  defaultGetHeaders,\n  defaultPostHeaders,\n};\n\nexport function getPort(options: ClientOptions, tls?: boolean): number | undefined {\n  return tls || options.tls ? options.tlsPort : options.port;\n}\n\nexport function getHttpScheme(options: ClientOptions): string {\n  return options.tls ? 'https://' : 'http://';\n}\n\n/**\n * REC1b2\n */\nfunction isFqdnIpOrLocalhost(endpoint: string): boolean {\n  return endpoint.includes('.') || endpoint.includes('::') || endpoint === 'localhost';\n}\n\n/**\n * REC1b\n */\nexport function getPrimaryDomainFromEndpoint(endpoint: string): string {\n  // REC1b2 (endpoint is a valid hostname)\n  if (isFqdnIpOrLocalhost(endpoint)) return endpoint;\n\n  // REC1b3 (endpoint in form \"nonprod:[id]\")\n  if (endpoint.startsWith('nonprod:')) {\n    const routingPolicyId = endpoint.replace('nonprod:', '');\n    return `${routingPolicyId}.realtime.ably-nonprod.net`;\n  }\n\n  // REC1b4 (endpoint in form \"[id]\")\n  return `${endpoint}.realtime.ably.net`;\n}\n\n/**\n * REC2c\n *\n * @returns default callbacks based on endpoint client option\n */\nexport function getEndpointFallbackHosts(endpoint: string): string[] {\n  // REC2c2\n  if (isFqdnIpOrLocalhost(endpoint)) return [];\n\n  // REC2c3\n  if (endpoint.startsWith('nonprod:')) {\n    const routingPolicyId = endpoint.replace('nonprod:', '');\n    return endpointFallbacks(routingPolicyId, 'ably-realtime-nonprod.com');\n  }\n\n  // REC2c1\n  return endpointFallbacks(endpoint, 'ably-realtime.com');\n}\n\nexport function endpointFallbacks(routingPolicyId: string, domain: string): string[] {\n  return ['a', 'b', 'c', 'd', 'e'].map((id) => `${routingPolicyId}.${id}.fallback.${domain}`);\n}\n\nexport function getFallbackHosts(options: NormalisedClientOptions): string[] {\n  const fallbackHosts = options.fallbackHosts,\n    httpMaxRetryCount =\n      typeof options.httpMaxRetryCount !== 'undefined' ? options.httpMaxRetryCount : Defaults.httpMaxRetryCount;\n\n  return fallbackHosts ? Utils.arrChooseN(fallbackHosts, httpMaxRetryCount) : [];\n}\n\nexport function getHosts(options: NormalisedClientOptions): string[] {\n  return [options.primaryDomain].concat(getFallbackHosts(options));\n}\n\nfunction checkHost(host: string): void {\n  if (typeof host !== 'string') {\n    throw new ErrorInfo('host must be a string; was a ' + typeof host, 40000, 400);\n  }\n  if (!host.length) {\n    throw new ErrorInfo('host must not be zero-length', 40000, 400);\n  }\n}\n\nfunction getTimeouts(options: ClientOptions) {\n  /* Allow values passed in options to override default timeouts */\n  const timeouts: Record<string, number> = {};\n  for (const prop in Defaults.TIMEOUTS) {\n    timeouts[prop] = (options as Record<string, number>)[prop] || (Defaults.TIMEOUTS as Record<string, number>)[prop];\n  }\n  return timeouts;\n}\n\nexport function getAgentString(options: ClientOptions): string {\n  let agentStr = Defaults.agent;\n  if (options.agents) {\n    for (var agent in options.agents) {\n      agentStr += ' ' + agent + '/' + options.agents[agent];\n    }\n  }\n  return agentStr;\n}\n\nexport function objectifyOptions(\n  options: undefined | ClientOptions | string,\n  allowKeyOrToken: boolean,\n  sourceForErrorMessage: string,\n  logger: Logger,\n  modularPluginsToInclude?: ModularPlugins,\n): ClientOptions {\n  if (options === undefined) {\n    const msg = allowKeyOrToken\n      ? `${sourceForErrorMessage} must be initialized with either a client options object, an Ably API key, or an Ably Token`\n      : `${sourceForErrorMessage} must be initialized with a client options object`;\n    Logger.logAction(logger, Logger.LOG_ERROR, `${sourceForErrorMessage}()`, msg);\n    throw new Error(msg);\n  }\n\n  let optionsObj: ClientOptions;\n\n  if (typeof options === 'string') {\n    if (options.indexOf(':') == -1) {\n      if (!allowKeyOrToken) {\n        const msg = `${sourceForErrorMessage} cannot be initialized with just an Ably Token; you must provide a client options object with a \\`plugins\\` property. (Set this Ably Token as the object\u2019s \\`token\\` property.)`;\n        Logger.logAction(logger, Logger.LOG_ERROR, `${sourceForErrorMessage}()`, msg);\n        throw new Error(msg);\n      }\n\n      optionsObj = { token: options };\n    } else {\n      if (!allowKeyOrToken) {\n        const msg = `${sourceForErrorMessage} cannot be initialized with just an Ably API key; you must provide a client options object with a \\`plugins\\` property. (Set this Ably API key as the object\u2019s \\`key\\` property.)`;\n        Logger.logAction(logger, Logger.LOG_ERROR, `${sourceForErrorMessage}()`, msg);\n        throw new Error(msg);\n      }\n\n      optionsObj = { key: options };\n    }\n  } else {\n    optionsObj = options;\n  }\n\n  if (modularPluginsToInclude) {\n    optionsObj = { ...optionsObj, plugins: { ...modularPluginsToInclude, ...optionsObj.plugins } };\n  }\n\n  return optionsObj;\n}\n\nfunction checkIfClientOptionsAreValid(options: ClientOptions) {\n  // REC1b\n  if (options.endpoint && (options.environment || options.restHost || options.realtimeHost)) {\n    // RSC1b\n    throw new ErrorInfo(\n      'The `endpoint` option cannot be used in conjunction with the `environment`, `restHost`, or `realtimeHost` options.',\n      40106,\n      400,\n    );\n  }\n\n  // REC1c\n  if (options.environment && (options.restHost || options.realtimeHost)) {\n    // RSC1b\n    throw new ErrorInfo(\n      'The `environment` option cannot be used in conjunction with the `restHost`, or `realtimeHost` options.',\n      40106,\n      400,\n    );\n  }\n}\n\nexport function normaliseOptions(\n  options: ClientOptions,\n  MsgPack: MsgPack | null,\n  logger: Logger | null, // should only be omitted by tests\n): NormalisedClientOptions {\n  const loggerToUse = logger ?? Logger.defaultLogger;\n\n  // Deprecated options\n  if (options.environment) {\n    loggerToUse.deprecated('The `environment` client option', 'Use the `endpoint` client option instead.');\n  }\n  if (options.restHost) {\n    loggerToUse.deprecated('The `restHost` client option', 'Use the `endpoint` client option instead.');\n  }\n  if (options.realtimeHost) {\n    loggerToUse.deprecated('The `realtimeHost` client option', 'Use the `endpoint` client option instead.');\n  }\n\n  checkIfClientOptionsAreValid(options);\n\n  if (typeof options.recover === 'function' && options.closeOnUnload === true) {\n    Logger.logAction(\n      loggerToUse,\n      Logger.LOG_ERROR,\n      'Defaults.normaliseOptions',\n      'closeOnUnload was true and a session recovery function was set - these are mutually exclusive, so unsetting the latter',\n    );\n    options.recover = undefined;\n  }\n\n  if (!('closeOnUnload' in options)) {\n    /* Have closeOnUnload default to true unless we have any indication that\n     * the user may want to recover the connection */\n    options.closeOnUnload = !options.recover;\n  }\n\n  if (!('queueMessages' in options)) options.queueMessages = true;\n\n  /* infer hosts and fallbacks based on the specified endpoint */\n  const endpoint = options.endpoint || Defaults.ENDPOINT;\n\n  if (!options.fallbackHosts && !options.restHost && !options.realtimeHost && !options.port && !options.tlsPort) {\n    options.fallbackHosts = getEndpointFallbackHosts(options.environment || endpoint);\n  }\n\n  const primaryDomainFromEnvironment = options.environment && `${options.environment}.realtime.ably.net`;\n  const primaryDomainFromLegacyOptions = options.restHost || options.realtimeHost || primaryDomainFromEnvironment;\n\n  const primaryDomain = primaryDomainFromLegacyOptions || getPrimaryDomainFromEndpoint(endpoint);\n\n  (options.fallbackHosts || []).concat(primaryDomain).forEach(checkHost);\n\n  options.port = options.port || Defaults.PORT;\n  options.tlsPort = options.tlsPort || Defaults.TLS_PORT;\n  if (!('tls' in options)) options.tls = true;\n\n  const timeouts = getTimeouts(options);\n\n  if (MsgPack) {\n    if ('useBinaryProtocol' in options) {\n      options.useBinaryProtocol = Platform.Config.supportsBinary && options.useBinaryProtocol;\n    } else {\n      options.useBinaryProtocol = Platform.Config.preferBinary;\n    }\n  } else {\n    options.useBinaryProtocol = false;\n  }\n\n  const headers: Record<string, string> = {};\n  if (options.clientId) {\n    headers['X-Ably-ClientId'] = Platform.BufferUtils.base64Encode(Platform.BufferUtils.utf8Encode(options.clientId));\n  }\n\n  if (!('idempotentRestPublishing' in options)) {\n    options.idempotentRestPublishing = true;\n  }\n\n  let connectivityCheckParams = null;\n  let connectivityCheckUrl = options.connectivityCheckUrl;\n  if (options.connectivityCheckUrl) {\n    let [uri, qs] = options.connectivityCheckUrl.split('?');\n    connectivityCheckParams = qs ? Utils.parseQueryString(qs) : {};\n    if (uri.indexOf('://') === -1) {\n      uri = 'https://' + uri;\n    }\n    connectivityCheckUrl = uri;\n  }\n\n  let wsConnectivityCheckUrl = options.wsConnectivityCheckUrl;\n  if (wsConnectivityCheckUrl && wsConnectivityCheckUrl.indexOf('://') === -1) {\n    wsConnectivityCheckUrl = 'wss://' + wsConnectivityCheckUrl;\n  }\n\n  return {\n    ...options,\n    primaryDomain: primaryDomain,\n    maxMessageSize: options.maxMessageSize || Defaults.maxMessageSize,\n    timeouts,\n    connectivityCheckParams,\n    connectivityCheckUrl,\n    wsConnectivityCheckUrl,\n    headers,\n  };\n}\n\nexport function normaliseChannelOptions(Crypto: IUntypedCryptoStatic | null, logger: Logger, options?: ChannelOptions) {\n  const channelOptions = options || {};\n  if (channelOptions.cipher) {\n    if (!Crypto) Utils.throwMissingPluginError('Crypto');\n    const cipher = Crypto.getCipher(channelOptions.cipher, logger);\n    channelOptions.cipher = cipher.cipherParams;\n    channelOptions.channelCipher = cipher.cipher;\n  } else if ('cipher' in channelOptions) {\n    /* Don't deactivate an existing cipher unless options\n     * has a 'cipher' key that's falsey */\n    channelOptions.cipher = undefined;\n    channelOptions.channelCipher = null;\n  }\n  return channelOptions;\n}\n\nconst contentTypes = {\n  json: 'application/json',\n  xml: 'application/xml',\n  html: 'text/html',\n  msgpack: 'application/x-msgpack',\n  text: 'text/plain',\n};\n\nexport interface HeadersOptions {\n  format?: Utils.Format | 'xml' | 'html' | 'text';\n  protocolVersion?: number;\n}\n\nconst defaultHeadersOptions: Required<HeadersOptions> = {\n  format: Utils.Format.json,\n  protocolVersion: Defaults.protocolVersion,\n};\n\nexport function defaultGetHeaders(\n  options: NormalisedClientOptions,\n  {\n    format = defaultHeadersOptions.format,\n    protocolVersion = defaultHeadersOptions.protocolVersion,\n  }: HeadersOptions = {},\n): Record<string, string> {\n  const accept = contentTypes[format];\n  return {\n    accept: accept,\n    'X-Ably-Version': protocolVersion.toString(),\n    'Ably-Agent': getAgentString(options),\n  };\n}\n\nexport function defaultPostHeaders(\n  options: NormalisedClientOptions,\n  {\n    format = defaultHeadersOptions.format,\n    protocolVersion = defaultHeadersOptions.protocolVersion,\n  }: HeadersOptions = {},\n): Record<string, string> {\n  let contentType;\n  const accept = (contentType = contentTypes[format]);\n\n  return {\n    accept: accept,\n    'content-type': contentType,\n    'X-Ably-Version': protocolVersion.toString(),\n    'Ably-Agent': getAgentString(options),\n  };\n}\n\nexport default Defaults as CompleteDefaults;\n\nexport function getDefaults(platformDefaults: IDefaults) {\n  return Object.assign(Defaults, platformDefaults);\n}\n", "import { StandardCallback } from 'common/types/utils';\nimport ErrorInfo from 'common/lib/types/errorinfo';\nimport Logger from './logger';\n\nexport interface MulticasterInstance<T> extends Function {\n  (err?: ErrorInfo | null, result?: T): void;\n  push: (fn: StandardCallback<T>) => void;\n  /**\n   * Creates a promise that will be resolved or rejected when this instance is called.\n   */\n  createPromise: () => Promise<T>;\n  /**\n   * Syntatic sugar for when working in a context that uses promises; equivalent to calling as a function with arguments (null, result).\n   */\n  resolveAll(result: T): void;\n  /**\n   * Syntatic sugar for when working in a context that uses promises; equivalent to calling as a function with arguments (err).\n   */\n  rejectAll(err: ErrorInfo): void;\n}\n\nclass Multicaster<T> {\n  members: Array<StandardCallback<T>>;\n\n  // Private constructor; use static Multicaster.create instead\n  private constructor(\n    private readonly logger: Logger,\n    members?: Array<StandardCallback<T> | undefined>,\n  ) {\n    this.members = (members as Array<StandardCallback<T>>) || [];\n  }\n\n  private call(err?: ErrorInfo | null, result?: T): void {\n    for (const member of this.members) {\n      if (member) {\n        try {\n          member(err, result);\n        } catch (e) {\n          Logger.logAction(\n            this.logger,\n            Logger.LOG_ERROR,\n            'Multicaster multiple callback handler',\n            'Unexpected exception: ' + e + '; stack = ' + (e as Error).stack,\n          );\n        }\n      }\n    }\n  }\n\n  push(...args: Array<StandardCallback<T>>): void {\n    this.members.push(...args);\n  }\n\n  createPromise(): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this.push((err, result) => {\n        err ? reject(err) : resolve(result!);\n      });\n    });\n  }\n\n  resolveAll(result: T) {\n    this.call(null, result);\n  }\n\n  rejectAll(err: ErrorInfo) {\n    this.call(err);\n  }\n\n  static create<T>(logger: Logger, members?: Array<StandardCallback<T> | undefined>): MulticasterInstance<T> {\n    const instance = new Multicaster(logger, members);\n    return Object.assign((err?: ErrorInfo | null, result?: T) => instance.call(err, result), {\n      push: (fn: StandardCallback<T>) => instance.push(fn),\n      createPromise: () => instance.createPromise(),\n      resolveAll: (result: T) => instance.resolveAll(result),\n      rejectAll: (err: ErrorInfo) => instance.rejectAll(err),\n    });\n  }\n}\n\nexport default Multicaster;\n", "enum HttpMethods {\n  Get = 'get',\n  Delete = 'delete',\n  Post = 'post',\n  Put = 'put',\n  Patch = 'patch',\n}\n\nexport default HttpMethods;\n", "enum HttpStatusCodes {\n  Success = 200,\n  NoContent = 204,\n  BadRequest = 400,\n  Unauthorized = 401,\n  Forbidden = 403,\n  RequestTimeout = 408,\n  InternalServerError = 500,\n}\n\nexport function isSuccessCode(statusCode: number) {\n  return statusCode >= HttpStatusCodes.Success && statusCode < HttpStatusCodes.BadRequest;\n}\n\nexport default HttpStatusCodes;\n", "import Logger from '../util/logger';\nimport * as Utils from '../util/utils';\nimport Multicaster, { MulticasterInstance } from '../util/multicaster';\nimport ErrorInfo, { IPartialErrorInfo } from '../types/errorinfo';\nimport { RequestResultError, RequestParams, RequestResult } from '../../types/http';\nimport * as API from '../../../../ably';\nimport BaseClient from './baseclient';\nimport BaseRealtime from './baserealtime';\nimport ClientOptions from '../../types/ClientOptions';\nimport HttpMethods from '../../constants/HttpMethods';\nimport HttpStatusCodes from 'common/constants/HttpStatusCodes';\nimport Platform, { Bufferlike } from '../../platform';\nimport Defaults from '../util/defaults';\n\ntype BatchResult<T> = API.BatchResult<T>;\ntype TokenRevocationTargetSpecifier = API.TokenRevocationTargetSpecifier;\ntype TokenRevocationOptions = API.TokenRevocationOptions;\ntype TokenRevocationSuccessResult = API.TokenRevocationSuccessResult;\ntype TokenRevocationFailureResult = API.TokenRevocationFailureResult;\ntype TokenRevocationResult = BatchResult<TokenRevocationSuccessResult | TokenRevocationFailureResult>;\n\nconst MAX_TOKEN_LENGTH = Math.pow(2, 17);\nfunction random() {\n  return ('000000' + Math.floor(Math.random() * 1e16)).slice(-16);\n}\n\nfunction isRealtime(client: BaseClient): client is BaseRealtime {\n  return !!(client as BaseRealtime).connection;\n}\n\n/* A client auth callback may give errors in any number of formats; normalise to an ErrorInfo or PartialErrorInfo */\nfunction normaliseAuthcallbackError(err: any) {\n  if (!Utils.isErrorInfoOrPartialErrorInfo(err)) {\n    return new ErrorInfo(Utils.inspectError(err), err.code || 40170, err.statusCode || 401);\n  }\n  /* network errors will not have an inherent error code */\n  if (!err.code) {\n    if (err.statusCode === 403) {\n      err.code = 40300;\n    } else {\n      err.code = 40170;\n      /* normalise statusCode to 401 per RSA4e */\n      err.statusCode = 401;\n    }\n  }\n  return err;\n}\n\nlet hmac = (text: string, key: string): string => {\n  const bufferUtils = Platform.BufferUtils;\n\n  const textBuffer = bufferUtils.utf8Encode(text);\n  const keyBuffer = bufferUtils.utf8Encode(key);\n\n  const digest = bufferUtils.hmacSha256(textBuffer, keyBuffer);\n\n  return bufferUtils.base64Encode(digest);\n};\n\nfunction c14n(capability?: string | Record<string, Array<string>>) {\n  if (!capability) return '';\n\n  if (typeof capability == 'string') capability = JSON.parse(capability);\n\n  const c14nCapability: Record<string, Array<string>> = Object.create(null);\n  const keys = Utils.keysArray(capability as Record<string, Array<string>>, true);\n  if (!keys) return '';\n  keys.sort();\n  for (let i = 0; i < keys.length; i++) {\n    c14nCapability[keys[i]] = (capability as Record<string, Array<string>>)[keys[i]].sort();\n  }\n  return JSON.stringify(c14nCapability);\n}\n\nfunction logAndValidateTokenAuthMethod(authOptions: AuthOptions, logger: Logger) {\n  if (authOptions.authCallback) {\n    Logger.logAction(logger, Logger.LOG_MINOR, 'Auth()', 'using token auth with authCallback');\n  } else if (authOptions.authUrl) {\n    Logger.logAction(logger, Logger.LOG_MINOR, 'Auth()', 'using token auth with authUrl');\n  } else if (authOptions.key) {\n    Logger.logAction(logger, Logger.LOG_MINOR, 'Auth()', 'using token auth with client-side signing');\n  } else if (authOptions.tokenDetails) {\n    Logger.logAction(logger, Logger.LOG_MINOR, 'Auth()', 'using token auth with supplied token only');\n  } else {\n    const msg = 'authOptions must include valid authentication parameters';\n    Logger.logAction(logger, Logger.LOG_ERROR, 'Auth()', msg);\n    throw new Error(msg);\n  }\n}\n\nfunction basicAuthForced(options: ClientOptions) {\n  return 'useTokenAuth' in options && !options.useTokenAuth;\n}\n\n/* RSA4 */\nexport function useTokenAuth(options: ClientOptions) {\n  return (\n    options.useTokenAuth ||\n    (!basicAuthForced(options) && (options.authCallback || options.authUrl || options.token || options.tokenDetails))\n  );\n}\n\n/* RSA4a */\nfunction noWayToRenew(options: ClientOptions) {\n  return !options.key && !options.authCallback && !options.authUrl;\n}\n\nlet trId = 0;\nfunction getTokenRequestId() {\n  return trId++;\n}\n\n/**\n * Auth options used only for testing.\n */\ntype PrivateAuthOptions = {\n  requestHeaders?: Record<string, string>;\n  suppressMaxLengthCheck?: boolean;\n};\n\ntype AuthOptions = API.AuthOptions & PrivateAuthOptions;\n\nclass Auth {\n  client: BaseClient;\n  tokenParams: API.TokenParams;\n  currentTokenRequestId: number | null;\n  waitingForTokenRequest: MulticasterInstance<API.TokenDetails> | null;\n  // This initialization is always overwritten and only used to prevent a TypeScript compiler error\n  authOptions: AuthOptions = {} as AuthOptions;\n  tokenDetails?: API.TokenDetails | null;\n  method?: string;\n  key?: string;\n  basicKey?: string;\n  clientId?: string | null;\n\n  constructor(client: BaseClient, options: ClientOptions) {\n    this.client = client;\n    this.tokenParams = options.defaultTokenParams || {};\n    /* The id of the current token request if one is in progress, else null */\n    this.currentTokenRequestId = null;\n    this.waitingForTokenRequest = null;\n\n    if (useTokenAuth(options)) {\n      /* Token auth */\n      if (noWayToRenew(options)) {\n        Logger.logAction(\n          this.logger,\n          Logger.LOG_ERROR,\n          'Auth()',\n          'Warning: library initialized with a token literal without any way to renew the token when it expires (no authUrl, authCallback, or key). See https://help.ably.io/error/40171 for help',\n        );\n      }\n      this._saveTokenOptions(options.defaultTokenParams as API.TokenDetails, options);\n      logAndValidateTokenAuthMethod(this.authOptions, this.logger);\n    } else {\n      /* Basic auth */\n      if (!options.key) {\n        const msg =\n          'No authentication options provided; need one of: key, authUrl, or authCallback (or for testing only, token or tokenDetails)';\n        Logger.logAction(this.logger, Logger.LOG_ERROR, 'Auth()', msg);\n        throw new ErrorInfo(msg, 40160, 401);\n      }\n      Logger.logAction(this.logger, Logger.LOG_MINOR, 'Auth()', 'anonymous, using basic auth');\n      this._saveBasicOptions(options);\n    }\n  }\n\n  get logger(): Logger {\n    return this.client.logger;\n  }\n\n  /**\n   * Instructs the library to get a token immediately and ensures Token Auth\n   * is used for all future requests, storing the tokenParams and authOptions\n   * given as the new defaults for subsequent use.\n   */\n  async authorize(): Promise<API.TokenDetails>;\n\n  /**\n   * Instructs the library to get a token immediately and ensures Token Auth\n   * is used for all future requests, storing the tokenParams and authOptions\n   * given as the new defaults for subsequent use.\n   *\n   * @param tokenParams\n   * an object containing the parameters for the requested token:\n   *\n   * - ttl:        (optional) the requested life of any new token in ms. If none\n   *               is specified a default of 1 hour is provided. The maximum lifetime\n   *               is 24hours; any request exceeding that lifetime will be rejected\n   *               with an error.\n   *\n   * - capability: (optional) the capability to associate with the access token.\n   *               If none is specified, a token will be requested with all of the\n   *               capabilities of the specified key.\n   *\n   * - clientId:   (optional) a client ID to associate with the token\n   *\n   * - timestamp:  (optional) the time in ms since the epoch. If none is specified,\n   *               the system will be queried for a time value to use.\n   */\n  async authorize(tokenParams: API.TokenParams | null): Promise<API.TokenDetails>;\n\n  /**\n   * Instructs the library to get a token immediately and ensures Token Auth\n   * is used for all future requests, storing the tokenParams and authOptions\n   * given as the new defaults for subsequent use.\n   *\n   * @param tokenParams\n   * an object containing the parameters for the requested token:\n   *\n   * - ttl:        (optional) the requested life of any new token in ms. If none\n   *               is specified a default of 1 hour is provided. The maximum lifetime\n   *               is 24hours; any request exceeding that lifetime will be rejected\n   *               with an error.\n   *\n   * - capability: (optional) the capability to associate with the access token.\n   *               If none is specified, a token will be requested with all of the\n   *               capabilities of the specified key.\n   *\n   * - clientId:   (optional) a client ID to associate with the token\n   *\n   * - timestamp:  (optional) the time in ms since the epoch. If none is specified,\n   *               the system will be queried for a time value to use.\n   *\n   * @param authOptions\n   * an object containing auth options relevant to token auth:\n   *\n   * - queryTime   (optional) boolean indicating that the Ably system should be\n   *               queried for the current time when none is specified explicitly.\n   *\n   * - tokenDetails: (optional) object: An authenticated TokenDetails object.\n   *\n   * - token:        (optional) string: the `token` property of a tokenDetails object\n   *\n   * - authCallback:  (optional) a JavaScript callback to be called to get auth information.\n   *                  authCallback should be a function of (tokenParams, callback) that calls\n   *                  the callback with (err, result), where result is any of:\n   *                  - a tokenRequest object (ie the result of a rest.auth.createTokenRequest call),\n   *                  - a tokenDetails object (ie the result of a rest.auth.requestToken call),\n   *                  - a token string\n   *\n   * - authUrl:       (optional) a URL to be used to GET or POST a set of token request\n   *                  params, to obtain a signed token request.\n   *\n   * - authHeaders:   (optional) a set of application-specific headers to be added to any request\n   *                  made to the authUrl.\n   *\n   * - authParams:    (optional) a set of application-specific query params to be added to any\n   *                  request made to the authUrl.\n   *\n   *\n   * - requestHeaders (optional, unsupported, for testing only) extra headers to add to the\n   *                  requestToken request\n   */\n  async authorize(tokenParams: API.TokenParams | null, authOptions: AuthOptions | null): Promise<API.TokenDetails>;\n\n  async authorize(\n    tokenParams?: Record<string, any> | null,\n    authOptions?: AuthOptions | null,\n  ): Promise<API.TokenDetails> {\n    /* RSA10a: authorize() call implies token auth. If a key is passed it, we\n     * just check if it doesn't clash and assume we're generating a token from it */\n    if (authOptions && authOptions.key && this.authOptions.key !== authOptions.key) {\n      throw new ErrorInfo('Unable to update auth options with incompatible key', 40102, 401);\n    }\n\n    try {\n      let tokenDetails = await this._forceNewToken(tokenParams ?? null, authOptions ?? null);\n\n      /* RTC8\n       * - When authorize called by an end user and have a realtime connection,\n       * don't call back till new token has taken effect.\n       * - Use this.client.connection as a proxy for (this.client instanceof BaseRealtime),\n       * which doesn't work in node as BaseRealtime isn't part of the vm context for Rest clients */\n      if (isRealtime(this.client)) {\n        return new Promise((resolve, reject) => {\n          (this.client as BaseRealtime).connection.connectionManager.onAuthUpdated(\n            tokenDetails,\n            (err: unknown, tokenDetails?: API.TokenDetails) => (err ? reject(err) : resolve(tokenDetails!)),\n          );\n        });\n      } else {\n        return tokenDetails;\n      }\n    } catch (err) {\n      if ((this.client as BaseRealtime).connection && (err as ErrorInfo).statusCode === HttpStatusCodes.Forbidden) {\n        /* Per RSA4d & RSA4d1, if the auth server explicitly repudiates our right to\n         * stay connecticed by returning a 403, we actively disconnect the connection\n         * even though we may well still have time left in the old token. */\n        (this.client as BaseRealtime).connection.connectionManager.actOnErrorFromAuthorize(err as ErrorInfo);\n      }\n      throw err;\n    }\n  }\n\n  /* For internal use, eg by connectionManager - useful when want to call back\n   * as soon as we have the new token, rather than waiting for it to take\n   * effect on the connection as #authorize does */\n  async _forceNewToken(\n    tokenParams: API.TokenParams | null,\n    authOptions: AuthOptions | null,\n  ): Promise<API.TokenDetails> {\n    /* get rid of current token even if still valid */\n    this.tokenDetails = null;\n\n    /* _save normalises the tokenParams and authOptions and updates the auth\n     * object. All subsequent operations should use the values on `this`,\n     * not the passed in ones. */\n    this._saveTokenOptions(tokenParams, authOptions);\n\n    logAndValidateTokenAuthMethod(this.authOptions, this.logger);\n\n    try {\n      return this._ensureValidAuthCredentials(true);\n    } finally {\n      /* RSA10g */\n      delete this.tokenParams.timestamp;\n      delete this.authOptions.queryTime;\n    }\n  }\n\n  /**\n   * Request an access token\n   */\n  async requestToken(): Promise<API.TokenDetails>;\n\n  /**\n   * Request an access token\n   * @param tokenParams\n   * an object containing the parameters for the requested token:\n   * - ttl:          (optional) the requested life of the token in milliseconds. If none is specified\n   *                  a default of 1 hour is provided. The maximum lifetime is 24hours; any request\n   *                  exceeding that lifetime will be rejected with an error.\n   *\n   * - capability:    (optional) the capability to associate with the access token.\n   *                  If none is specified, a token will be requested with all of the\n   *                  capabilities of the specified key.\n   *\n   * - clientId:      (optional) a client ID to associate with the token; if not\n   *                  specified, a clientId passed in constructing the Rest interface will be used\n   *\n   * - timestamp:     (optional) the time in ms since the epoch. If none is specified,\n   *                  the system will be queried for a time value to use.\n   */\n  async requestToken(tokenParams: API.TokenParams | null): Promise<API.TokenDetails>;\n\n  /**\n   * Request an access token\n   * @param tokenParams\n   * an object containing the parameters for the requested token:\n   * - ttl:          (optional) the requested life of the token in milliseconds. If none is specified\n   *                  a default of 1 hour is provided. The maximum lifetime is 24hours; any request\n   *                  exceeding that lifetime will be rejected with an error.\n   *\n   * - capability:    (optional) the capability to associate with the access token.\n   *                  If none is specified, a token will be requested with all of the\n   *                  capabilities of the specified key.\n   *\n   * - clientId:      (optional) a client ID to associate with the token; if not\n   *                  specified, a clientId passed in constructing the Rest interface will be used\n   *\n   * - timestamp:     (optional) the time in ms since the epoch. If none is specified,\n   *                  the system will be queried for a time value to use.\n   *\n   * @param authOptions\n   * an object containing the request options:\n   * - key:           the key to use.\n   *\n   * - authCallback:  (optional) a JavaScript callback to be called to get auth information.\n   *                  authCallback should be a function of (tokenParams, callback) that calls\n   *                  the callback with (err, result), where result is any of:\n   *                  - a tokenRequest object (ie the result of a rest.auth.createTokenRequest call),\n   *                  - a tokenDetails object (ie the result of a rest.auth.requestToken call),\n   *                  - a token string\n   *\n   * - authUrl:       (optional) a URL to be used to GET or POST a set of token request\n   *                  params, to obtain a signed token request.\n   *\n   * - authHeaders:   (optional) a set of application-specific headers to be added to any request\n   *                  made to the authUrl.\n   *\n   * - authParams:    (optional) a set of application-specific query params to be added to any\n   *                  request made to the authUrl.\n   *\n   * - queryTime      (optional) boolean indicating that the ably system should be\n   *                  queried for the current time when none is specified explicitly\n   *\n   * - requestHeaders (optional, unsupported, for testing only) extra headers to add to the\n   *                  requestToken request\n   */\n  async requestToken(tokenParams: API.TokenParams | null, authOptions: AuthOptions): Promise<API.TokenDetails>;\n\n  async requestToken(tokenParams?: API.TokenParams | null, authOptions?: AuthOptions): Promise<API.TokenDetails> {\n    /* RSA8e: if authOptions passed in, they're used instead of stored, don't merge them */\n    const resolvedAuthOptions = authOptions || this.authOptions;\n    const resolvedTokenParams = tokenParams || Utils.copy(this.tokenParams);\n\n    /* first set up whatever callback will be used to get signed\n     * token requests */\n    let tokenRequestCallback: (\n        data: API.TokenParams,\n        callback: (\n          error: API.ErrorInfo | RequestResultError | string | null,\n          tokenRequestOrDetails: API.TokenDetails | API.TokenRequest | string | null,\n          contentType?: string,\n        ) => void,\n      ) => void,\n      client = this.client;\n\n    if (resolvedAuthOptions.authCallback) {\n      Logger.logAction(this.logger, Logger.LOG_MINOR, 'Auth.requestToken()', 'using token auth with authCallback');\n      tokenRequestCallback = resolvedAuthOptions.authCallback;\n    } else if (resolvedAuthOptions.authUrl) {\n      Logger.logAction(this.logger, Logger.LOG_MINOR, 'Auth.requestToken()', 'using token auth with authUrl');\n      tokenRequestCallback = (params, cb) => {\n        const authHeaders = Utils.mixin(\n          { accept: 'application/json, text/plain' },\n          resolvedAuthOptions.authHeaders,\n        ) as Record<string, string>;\n        const usePost = resolvedAuthOptions.authMethod && resolvedAuthOptions.authMethod.toLowerCase() === 'post';\n        let providedQsParams;\n        /* Combine authParams with any qs params given in the authUrl */\n        const queryIdx = resolvedAuthOptions.authUrl!.indexOf('?');\n        if (queryIdx > -1) {\n          providedQsParams = Utils.parseQueryString(resolvedAuthOptions.authUrl!.slice(queryIdx));\n          resolvedAuthOptions.authUrl = resolvedAuthOptions.authUrl!.slice(0, queryIdx);\n          if (!usePost) {\n            /* In case of conflict, authParams take precedence over qs params in the authUrl */\n            resolvedAuthOptions.authParams = Utils.mixin(\n              providedQsParams,\n              resolvedAuthOptions.authParams,\n            ) as typeof resolvedAuthOptions.authParams;\n          }\n        }\n        /* RSA8c2 */\n        const authParams = Utils.mixin({}, resolvedAuthOptions.authParams || {}, params) as RequestParams;\n        const authUrlRequestCallback = (result: RequestResult) => {\n          let body = (result.body ?? null) as string | Bufferlike | API.TokenDetails | API.TokenRequest | null;\n\n          let contentType: string | null = null;\n          if (result.error) {\n            Logger.logAction(\n              this.logger,\n              Logger.LOG_MICRO,\n              'Auth.requestToken().tokenRequestCallback',\n              'Received Error: ' + Utils.inspectError(result.error),\n            );\n          } else {\n            const contentTypeHeaderOrHeaders = result.headers!['content-type'] ?? null;\n            if (Array.isArray(contentTypeHeaderOrHeaders)) {\n              // Combine multiple header values into a comma-separated list per https://datatracker.ietf.org/doc/html/rfc9110#section-5.2; see https://github.com/ably/ably-js/issues/1616 for doing this consistently across the codebase.\n              contentType = contentTypeHeaderOrHeaders.join(', ');\n            } else {\n              contentType = contentTypeHeaderOrHeaders;\n            }\n            Logger.logAction(\n              this.logger,\n              Logger.LOG_MICRO,\n              'Auth.requestToken().tokenRequestCallback',\n              'Received; content-type: ' + contentType + '; body: ' + Utils.inspectBody(body),\n            );\n          }\n          if (result.error) {\n            cb(result.error, null);\n            return;\n          }\n          if (result.unpacked) {\n            cb(null, body as Exclude<typeof body, Bufferlike>);\n            return;\n          }\n          if (Platform.BufferUtils.isBuffer(body)) body = body.toString();\n          if (!contentType) {\n            cb(new ErrorInfo('authUrl response is missing a content-type header', 40170, 401), null);\n            return;\n          }\n          const json = contentType.indexOf('application/json') > -1,\n            text = contentType.indexOf('text/plain') > -1 || contentType.indexOf('application/jwt') > -1;\n          if (!json && !text) {\n            cb(\n              new ErrorInfo(\n                'authUrl responded with unacceptable content-type ' +\n                  contentType +\n                  ', should be either text/plain, application/jwt or application/json',\n                40170,\n                401,\n              ),\n              null,\n            );\n            return;\n          }\n          if (json) {\n            if ((body as string).length > MAX_TOKEN_LENGTH) {\n              cb(new ErrorInfo('authUrl response exceeded max permitted length', 40170, 401), null);\n              return;\n            }\n            try {\n              body = JSON.parse(body as string);\n            } catch (e) {\n              cb(\n                new ErrorInfo(\n                  'Unexpected error processing authURL response; err = ' + (e as Error).message,\n                  40170,\n                  401,\n                ),\n                null,\n              );\n              return;\n            }\n          }\n          cb(null, body as Exclude<typeof body, Bufferlike>, contentType);\n        };\n        Logger.logAction(\n          this.logger,\n          Logger.LOG_MICRO,\n          'Auth.requestToken().tokenRequestCallback',\n          'Requesting token from ' +\n            resolvedAuthOptions.authUrl +\n            '; Params: ' +\n            JSON.stringify(authParams) +\n            '; method: ' +\n            (usePost ? 'POST' : 'GET'),\n        );\n        if (usePost) {\n          /* send body form-encoded */\n          const headers = authHeaders || {};\n          headers['content-type'] = 'application/x-www-form-urlencoded';\n          const body = Utils.toQueryString(authParams).slice(1); /* slice is to remove the initial '?' */\n          Utils.whenPromiseSettles(\n            this.client.http.doUri(\n              HttpMethods.Post,\n              resolvedAuthOptions.authUrl!,\n              headers,\n              body,\n              providedQsParams as Record<string, string>,\n            ),\n            (err: any, result) =>\n              err\n                ? authUrlRequestCallback(err) // doUri isn\u2019t meant to throw an error, but handle any just in case\n                : authUrlRequestCallback(result!),\n          );\n        } else {\n          Utils.whenPromiseSettles(\n            this.client.http.doUri(HttpMethods.Get, resolvedAuthOptions.authUrl!, authHeaders || {}, null, authParams),\n            (err: any, result) =>\n              err\n                ? authUrlRequestCallback(err) // doUri isn\u2019t meant to throw an error, but handle any just in case\n                : authUrlRequestCallback(result!),\n          );\n        }\n      };\n    } else if (resolvedAuthOptions.key) {\n      Logger.logAction(\n        this.logger,\n        Logger.LOG_MINOR,\n        'Auth.requestToken()',\n        'using token auth with client-side signing',\n      );\n      tokenRequestCallback = (params, cb) => {\n        Utils.whenPromiseSettles(this.createTokenRequest(params, resolvedAuthOptions), (err, result) =>\n          cb(err as string | ErrorInfo | null, result ?? null),\n        );\n      };\n    } else {\n      const msg =\n        'Need a new token, but authOptions does not include any way to request one (no authUrl, authCallback, or key)';\n      Logger.logAction(\n        this.logger,\n        Logger.LOG_ERROR,\n        'Auth()',\n        'library initialized with a token literal without any way to renew the token when it expires (no authUrl, authCallback, or key). See https://help.ably.io/error/40171 for help',\n      );\n      throw new ErrorInfo(msg, 40171, 403);\n    }\n\n    /* normalise token params */\n    if ('capability' in (resolvedTokenParams as Record<string, any>))\n      (resolvedTokenParams as Record<string, any>).capability = c14n(\n        (resolvedTokenParams as Record<string, any>).capability,\n      );\n\n    const tokenRequest = (\n      signedTokenParams: Record<string, any>,\n      tokenCb: (err: RequestResultError | null, tokenResponse?: API.TokenDetails | string, unpacked?: boolean) => void,\n    ) => {\n      const keyName = signedTokenParams.keyName,\n        path = '/keys/' + keyName + '/requestToken',\n        tokenUri = function (host: string) {\n          return client.baseUri(host) + path;\n        };\n\n      const requestHeaders = Defaults.defaultPostHeaders(this.client.options);\n      if (resolvedAuthOptions.requestHeaders) Utils.mixin(requestHeaders, resolvedAuthOptions.requestHeaders);\n      Logger.logAction(\n        this.logger,\n        Logger.LOG_MICRO,\n        'Auth.requestToken().requestToken',\n        'Sending POST to ' + path + '; Token params: ' + JSON.stringify(signedTokenParams),\n      );\n      Utils.whenPromiseSettles(\n        this.client.http.do(HttpMethods.Post, tokenUri, requestHeaders, JSON.stringify(signedTokenParams), null),\n        (err: any, result) =>\n          err\n            ? tokenCb(err) // doUri isn\u2019t meant to throw an error, but handle any just in case\n            : tokenCb(result!.error, result!.body as API.TokenDetails | string | undefined, result!.unpacked),\n      );\n    };\n\n    return new Promise((resolve, reject) => {\n      let tokenRequestCallbackTimeoutExpired = false,\n        timeoutLength = this.client.options.timeouts.realtimeRequestTimeout,\n        tokenRequestCallbackTimeout = setTimeout(() => {\n          tokenRequestCallbackTimeoutExpired = true;\n          const msg = 'Token request callback timed out after ' + timeoutLength / 1000 + ' seconds';\n          Logger.logAction(this.logger, Logger.LOG_ERROR, 'Auth.requestToken()', msg);\n          reject(new ErrorInfo(msg, 40170, 401));\n        }, timeoutLength);\n\n      tokenRequestCallback!(resolvedTokenParams, (err, tokenRequestOrDetails, contentType) => {\n        if (tokenRequestCallbackTimeoutExpired) return;\n        clearTimeout(tokenRequestCallbackTimeout);\n\n        if (err) {\n          Logger.logAction(\n            this.logger,\n            Logger.LOG_ERROR,\n            'Auth.requestToken()',\n            'token request signing call returned error; err = ' + Utils.inspectError(err),\n          );\n          reject(normaliseAuthcallbackError(err));\n          return;\n        }\n        /* the response from the callback might be a token string, a signed request or a token details */\n        if (typeof tokenRequestOrDetails === 'string') {\n          if (tokenRequestOrDetails.length === 0) {\n            reject(new ErrorInfo('Token string is empty', 40170, 401));\n          } else if (tokenRequestOrDetails.length > MAX_TOKEN_LENGTH) {\n            reject(\n              new ErrorInfo(\n                'Token string exceeded max permitted length (was ' + tokenRequestOrDetails.length + ' bytes)',\n                40170,\n                401,\n              ),\n            );\n          } else if (tokenRequestOrDetails === 'undefined' || tokenRequestOrDetails === 'null') {\n            /* common failure mode with poorly-implemented authCallbacks */\n            reject(new ErrorInfo('Token string was literal null/undefined', 40170, 401));\n          } else if (\n            tokenRequestOrDetails[0] === '{' &&\n            !(contentType && contentType.indexOf('application/jwt') > -1)\n          ) {\n            reject(\n              new ErrorInfo(\n                \"Token was double-encoded; make sure you're not JSON-encoding an already encoded token request or details\",\n                40170,\n                401,\n              ),\n            );\n          } else {\n            resolve({ token: tokenRequestOrDetails } as API.TokenDetails);\n          }\n          return;\n        }\n        if (typeof tokenRequestOrDetails !== 'object' || tokenRequestOrDetails === null) {\n          const msg =\n            'Expected token request callback to call back with a token string or token request/details object, but got a ' +\n            typeof tokenRequestOrDetails;\n          Logger.logAction(this.logger, Logger.LOG_ERROR, 'Auth.requestToken()', msg);\n          reject(new ErrorInfo(msg, 40170, 401));\n          return;\n        }\n        const objectSize = JSON.stringify(tokenRequestOrDetails).length;\n        if (objectSize > MAX_TOKEN_LENGTH && !resolvedAuthOptions.suppressMaxLengthCheck) {\n          reject(\n            new ErrorInfo(\n              'Token request/details object exceeded max permitted stringified size (was ' + objectSize + ' bytes)',\n              40170,\n              401,\n            ),\n          );\n          return;\n        }\n        if ('issued' in tokenRequestOrDetails) {\n          /* a tokenDetails object */\n          resolve(tokenRequestOrDetails);\n          return;\n        }\n        if (!('keyName' in tokenRequestOrDetails)) {\n          const msg =\n            'Expected token request callback to call back with a token string, token request object, or token details object';\n          Logger.logAction(this.logger, Logger.LOG_ERROR, 'Auth.requestToken()', msg);\n          reject(new ErrorInfo(msg, 40170, 401));\n          return;\n        }\n        /* it's a token request, so make the request */\n        tokenRequest(tokenRequestOrDetails, (err, tokenResponse, unpacked) => {\n          if (err) {\n            Logger.logAction(\n              this.logger,\n              Logger.LOG_ERROR,\n              'Auth.requestToken()',\n              'token request API call returned error; err = ' + Utils.inspectError(err),\n            );\n            reject(normaliseAuthcallbackError(err));\n            return;\n          }\n          if (!unpacked) tokenResponse = JSON.parse(tokenResponse as string);\n          Logger.logAction(this.logger, Logger.LOG_MINOR, 'Auth.getToken()', 'token received');\n          resolve(tokenResponse as API.TokenDetails);\n        });\n      });\n    });\n  }\n\n  /**\n   * Create and sign a token request based on the given options.\n   * NOTE this can only be used when the key value is available locally.\n   * Otherwise, signed token requests must be obtained from the key\n   * owner (either using the token request callback or url).\n   *\n   * @param authOptions\n   * an object containing the request options:\n   * - key:           the key to use. If not specified, a key passed in constructing\n   *                  the Rest interface will be used\n   *\n   * - queryTime      (optional) boolean indicating that the ably system should be\n   *                  queried for the current time when none is specified explicitly\n   *\n   * - requestHeaders (optional, unsupported, for testing only) extra headers to add to the\n   *                  requestToken request\n   *\n   * @param tokenParams\n   * an object containing the parameters for the requested token:\n   * - ttl:       (optional) the requested life of the token in ms. If none is specified\n   *                  a default of 1 hour is provided. The maximum lifetime is 24hours; any request\n   *                  exceeding that lifetime will be rejected with an error.\n   *\n   * - capability:    (optional) the capability to associate with the access token.\n   *                  If none is specified, a token will be requested with all of the\n   *                  capabilities of the specified key.\n   *\n   * - clientId:      (optional) a client ID to associate with the token; if not\n   *                  specified, a clientId passed in constructing the Rest interface will be used\n   *\n   * - timestamp:     (optional) the time in ms since the epoch. If none is specified,\n   *                  the system will be queried for a time value to use.\n   */\n  async createTokenRequest(tokenParams: API.TokenParams | null, authOptions: any): Promise<API.TokenRequest> {\n    /* RSA9h: if authOptions passed in, they're used instead of stored, don't merge them */\n    authOptions = authOptions || this.authOptions;\n    tokenParams = tokenParams || Utils.copy<API.TokenParams>(this.tokenParams);\n\n    const key = authOptions.key;\n    if (!key) {\n      throw new ErrorInfo('No key specified', 40101, 403);\n    }\n    const keyParts = key.split(':'),\n      keyName = keyParts[0],\n      keySecret = keyParts[1];\n\n    if (!keySecret) {\n      throw new ErrorInfo('Invalid key specified', 40101, 403);\n    }\n\n    if (tokenParams.clientId === '') {\n      throw new ErrorInfo('clientId can\u2019t be an empty string', 40012, 400);\n    }\n\n    if ('capability' in tokenParams) {\n      tokenParams.capability = c14n(tokenParams.capability);\n    }\n\n    const request: Partial<API.TokenRequest> = Utils.mixin({ keyName: keyName }, tokenParams),\n      clientId = tokenParams.clientId || '',\n      ttl = tokenParams.ttl || '',\n      capability = tokenParams.capability || '';\n\n    if (!request.timestamp) {\n      request.timestamp = await this._getTimestamp(authOptions && authOptions.queryTime);\n    }\n\n    /* nonce */\n    /* NOTE: there is no expectation that the client\n     * specifies the nonce; this is done by the library\n     * However, this can be overridden by the client\n     * simply for testing purposes. */\n    const nonce = request.nonce || (request.nonce = random()),\n      timestamp = request.timestamp;\n\n    const signText =\n      request.keyName + '\\n' + ttl + '\\n' + capability + '\\n' + clientId + '\\n' + timestamp + '\\n' + nonce + '\\n';\n\n    /* mac */\n    /* NOTE: there is no expectation that the client\n     * specifies the mac; this is done by the library\n     * However, this can be overridden by the client\n     * simply for testing purposes. */\n    request.mac = request.mac || hmac(signText, keySecret);\n\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'Auth.getTokenRequest()', 'generated signed request');\n\n    return request as API.TokenRequest;\n  }\n\n  /**\n   * Get the auth query params to use for a websocket connection,\n   * based on the current auth parameters\n   */\n  async getAuthParams(): Promise<Record<string, string>> {\n    if (this.method == 'basic') return { key: this.key! };\n    else {\n      let tokenDetails = await this._ensureValidAuthCredentials(false);\n      if (!tokenDetails) {\n        throw new Error('Auth.getAuthParams(): _ensureValidAuthCredentials returned no error or tokenDetails');\n      }\n      return { access_token: tokenDetails.token };\n    }\n  }\n\n  /**\n   * Get the authorization header to use for a REST or comet request,\n   * based on the current auth parameters\n   */\n  async getAuthHeaders(): Promise<Record<string, string>> {\n    if (this.method == 'basic') {\n      return { authorization: 'Basic ' + this.basicKey };\n    } else {\n      const tokenDetails = await this._ensureValidAuthCredentials(false);\n      if (!tokenDetails) {\n        throw new Error('Auth.getAuthParams(): _ensureValidAuthCredentials returned no error or tokenDetails');\n      }\n      return { authorization: 'Bearer ' + Utils.toBase64(tokenDetails.token) };\n    }\n  }\n\n  _saveBasicOptions(authOptions: AuthOptions) {\n    this.method = 'basic';\n    this.key = authOptions.key;\n    this.basicKey = Utils.toBase64(authOptions.key as string);\n    this.authOptions = authOptions || {};\n    if ('clientId' in authOptions) {\n      this._userSetClientId(authOptions.clientId);\n    }\n  }\n\n  _saveTokenOptions(tokenParams: API.TokenParams | null, authOptions: AuthOptions | null) {\n    this.method = 'token';\n\n    if (tokenParams) {\n      /* We temporarily persist tokenParams.timestamp in case a new token needs\n       * to be requested, then null it out in the callback of\n       * _ensureValidAuthCredentials for RSA10g compliance */\n      this.tokenParams = tokenParams;\n    }\n\n    if (authOptions) {\n      /* normalise */\n      if (authOptions.token) {\n        /* options.token may contain a token string or, for convenience, a TokenDetails */\n        authOptions.tokenDetails =\n          typeof authOptions.token === 'string'\n            ? ({ token: authOptions.token } as API.TokenDetails)\n            : authOptions.token;\n      }\n\n      if (authOptions.tokenDetails) {\n        this.tokenDetails = authOptions.tokenDetails;\n      }\n\n      if ('clientId' in authOptions) {\n        this._userSetClientId(authOptions.clientId);\n      }\n\n      this.authOptions = authOptions;\n    }\n  }\n\n  /* @param forceSupersede: force a new token request even if there's one in\n   * progress, making all pending callbacks wait for the new one */\n  async _ensureValidAuthCredentials(forceSupersede: boolean): Promise<API.TokenDetails> {\n    const token = this.tokenDetails;\n\n    if (token) {\n      if (this._tokenClientIdMismatch(token.clientId)) {\n        /* 403 to trigger a permanently failed client - RSA15c */\n        throw new ErrorInfo(\n          'Mismatch between clientId in token (' + token.clientId + ') and current clientId (' + this.clientId + ')',\n          40102,\n          403,\n        );\n      }\n      /* RSA4b1 -- if we have a server time offset set already, we can\n       * automatically remove expired tokens. Else just use the cached token. If it is\n       * expired Ably will tell us and we'll discard it then. */\n      if (!this.client.isTimeOffsetSet() || !token.expires || token.expires >= this.client.getTimestampUsingOffset()) {\n        Logger.logAction(\n          this.logger,\n          Logger.LOG_MINOR,\n          'Auth.getToken()',\n          'using cached token; expires = ' + token.expires,\n        );\n        return token;\n      }\n      /* expired, so remove and fallthrough to getting a new one */\n      Logger.logAction(this.logger, Logger.LOG_MINOR, 'Auth.getToken()', 'deleting expired token');\n      this.tokenDetails = null;\n    }\n\n    const promise = (\n      this.waitingForTokenRequest || (this.waitingForTokenRequest = Multicaster.create(this.logger))\n    ).createPromise();\n    if (this.currentTokenRequestId !== null && !forceSupersede) {\n      return promise;\n    }\n\n    /* Request a new token */\n    const tokenRequestId = (this.currentTokenRequestId = getTokenRequestId());\n\n    let tokenResponse: API.TokenDetails,\n      caughtError: ErrorInfo | null = null;\n    try {\n      tokenResponse = await this.requestToken(this.tokenParams, this.authOptions);\n    } catch (err) {\n      caughtError = err as ErrorInfo;\n    }\n\n    if ((this.currentTokenRequestId as number) > tokenRequestId) {\n      Logger.logAction(\n        this.logger,\n        Logger.LOG_MINOR,\n        'Auth._ensureValidAuthCredentials()',\n        'Discarding token request response; overtaken by newer one',\n      );\n      return promise;\n    }\n\n    this.currentTokenRequestId = null;\n    const multicaster = this.waitingForTokenRequest;\n    this.waitingForTokenRequest = null;\n    if (caughtError) {\n      multicaster?.rejectAll(caughtError);\n      return promise;\n    }\n    multicaster?.resolveAll((this.tokenDetails = tokenResponse!));\n\n    return promise;\n  }\n\n  /* User-set: check types, '*' is disallowed, throw any errors */\n  _userSetClientId(clientId: string | undefined) {\n    if (!(typeof clientId === 'string' || clientId === null)) {\n      throw new ErrorInfo('clientId must be either a string or null', 40012, 400);\n    } else if (clientId === '*') {\n      throw new ErrorInfo(\n        'Can\u2019t use \"*\" as a clientId as that string is reserved. (To change the default token request behaviour to use a wildcard clientId, instantiate the library with {defaultTokenParams: {clientId: \"*\"}}), or if calling authorize(), pass it in as a tokenParam: authorize({clientId: \"*\"}, authOptions)',\n        40012,\n        400,\n      );\n    } else {\n      const err = this._uncheckedSetClientId(clientId);\n      if (err) throw err;\n    }\n  }\n\n  /* Ably-set: no typechecking, '*' is allowed but not set on this.clientId), return errors to the caller */\n  _uncheckedSetClientId(clientId: string | undefined) {\n    if (this._tokenClientIdMismatch(clientId)) {\n      /* Should never happen in normal circumstances as realtime should\n       * recognise mismatch and return an error */\n      const msg = 'Unexpected clientId mismatch: client has ' + this.clientId + ', requested ' + clientId;\n      const err = new ErrorInfo(msg, 40102, 401);\n      Logger.logAction(this.logger, Logger.LOG_ERROR, 'Auth._uncheckedSetClientId()', msg);\n      return err;\n    } else {\n      /* RSA7a4: if options.clientId is provided and is not\n       * null, it overrides defaultTokenParams.clientId */\n      this.clientId = this.tokenParams.clientId = clientId;\n      return null;\n    }\n  }\n\n  _tokenClientIdMismatch(tokenClientId?: string | null): boolean {\n    return !!(\n      this.clientId &&\n      this.clientId !== '*' &&\n      tokenClientId &&\n      tokenClientId !== '*' &&\n      this.clientId !== tokenClientId\n    );\n  }\n\n  static isTokenErr(error: IPartialErrorInfo) {\n    return error.code && error.code >= 40140 && error.code < 40150;\n  }\n\n  revokeTokens(\n    specifiers: TokenRevocationTargetSpecifier[],\n    options?: TokenRevocationOptions,\n  ): Promise<TokenRevocationResult> {\n    return this.client.rest.revokeTokens(specifiers, options);\n  }\n\n  /**\n   * Same as {@link BaseClient.getTimestamp} but also takes into account {@link Auth.authOptions}\n   */\n  private async _getTimestamp(queryTime: boolean): Promise<number> {\n    return this.client.getTimestamp(queryTime || !!this.authOptions.queryTime);\n  }\n}\n\nexport default Auth;\n", "import Defaults from 'common/lib/util/defaults';\r\nimport Platform from 'common/platform';\r\nimport BaseRealtime from 'common/lib/client/baserealtime';\r\nimport HttpMethods from '../constants/HttpMethods';\r\nimport BaseClient from '../lib/client/baseclient';\r\nimport ErrorInfo, { IPartialErrorInfo } from '../lib/types/errorinfo';\r\nimport Logger from 'common/lib/util/logger';\r\nimport * as Utils from 'common/lib/util/utils';\r\n\r\nexport type PathParameter = string | ((host: string) => string);\r\nexport type ResponseHeaders = Partial<Record<string, string | string[]>>;\r\nexport type RequestResultError = ErrnoException | IPartialErrorInfo;\r\n\r\n/**\r\n * The `body`, `headers`, `unpacked`, and `statusCode` properties of a `RequestResult` may be populated even if its `error` property is non-null.\r\n */\r\nexport type RequestResult = {\r\n  error: RequestResultError | null;\r\n  body?: unknown;\r\n  headers?: ResponseHeaders;\r\n  unpacked?: boolean;\r\n  statusCode?: number;\r\n};\r\n\r\nexport type RequestParams = Record<string, string> | null;\r\nexport type RequestBody =\r\n  | Buffer // only on Node\r\n  | ArrayBuffer // only on web\r\n  | string;\r\n\r\nexport interface IPlatformHttpStatic {\r\n  new (client?: BaseClient): IPlatformHttp;\r\n  methods: Array<HttpMethods>;\r\n  methodsWithBody: Array<HttpMethods>;\r\n  methodsWithoutBody: Array<HttpMethods>;\r\n}\r\n\r\nexport interface IPlatformHttp {\r\n  supportsAuthHeaders: boolean;\r\n  supportsLinkHeaders: boolean;\r\n\r\n  /**\r\n   * This method should not throw any errors; rather, it should communicate any error by populating the {@link RequestResult.error} property of the returned {@link RequestResult}.\r\n   */\r\n  doUri(\r\n    method: HttpMethods,\r\n    uri: string,\r\n    headers: Record<string, string> | null,\r\n    body: RequestBody | null,\r\n    params: RequestParams,\r\n  ): Promise<RequestResult>;\r\n\r\n  checkConnectivity?: () => Promise<boolean>;\r\n\r\n  /**\r\n   * @param error An error from the {@link RequestResult.error} property of a result returned by {@link doUri}.\r\n   */\r\n  shouldFallback(error: RequestResultError): boolean;\r\n}\r\n\r\nexport function paramString(params: Record<string, any> | null) {\r\n  const paramPairs = [];\r\n  if (params) {\r\n    for (const needle in params) {\r\n      paramPairs.push(needle + '=' + params[needle]);\r\n    }\r\n  }\r\n  return paramPairs.join('&');\r\n}\r\n\r\nexport function appendingParams(uri: string, params: Record<string, any> | null) {\r\n  return uri + (params ? '?' : '') + paramString(params);\r\n}\r\n\r\nfunction logResult(\r\n  result: RequestResult,\r\n  method: HttpMethods,\r\n  uri: string,\r\n  params: Record<string, string> | null,\r\n  logger: Logger,\r\n) {\r\n  if (result.error) {\r\n    Logger.logActionNoStrip(\r\n      logger,\r\n      Logger.LOG_MICRO,\r\n      'Http.' + method + '()',\r\n      'Received Error; ' + appendingParams(uri, params) + '; Error: ' + Utils.inspectError(result.error),\r\n    );\r\n  } else {\r\n    Logger.logActionNoStrip(\r\n      logger,\r\n      Logger.LOG_MICRO,\r\n      'Http.' + method + '()',\r\n      'Received; ' +\r\n        appendingParams(uri, params) +\r\n        '; Headers: ' +\r\n        paramString(result.headers as Record<string, any>) +\r\n        '; StatusCode: ' +\r\n        result.statusCode +\r\n        '; Body' +\r\n        (Platform.BufferUtils.isBuffer(result.body)\r\n          ? ' (Base64): ' + Platform.BufferUtils.base64Encode(result.body)\r\n          : ': ' + result.body),\r\n    );\r\n  }\r\n}\r\n\r\nfunction logRequest(method: HttpMethods, uri: string, body: RequestBody | null, params: RequestParams, logger: Logger) {\r\n  if (logger.shouldLog(Logger.LOG_MICRO)) {\r\n    Logger.logActionNoStrip(\r\n      logger,\r\n      Logger.LOG_MICRO,\r\n      'Http.' + method + '()',\r\n      'Sending; ' +\r\n        appendingParams(uri, params) +\r\n        '; Body' +\r\n        (Platform.BufferUtils.isBuffer(body) ? ' (Base64): ' + Platform.BufferUtils.base64Encode(body) : ': ' + body),\r\n    );\r\n  }\r\n}\r\n\r\nexport class Http {\r\n  private readonly platformHttp: IPlatformHttp;\r\n  checkConnectivity?: () => Promise<boolean>;\r\n\r\n  constructor(private readonly client?: BaseClient) {\r\n    this.platformHttp = new Platform.Http(client);\r\n\r\n    this.checkConnectivity = this.platformHttp.checkConnectivity\r\n      ? () => this.platformHttp.checkConnectivity!()\r\n      : undefined;\r\n  }\r\n\r\n  get logger(): Logger {\r\n    return this.client?.logger ?? Logger.defaultLogger;\r\n  }\r\n\r\n  get supportsAuthHeaders() {\r\n    return this.platformHttp.supportsAuthHeaders;\r\n  }\r\n\r\n  get supportsLinkHeaders() {\r\n    return this.platformHttp.supportsLinkHeaders;\r\n  }\r\n\r\n  _getHosts(client: BaseClient) {\r\n    /* If we're a connected realtime client, try the endpoint we're connected\r\n     * to first -- but still have fallbacks, being connected is not an absolute\r\n     * guarantee that a datacenter has free capacity to service REST requests. */\r\n    const connection = (client as BaseRealtime).connection,\r\n      connectionHost = connection && connection.connectionManager.host;\r\n\r\n    if (connectionHost) {\r\n      return [connectionHost].concat(Defaults.getFallbackHosts(client.options));\r\n    }\r\n\r\n    return Defaults.getHosts(client.options);\r\n  }\r\n\r\n  /**\r\n   * This method will not throw any errors; rather, it will communicate any error by populating the {@link RequestResult.error} property of the returned {@link RequestResult}.\r\n   */\r\n  async do(\r\n    method: HttpMethods,\r\n    path: PathParameter,\r\n    headers: Record<string, string> | null,\r\n    body: RequestBody | null,\r\n    params: RequestParams,\r\n  ): Promise<RequestResult> {\r\n    try {\r\n      /* Unlike for doUri, the presence of `this.client` here is mandatory, as it's used to generate the hosts */\r\n      const client = this.client;\r\n      if (!client) {\r\n        return { error: new ErrorInfo('http.do called without client', 50000, 500) };\r\n      }\r\n\r\n      const uriFromHost =\r\n        typeof path === 'function'\r\n          ? path\r\n          : function (host: string) {\r\n              return client.baseUri(host) + path;\r\n            };\r\n\r\n      const currentFallback = client._currentFallback;\r\n      if (currentFallback) {\r\n        if (currentFallback.validUntil > Date.now()) {\r\n          /* Use stored fallback */\r\n          const result = await this.doUri(method, uriFromHost(currentFallback.host), headers, body, params);\r\n          if (result.error && this.platformHttp.shouldFallback(result.error as ErrnoException)) {\r\n            /* unstore the fallback and start from the top with the default sequence */\r\n            client._currentFallback = null;\r\n            return this.do(method, path, headers, body, params);\r\n          }\r\n          return result;\r\n        } else {\r\n          /* Fallback expired; remove it and fallthrough to normal sequence */\r\n          client._currentFallback = null;\r\n        }\r\n      }\r\n\r\n      const hosts = this._getHosts(client);\r\n\r\n      /* see if we have one or more than one host */\r\n      if (hosts.length === 1) {\r\n        return this.doUri(method, uriFromHost(hosts[0]), headers, body, params);\r\n      }\r\n\r\n      let tryAHostStartedAt: Date | null = null;\r\n      const tryAHost = async (candidateHosts: Array<string>, persistOnSuccess?: boolean): Promise<RequestResult> => {\r\n        const host = candidateHosts.shift();\r\n        tryAHostStartedAt = tryAHostStartedAt ?? new Date();\r\n        const result = await this.doUri(method, uriFromHost(host as string), headers, body, params);\r\n        if (result.error && this.platformHttp.shouldFallback(result.error as ErrnoException) && candidateHosts.length) {\r\n          // TO3l6\r\n          const elapsedTime = Date.now() - tryAHostStartedAt.getTime();\r\n          if (elapsedTime > client.options.timeouts.httpMaxRetryDuration) {\r\n            return {\r\n              error: new ErrorInfo(\r\n                `Timeout for trying fallback hosts retries. Total elapsed time exceeded the ${client.options.timeouts.httpMaxRetryDuration}ms limit`,\r\n                50003,\r\n                500,\r\n              ),\r\n            };\r\n          }\r\n\r\n          return tryAHost(candidateHosts, true);\r\n        }\r\n        if (persistOnSuccess) {\r\n          /* RSC15f */\r\n          client._currentFallback = {\r\n            host: host as string,\r\n            validUntil: Date.now() + client.options.timeouts.fallbackRetryTimeout,\r\n          };\r\n        }\r\n        return result;\r\n      };\r\n      return tryAHost(hosts);\r\n    } catch (err) {\r\n      // Handle any unexpected error, to ensure we always meet our contract of not throwing any errors\r\n      return { error: new ErrorInfo(`Unexpected error in Http.do: ${Utils.inspectError(err)}`, 500, 50000) };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method will not throw any errors; rather, it will communicate any error by populating the {@link RequestResult.error} property of the returned {@link RequestResult}.\r\n   */\r\n  async doUri(\r\n    method: HttpMethods,\r\n    uri: string,\r\n    headers: Record<string, string> | null,\r\n    body: RequestBody | null,\r\n    params: RequestParams,\r\n  ): Promise<RequestResult> {\r\n    try {\r\n      logRequest(method, uri, body, params, this.logger);\r\n\r\n      const result = await this.platformHttp.doUri(method, uri, headers, body, params);\r\n\r\n      if (this.logger.shouldLog(Logger.LOG_MICRO)) {\r\n        logResult(result, method, uri, params, this.logger);\r\n      }\r\n\r\n      return result;\r\n    } catch (err) {\r\n      // Handle any unexpected error, to ensure we always meet our contract of not throwing any errors\r\n      return { error: new ErrorInfo(`Unexpected error in Http.doUri: ${Utils.inspectError(err)}`, 500, 50000) };\r\n    }\r\n  }\r\n}\r\n\r\nexport interface ErrnoException extends Error {\r\n  errno?: number;\r\n  code?: string;\r\n  path?: string;\r\n  syscall?: string;\r\n  stack?: string;\r\n  statusCode: number;\r\n}\r\n", "import * as Utils from './utils';\nimport Logger from './logger';\nimport Platform from 'common/platform';\n\n/* Call the listener, catch any exceptions and log, but continue operation*/\nfunction callListener(logger: Logger, eventThis: { event: string }, listener: Function, args: unknown[]) {\n  try {\n    listener.apply(eventThis, args);\n  } catch (e) {\n    Logger.logAction(\n      logger,\n      Logger.LOG_ERROR,\n      'EventEmitter.emit()',\n      'Unexpected listener exception: ' + e + '; stack = ' + (e && (e as Error).stack),\n    );\n  }\n}\n\n/**\n * Remove listeners that match listener\n * @param targetListeners is an array of listener arrays or event objects with arrays of listeners\n * @param listener the listener callback to remove\n * @param eventFilter (optional) event name instructing the function to only remove listeners for the specified event\n */\nfunction removeListener(targetListeners: any, listener: Function, eventFilter?: string) {\n  let listeners: Record<string, unknown>;\n  let index;\n  let eventName;\n\n  for (let targetListenersIndex = 0; targetListenersIndex < targetListeners.length; targetListenersIndex++) {\n    listeners = targetListeners[targetListenersIndex];\n    if (eventFilter) {\n      listeners = listeners[eventFilter] as Record<string, unknown>;\n    }\n\n    if (Array.isArray(listeners)) {\n      while ((index = listeners.indexOf(listener)) !== -1) {\n        listeners.splice(index, 1);\n      }\n      /* If events object has an event name key with no listeners then\n\t\t\t\t\tremove the key to stop the list growing indefinitely */\n      if (eventFilter && listeners.length === 0) {\n        delete targetListeners[targetListenersIndex][eventFilter];\n      }\n    } else if (Utils.isObject(listeners)) {\n      /* events */\n      for (eventName in listeners) {\n        if (Object.prototype.hasOwnProperty.call(listeners, eventName) && Array.isArray(listeners[eventName])) {\n          removeListener([listeners], listener, eventName);\n        }\n      }\n    }\n  }\n}\n\nclass EventEmitter {\n  any: Array<Function>;\n  events: Record<string, Array<Function>>;\n  anyOnce: Array<Function>;\n  eventsOnce: Record<string, Array<Function>>;\n\n  constructor(readonly logger: Logger) {\n    this.any = [];\n    this.events = Object.create(null);\n    this.anyOnce = [];\n    this.eventsOnce = Object.create(null);\n  }\n\n  /**\n   * Add an event listener\n   * @param listener the listener to be called\n   */\n  on(listener: Function): void;\n\n  /**\n   * Add an event listener\n   * @param event (optional) the name of the event to listen to\n   * @param listener the listener to be called\n   */\n  on(event: null | string | string[], listener: Function): void;\n\n  on(...args: unknown[]) {\n    if (args.length === 1) {\n      const listener = args[0];\n      if (typeof listener === 'function') {\n        this.any.push(listener);\n      } else {\n        throw new Error('EventListener.on(): Invalid arguments: ' + Platform.Config.inspect(args));\n      }\n    }\n    if (args.length === 2) {\n      const [event, listener] = args;\n      if (typeof listener !== 'function') {\n        throw new Error('EventListener.on(): Invalid arguments: ' + Platform.Config.inspect(args));\n      }\n      if (Utils.isNil(event)) {\n        this.any.push(listener);\n      } else if (Array.isArray(event)) {\n        event.forEach((eventName) => {\n          this.on(eventName, listener);\n        });\n      } else {\n        if (typeof event !== 'string') {\n          throw new Error('EventListener.on(): Invalid arguments: ' + Platform.Config.inspect(args));\n        }\n        const listeners = this.events[event] || (this.events[event] = []);\n        listeners.push(listener);\n      }\n    }\n  }\n\n  /**\n   * Remove one or more event listeners\n   * @param listener (optional) the listener to remove. If not\n   *        supplied, all listeners are removed.\n   */\n  off(listener?: Function): void;\n\n  /**\n   * Remove one or more event listeners\n   * @param event (optional) the name of the event whose listener\n   *        is to be removed. If not supplied, the listener is\n   *        treated as an 'any' listener\n   * @param listener (optional) the listener to remove. If not\n   *        supplied, all listeners are removed.\n   */\n  off(event: string | string[] | null, listener?: Function | null): void;\n\n  off(...args: unknown[]) {\n    if (args.length == 0 || (Utils.isNil(args[0]) && Utils.isNil(args[1]))) {\n      this.any = [];\n      this.events = Object.create(null);\n      this.anyOnce = [];\n      this.eventsOnce = Object.create(null);\n      return;\n    }\n    const [firstArg, secondArg] = args;\n    let listener: Function | null = null;\n    let event: unknown = null;\n    if (args.length === 1 || !secondArg) {\n      if (typeof firstArg === 'function') {\n        /* we take this to be the listener and treat the event as \"any\" .. */\n        listener = firstArg;\n      } else {\n        event = firstArg;\n      }\n      /* ... or we take event to be the actual event name and listener to be all */\n    } else {\n      if (typeof secondArg !== 'function') {\n        throw new Error('EventEmitter.off(): invalid arguments:' + Platform.Config.inspect(args));\n      }\n      [event, listener] = [firstArg, secondArg];\n    }\n\n    if (listener && Utils.isNil(event)) {\n      removeListener([this.any, this.events, this.anyOnce, this.eventsOnce], listener);\n      return;\n    }\n\n    if (Array.isArray(event)) {\n      event.forEach((eventName) => {\n        this.off(eventName, listener);\n      });\n      return;\n    }\n\n    /* \"normal\" case where event is an actual event */\n    if (typeof event !== 'string') {\n      throw new Error('EventEmitter.off(): invalid arguments:' + Platform.Config.inspect(args));\n    }\n    if (listener) {\n      removeListener([this.events, this.eventsOnce], listener, event);\n    } else {\n      delete this.events[event];\n      delete this.eventsOnce[event];\n    }\n  }\n\n  /**\n   * Get the array of listeners for a given event; excludes once events\n   * @param event (optional) the name of the event, or none for 'any'\n   * @return array of events, or null if none\n   */\n  listeners(event: string) {\n    if (event) {\n      const listeners = this.events[event] || [];\n      if (this.eventsOnce[event]) Array.prototype.push.apply(listeners, this.eventsOnce[event]);\n      return listeners.length ? listeners : null;\n    }\n    return this.any.length ? this.any : null;\n  }\n\n  /**\n   * Emit an event\n   * @param event the event name\n   * @param args the arguments to pass to the listener\n   */\n  emit(event: string, ...args: unknown[] /* , args... */) {\n    const eventThis = { event };\n    const listeners: Function[] = [];\n\n    if (this.anyOnce.length) {\n      Array.prototype.push.apply(listeners, this.anyOnce);\n      this.anyOnce = [];\n    }\n    if (this.any.length) {\n      Array.prototype.push.apply(listeners, this.any);\n    }\n    const eventsOnceListeners = this.eventsOnce[event];\n    if (eventsOnceListeners) {\n      Array.prototype.push.apply(listeners, eventsOnceListeners);\n      delete this.eventsOnce[event];\n    }\n    const eventsListeners = this.events[event];\n    if (eventsListeners) {\n      Array.prototype.push.apply(listeners, eventsListeners);\n    }\n\n    listeners.forEach((listener) => {\n      callListener(this.logger, eventThis, listener, args);\n    });\n  }\n\n  /**\n   * Listen for a single occurrence of an event\n   * @param event the name of the event to listen to\n   */\n  once(event: string): Promise<void>;\n\n  /**\n   * Listen for a single occurrence of any event\n   * @param listener the listener to be called\n   */\n  once(listener: Function): void;\n\n  /**\n   * Listen for a single occurrence of an event\n   * @param event the name of the event to listen to\n   * @param listener the listener to be called\n   */\n  once(event?: string | string[] | null, listener?: Function): void;\n\n  once(...args: unknown[]): void | Promise<void> {\n    const argCount = args.length;\n    if (argCount === 0 || (argCount === 1 && typeof args[0] !== 'function')) {\n      const event = args[0];\n      return new Promise((resolve) => {\n        this.once(event as string | string[] | null, resolve);\n      });\n    }\n\n    const [firstArg, secondArg] = args;\n    if (args.length === 1 && typeof firstArg === 'function') {\n      this.anyOnce.push(firstArg);\n    } else if (Utils.isNil(firstArg)) {\n      if (typeof secondArg !== 'function') {\n        throw new Error('EventEmitter.once(): Invalid arguments:' + Platform.Config.inspect(args));\n      }\n      this.anyOnce.push(secondArg);\n    } else if (Array.isArray(firstArg)) {\n      const self = this;\n      const listenerWrapper = function (this: any) {\n        const innerArgs = Array.prototype.slice.call(arguments);\n        firstArg.forEach(function (eventName) {\n          self.off(eventName, listenerWrapper);\n        });\n        if (typeof secondArg !== 'function') {\n          throw new Error('EventEmitter.once(): Invalid arguments:' + Platform.Config.inspect(args));\n        }\n        secondArg.apply(this, innerArgs);\n      };\n      firstArg.forEach(function (eventName) {\n        self.on(eventName, listenerWrapper);\n      });\n    } else {\n      if (typeof firstArg !== 'string') {\n        throw new Error('EventEmitter.once(): Invalid arguments:' + Platform.Config.inspect(args));\n      }\n      const listeners = this.eventsOnce[firstArg] || (this.eventsOnce[firstArg] = []);\n      if (secondArg) {\n        if (typeof secondArg !== 'function') {\n          throw new Error('EventEmitter.once(): Invalid arguments:' + Platform.Config.inspect(args));\n        }\n        listeners.push(secondArg);\n      }\n    }\n  }\n\n  /**\n   * Listen for a single occurrence of a state event and fire immediately if currentState matches targetState\n   * @param targetState the name of the state event to listen to\n   * @param currentState the name of the current state of this object\n   */\n  async whenState(targetState: string, currentState: string) {\n    if (typeof targetState !== 'string' || typeof currentState !== 'string') {\n      throw new Error('whenState requires a valid state String argument');\n    }\n    if (targetState === currentState) {\n      return null;\n    } else {\n      return this.once(targetState);\n    }\n  }\n}\n\nexport default EventEmitter;\n", "// constant definitions that can be imported by anyone without worrying about circular\r\n// deps\r\n\r\n// TR2\r\nexport const actions = {\r\n  HEARTBEAT: 0,\r\n  ACK: 1,\r\n  NACK: 2,\r\n  CONNECT: 3,\r\n  CONNECTED: 4,\r\n  DISCONNECT: 5,\r\n  DISCONNECTED: 6,\r\n  CLOSE: 7,\r\n  CLOSED: 8,\r\n  ERROR: 9,\r\n  ATTACH: 10,\r\n  ATTACHED: 11,\r\n  DETACH: 12,\r\n  DETACHED: 13,\r\n  PRESENCE: 14,\r\n  MESSAGE: 15,\r\n  SYNC: 16,\r\n  AUTH: 17,\r\n  ACTIVATE: 18,\r\n  OBJECT: 19,\r\n  OBJECT_SYNC: 20,\r\n  ANNOTATION: 21,\r\n};\r\n\r\nexport const ActionName: string[] = [];\r\nObject.keys(actions).forEach(function (name) {\r\n  ActionName[(actions as { [key: string]: number })[name]] = name;\r\n});\r\n\r\n// TR3\r\nexport const flags: { [key: string]: number } = {\r\n  /* Channel attach state flags */\r\n  HAS_PRESENCE: 1 << 0,\r\n  HAS_BACKLOG: 1 << 1,\r\n  RESUMED: 1 << 2,\r\n  TRANSIENT: 1 << 4,\r\n  ATTACH_RESUME: 1 << 5,\r\n  HAS_OBJECTS: 1 << 7,\r\n  /* Channel mode flags */\r\n  PRESENCE: 1 << 16,\r\n  PUBLISH: 1 << 17,\r\n  SUBSCRIBE: 1 << 18,\r\n  PRESENCE_SUBSCRIBE: 1 << 19,\r\n  ANNOTATION_PUBLISH: 1 << 21,\r\n  ANNOTATION_SUBSCRIBE: 1 << 22,\r\n  OBJECT_SUBSCRIBE: 1 << 24,\r\n  OBJECT_PUBLISH: 1 << 25,\r\n};\r\n\r\nexport const flagNames = Object.keys(flags);\r\n\r\nflags.MODE_ALL =\r\n  flags.PRESENCE |\r\n  flags.PUBLISH |\r\n  flags.SUBSCRIBE |\r\n  flags.PRESENCE_SUBSCRIBE |\r\n  flags.ANNOTATION_PUBLISH |\r\n  flags.ANNOTATION_SUBSCRIBE |\r\n  flags.OBJECT_SUBSCRIBE |\r\n  flags.OBJECT_PUBLISH;\r\n\r\nexport const channelModes = [\r\n  'PRESENCE',\r\n  'PUBLISH',\r\n  'SUBSCRIBE',\r\n  'PRESENCE_SUBSCRIBE',\r\n  'ANNOTATION_PUBLISH',\r\n  'ANNOTATION_SUBSCRIBE',\r\n  'OBJECT_SUBSCRIBE',\r\n  'OBJECT_PUBLISH',\r\n];\r\n", "import Platform from 'common/platform';\r\nimport * as API from '../../../../ably';\r\nimport { Bufferlike as BrowserBufferlike } from '../../../platform/web/lib/util/bufferutils';\r\nimport Logger from '../util/logger';\r\nimport * as Utils from '../util/utils';\r\nimport ErrorInfo from './errorinfo';\r\nimport { actions } from './protocolmessagecommon';\r\n\r\nimport type { IUntypedCryptoStatic } from 'common/types/ICryptoStatic';\r\nimport type { ChannelOptions } from '../../types/channel';\r\nimport type ProtocolMessage from './protocolmessage';\r\n\r\nexport type CipherOptions = {\r\n  channelCipher: {\r\n    encrypt: Function;\r\n    algorithm: 'aes';\r\n  };\r\n  cipher?: {\r\n    channelCipher: {\r\n      encrypt: Function;\r\n      algorithm: 'aes';\r\n    };\r\n  };\r\n};\r\n\r\nexport type EncodingDecodingContext = {\r\n  channelOptions: ChannelOptions;\r\n  plugins: {\r\n    vcdiff?: {\r\n      decode: (delta: Uint8Array, source: Uint8Array) => Uint8Array;\r\n    };\r\n  };\r\n  baseEncodedPreviousPayload?: Buffer | BrowserBufferlike;\r\n};\r\n\r\nfunction normaliseContext(context: CipherOptions | EncodingDecodingContext | ChannelOptions): EncodingDecodingContext {\r\n  if (!context || !(context as EncodingDecodingContext).channelOptions) {\r\n    return {\r\n      channelOptions: context as ChannelOptions,\r\n      plugins: {},\r\n      baseEncodedPreviousPayload: undefined,\r\n    };\r\n  }\r\n  return context as EncodingDecodingContext;\r\n}\r\n\r\nexport function normalizeCipherOptions(\r\n  Crypto: IUntypedCryptoStatic | null,\r\n  logger: Logger,\r\n  options: API.ChannelOptions | null,\r\n): ChannelOptions {\r\n  if (options && options.cipher) {\r\n    if (!Crypto) Utils.throwMissingPluginError('Crypto');\r\n    const cipher = Crypto.getCipher(options.cipher, logger);\r\n    return {\r\n      cipher: cipher.cipherParams,\r\n      channelCipher: cipher.cipher,\r\n    };\r\n  }\r\n  return options ?? {};\r\n}\r\n\r\nasync function encrypt<T extends BaseMessage>(msg: T, cipherOptions: CipherOptions): Promise<T> {\r\n  const { data, encoding } = await encryptData(msg.data, msg.encoding, cipherOptions);\r\n  msg.data = data;\r\n  msg.encoding = encoding;\r\n  return msg;\r\n}\r\n\r\nexport async function encryptData(\r\n  data: any,\r\n  encoding: string | null | undefined,\r\n  cipherOptions: CipherOptions,\r\n): Promise<{ data: any; encoding: string | null | undefined }> {\r\n  let cipher = cipherOptions.channelCipher;\r\n  let dataToEncrypt = data;\r\n  let finalEncoding = encoding ? encoding + '/' : '';\r\n\r\n  if (!Platform.BufferUtils.isBuffer(dataToEncrypt)) {\r\n    dataToEncrypt = Platform.BufferUtils.utf8Encode(String(dataToEncrypt));\r\n    finalEncoding = finalEncoding + 'utf-8/';\r\n  }\r\n\r\n  const ciphertext = await cipher.encrypt(dataToEncrypt);\r\n  finalEncoding = finalEncoding + 'cipher+' + cipher.algorithm;\r\n\r\n  return {\r\n    data: ciphertext,\r\n    encoding: finalEncoding,\r\n  };\r\n}\r\n\r\n/**\r\n * Encodes and encrypts message's payload. Mutates the message object.\r\n * Implements RSL4 and RSL5.\r\n */\r\nexport async function encode<T extends BaseMessage>(msg: T, options: unknown): Promise<T> {\r\n  // RSL4a, supported types\r\n  const isNativeDataType =\r\n    typeof msg.data == 'string' ||\r\n    Platform.BufferUtils.isBuffer(msg.data) ||\r\n    msg.data === null ||\r\n    msg.data === undefined;\r\n  const { data, encoding } = encodeData(msg.data, msg.encoding, isNativeDataType);\r\n\r\n  msg.data = data;\r\n  msg.encoding = encoding;\r\n\r\n  if (options != null && (options as CipherOptions).cipher) {\r\n    return encrypt(msg, options as CipherOptions);\r\n  } else {\r\n    return msg;\r\n  }\r\n}\r\n\r\nexport function encodeData(\r\n  data: any,\r\n  encoding: string | null | undefined,\r\n  isNativeDataType: boolean,\r\n): { data: any; encoding: string | null | undefined } {\r\n  if (isNativeDataType) {\r\n    // nothing to do with the native data types at this point\r\n    return {\r\n      data,\r\n      encoding,\r\n    };\r\n  }\r\n\r\n  if (Utils.isObject(data) || Array.isArray(data)) {\r\n    // RSL4c3 and RSL4d3, encode objects and arrays as strings\r\n    return {\r\n      data: JSON.stringify(data),\r\n      encoding: encoding ? encoding + '/json' : 'json',\r\n    };\r\n  }\r\n\r\n  // RSL4a, throw an error for unsupported types\r\n  throw new ErrorInfo('Data type is unsupported', 40013, 400);\r\n}\r\n\r\nexport async function decode<T extends BaseMessage>(\r\n  message: T,\r\n  inputContext: CipherOptions | EncodingDecodingContext | ChannelOptions,\r\n): Promise<void> {\r\n  // data can be decoded partially and throw an error on a later decoding step.\r\n  // so we need to reassign the data and encoding values we got, and only then throw an error if there is one\r\n  const { data, encoding, error } = await decodeData(message.data, message.encoding, inputContext);\r\n  message.data = data;\r\n  message.encoding = encoding;\r\n\r\n  if (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Implements RSL6\r\n */\r\nexport async function decodeData(\r\n  data: any,\r\n  encoding: string | null | undefined,\r\n  inputContext: CipherOptions | EncodingDecodingContext | ChannelOptions,\r\n): Promise<{\r\n  error?: ErrorInfo;\r\n  data: any;\r\n  encoding: string | null | undefined;\r\n}> {\r\n  const context = normaliseContext(inputContext);\r\n  let lastPayload = data;\r\n  let decodedData = data;\r\n  let finalEncoding = encoding;\r\n  let decodingError: ErrorInfo | undefined;\r\n\r\n  if (encoding) {\r\n    const xforms = encoding.split('/');\r\n    let lastProcessedEncodingIndex;\r\n    let encodingsToProcess = xforms.length;\r\n    let xform = '';\r\n\r\n    try {\r\n      while ((lastProcessedEncodingIndex = encodingsToProcess) > 0) {\r\n        // eslint-disable-next-line security/detect-unsafe-regex\r\n        const match = xforms[--encodingsToProcess].match(/([-\\w]+)(\\+([\\w-]+))?/);\r\n        if (!match) break;\r\n        xform = match[1];\r\n        switch (xform) {\r\n          case 'base64':\r\n            decodedData = Platform.BufferUtils.base64Decode(String(decodedData));\r\n            if (lastProcessedEncodingIndex == xforms.length) {\r\n              lastPayload = decodedData;\r\n            }\r\n            continue;\r\n          case 'utf-8':\r\n            decodedData = Platform.BufferUtils.utf8Decode(decodedData);\r\n            continue;\r\n          case 'json':\r\n            decodedData = JSON.parse(decodedData);\r\n            continue;\r\n          case 'cipher':\r\n            if (\r\n              context.channelOptions != null &&\r\n              context.channelOptions.cipher &&\r\n              context.channelOptions.channelCipher\r\n            ) {\r\n              const xformAlgorithm = match[3],\r\n                cipher = context.channelOptions.channelCipher;\r\n              /* don't attempt to decrypt unless the cipher params are compatible */\r\n              if (xformAlgorithm != cipher.algorithm) {\r\n                throw new Error('Unable to decrypt message with given cipher; incompatible cipher params');\r\n              }\r\n              decodedData = await cipher.decrypt(decodedData);\r\n              continue;\r\n            } else {\r\n              throw new Error('Unable to decrypt message; not an encrypted channel');\r\n            }\r\n          case 'vcdiff':\r\n            if (!context.plugins || !context.plugins.vcdiff) {\r\n              throw new ErrorInfo('Missing Vcdiff decoder (https://github.com/ably-forks/vcdiff-decoder)', 40019, 400);\r\n            }\r\n            if (typeof Uint8Array === 'undefined') {\r\n              throw new ErrorInfo(\r\n                'Delta decoding not supported on this browser (need ArrayBuffer & Uint8Array)',\r\n                40020,\r\n                400,\r\n              );\r\n            }\r\n            try {\r\n              let deltaBase = context.baseEncodedPreviousPayload;\r\n              if (typeof deltaBase === 'string') {\r\n                deltaBase = Platform.BufferUtils.utf8Encode(deltaBase);\r\n              }\r\n\r\n              // vcdiff expects Uint8Arrays, can't copy with ArrayBuffers.\r\n              const deltaBaseBuffer = Platform.BufferUtils.toBuffer(deltaBase as Buffer);\r\n              decodedData = Platform.BufferUtils.toBuffer(decodedData);\r\n\r\n              decodedData = Platform.BufferUtils.arrayBufferViewToBuffer(\r\n                context.plugins.vcdiff.decode(decodedData, deltaBaseBuffer),\r\n              );\r\n              lastPayload = decodedData;\r\n            } catch (e) {\r\n              throw new ErrorInfo('Vcdiff delta decode failed with ' + e, 40018, 400);\r\n            }\r\n            continue;\r\n          default:\r\n            throw new Error('Unknown encoding');\r\n        }\r\n      }\r\n    } catch (e) {\r\n      const err = e as ErrorInfo;\r\n      decodingError = new ErrorInfo(\r\n        `Error processing the ${xform} encoding, decoder returned \u2018${err.message}\u2019`,\r\n        err.code || 40013,\r\n        400,\r\n      );\r\n    } finally {\r\n      finalEncoding =\r\n        (lastProcessedEncodingIndex as number) <= 0 ? null : xforms.slice(0, lastProcessedEncodingIndex).join('/');\r\n    }\r\n  }\r\n\r\n  if (decodingError) {\r\n    return {\r\n      error: decodingError,\r\n      data: decodedData,\r\n      encoding: finalEncoding,\r\n    };\r\n  }\r\n\r\n  context.baseEncodedPreviousPayload = lastPayload;\r\n  return {\r\n    data: decodedData,\r\n    encoding: finalEncoding,\r\n  };\r\n}\r\n\r\nexport function wireToJSON(this: BaseMessage, ...args: any[]): any {\r\n  // encode message data for wire transmission. we can infer the format used by client by inspecting with what arguments this method was called.\r\n  // if JSON encoding is being used, the JSON.stringify() will be called and this toJSON() method will have a non-empty arguments list.\r\n  // MSGPack encoding implementation also calls toJSON(), but with an empty arguments list.\r\n  const format = args.length > 0 ? Utils.Format.json : Utils.Format.msgpack;\r\n  const { data, encoding } = encodeDataForWire(this.data, this.encoding, format);\r\n\r\n  return Object.assign({}, this, { encoding, data });\r\n}\r\n\r\n/**\r\n * Prepares the payload data to be transmitted over the wire to Ably.\r\n * Encodes the data depending on the selected protocol format.\r\n *\r\n * Implements RSL4c1 and RSL4d1\r\n */\r\nexport function encodeDataForWire(\r\n  data: any,\r\n  encoding: string | null | undefined,\r\n  format: Utils.Format,\r\n): { data: any; encoding: string | null | undefined } {\r\n  if (!data || !Platform.BufferUtils.isBuffer(data)) {\r\n    // no encoding required for non-buffer payloads\r\n    return {\r\n      data,\r\n      encoding,\r\n    };\r\n  }\r\n\r\n  if (format === Utils.Format.msgpack) {\r\n    // RSL4c1\r\n    // BufferUtils.toBuffer returns a datatype understandable by that platform's msgpack implementation:\r\n    // Buffer in node, Uint8Array in browsers\r\n    return {\r\n      data: Platform.BufferUtils.toBuffer(data),\r\n      encoding,\r\n    };\r\n  }\r\n\r\n  // RSL4d1, encode binary payload as base64 string\r\n  return {\r\n    data: Platform.BufferUtils.base64Encode(data),\r\n    encoding: encoding ? encoding + '/base64' : 'base64',\r\n  };\r\n}\r\n\r\nexport const MessageEncoding = {\r\n  encryptData,\r\n  encodeData,\r\n  encodeDataForWire,\r\n  decodeData,\r\n};\r\n\r\n// in-place, generally called on the protocol message before decoding\r\nexport function populateFieldsFromParent(parent: ProtocolMessage) {\r\n  const { id, connectionId, timestamp } = parent;\r\n\r\n  let msgs: BaseMessage[];\r\n  switch (parent.action) {\r\n    case actions.MESSAGE: {\r\n      msgs = parent.messages!;\r\n      break;\r\n    }\r\n    case actions.PRESENCE:\r\n    case actions.SYNC:\r\n      msgs = parent.presence!;\r\n      break;\r\n    case actions.ANNOTATION:\r\n      msgs = parent.annotations!;\r\n      break;\r\n    case actions.OBJECT:\r\n    case actions.OBJECT_SYNC:\r\n      msgs = parent.state!;\r\n      break;\r\n    default:\r\n      throw new ErrorInfo('Unexpected action ' + parent.action, 40000, 400);\r\n  }\r\n\r\n  for (let i = 0; i < msgs.length; i++) {\r\n    const msg = msgs[i];\r\n    if (!msg.connectionId) {\r\n      msg.connectionId = connectionId;\r\n    }\r\n    if (!msg.timestamp) {\r\n      msg.timestamp = timestamp;\r\n    }\r\n    if (id && !msg.id) {\r\n      msg.id = id + ':' + i;\r\n    }\r\n  }\r\n}\r\n\r\nexport function strMsg(m: any, cls: string) {\r\n  let result = '[' + cls;\r\n  for (const attr in m) {\r\n    if (attr === 'data') {\r\n      if (typeof m.data == 'string') {\r\n        result += '; data=' + m.data;\r\n      } else if (Platform.BufferUtils.isBuffer(m.data)) {\r\n        result += '; data (buffer)=' + Platform.BufferUtils.base64Encode(m.data);\r\n      } else if (typeof m.data !== 'undefined') {\r\n        result += '; data (json)=' + JSON.stringify(m.data);\r\n      }\r\n    } else if (attr && (attr === 'extras' || attr === 'operation')) {\r\n      result += '; ' + attr + '=' + JSON.stringify(m[attr]);\r\n    } else if (m[attr] !== undefined) {\r\n      result += '; ' + attr + '=' + m[attr];\r\n    }\r\n  }\r\n  result += ']';\r\n  return result;\r\n}\r\n\r\nexport abstract class BaseMessage {\r\n  id?: string;\r\n  timestamp?: number;\r\n  clientId?: string;\r\n  connectionId?: string;\r\n  data?: any;\r\n  encoding?: string | null;\r\n  extras?: any;\r\n  size?: number;\r\n}\r\n", "import Logger, { LoggerOptions } from '../util/logger';\nimport Defaults from '../util/defaults';\nimport Auth from './auth';\nimport { HttpPaginatedResponse, PaginatedResult } from './paginatedresource';\nimport ErrorInfo from '../types/errorinfo';\nimport Stats from '../types/stats';\nimport { Http, RequestParams } from '../../types/http';\nimport ClientOptions, { NormalisedClientOptions } from '../../types/ClientOptions';\nimport * as API from '../../../../ably';\nimport * as Utils from '../util/utils';\n\nimport Platform from '../../platform';\nimport { Rest } from './rest';\nimport { IUntypedCryptoStatic } from 'common/types/ICryptoStatic';\nimport { AnnotationsPlugin } from './modularplugins';\nimport { throwMissingPluginError } from '../util/utils';\nimport { MsgPack } from 'common/types/msgpack';\nimport { HTTPRequestImplementations } from 'platform/web/lib/http/http';\nimport { FilteredSubscriptions } from './filteredsubscriptions';\nimport type { LocalDevice } from 'plugins/push/pushactivation';\nimport EventEmitter from '../util/eventemitter';\nimport { MessageEncoding } from '../types/basemessage';\n\ntype BatchResult<T> = API.BatchResult<T>;\ntype BatchPublishSpec = API.BatchPublishSpec;\ntype BatchPublishSuccessResult = API.BatchPublishSuccessResult;\ntype BatchPublishFailureResult = API.BatchPublishFailureResult;\ntype BatchPublishResult = BatchResult<BatchPublishSuccessResult | BatchPublishFailureResult>;\ntype BatchPresenceSuccessResult = API.BatchPresenceSuccessResult;\ntype BatchPresenceFailureResult = API.BatchPresenceFailureResult;\ntype BatchPresenceResult = BatchResult<BatchPresenceSuccessResult | BatchPresenceFailureResult>;\n\n/**\n `BaseClient` acts as the base class for all of the client classes exported by the SDK. It is an implementation detail and this class is not advertised publicly.\n */\nclass BaseClient {\n  options: NormalisedClientOptions;\n  _currentFallback: null | {\n    host: string;\n    validUntil: number;\n  };\n  serverTimeOffset: number | null;\n  http: Http;\n  auth: Auth;\n\n  private readonly _rest: Rest | null;\n  readonly _Crypto: IUntypedCryptoStatic | null;\n  readonly _MsgPack: MsgPack | null;\n  // Extra HTTP request implementations available to this client, in addition to those in web\u2019s Http.bundledRequestImplementations\n  readonly _additionalHTTPRequestImplementations: HTTPRequestImplementations | null;\n  private readonly __FilteredSubscriptions: typeof FilteredSubscriptions | null;\n  readonly _Annotations: AnnotationsPlugin | null;\n  readonly logger: Logger;\n  _device?: LocalDevice;\n\n  constructor(options: ClientOptions) {\n    this._additionalHTTPRequestImplementations = options.plugins ?? null;\n\n    this.logger = new Logger();\n    this.logger.setLog(options.logLevel, options.logHandler);\n    Logger.logAction(\n      this.logger,\n      Logger.LOG_MICRO,\n      'BaseClient()',\n      'initialized with clientOptions ' + Platform.Config.inspect(options),\n    );\n\n    this._MsgPack = options.plugins?.MsgPack ?? null;\n    const normalOptions = (this.options = Defaults.normaliseOptions(options, this._MsgPack, this.logger));\n\n    /* process options */\n    if (normalOptions.key) {\n      const keyMatch = normalOptions.key.match(/^([^:\\s]+):([^:.\\s]+)$/);\n      if (!keyMatch) {\n        const msg = 'invalid key parameter';\n        Logger.logAction(this.logger, Logger.LOG_ERROR, 'BaseClient()', msg);\n        throw new ErrorInfo(msg, 40400, 404);\n      }\n      normalOptions.keyName = keyMatch[1];\n      normalOptions.keySecret = keyMatch[2];\n    }\n\n    if ('clientId' in normalOptions) {\n      if (!(typeof normalOptions.clientId === 'string' || normalOptions.clientId === null))\n        throw new ErrorInfo('clientId must be either a string or null', 40012, 400);\n      else if (normalOptions.clientId === '*')\n        throw new ErrorInfo(\n          'Can\u2019t use \"*\" as a clientId as that string is reserved. (To change the default token request behaviour to use a wildcard clientId, use {defaultTokenParams: {clientId: \"*\"}})',\n          40012,\n          400,\n        );\n    }\n\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'BaseClient()', 'started; version = ' + Defaults.version);\n\n    this._currentFallback = null;\n\n    this.serverTimeOffset = null;\n    this.http = new Http(this);\n    this.auth = new Auth(this, normalOptions);\n\n    this._rest = options.plugins?.Rest ? new options.plugins.Rest(this) : null;\n    this._Crypto = options.plugins?.Crypto ?? null;\n    this.__FilteredSubscriptions = options.plugins?.MessageInteractions ?? null;\n    this._Annotations = options.plugins?.Annotations ?? null;\n  }\n\n  get rest(): Rest {\n    if (!this._rest) {\n      throwMissingPluginError('Rest');\n    }\n    return this._rest;\n  }\n\n  get _FilteredSubscriptions(): typeof FilteredSubscriptions {\n    if (!this.__FilteredSubscriptions) {\n      throwMissingPluginError('MessageInteractions');\n    }\n    return this.__FilteredSubscriptions;\n  }\n\n  get channels() {\n    return this.rest.channels;\n  }\n\n  get push() {\n    return this.rest.push;\n  }\n\n  /** RSH8 */\n  device(): LocalDevice & API.LocalDevice {\n    if (!this.options.plugins?.Push || !this.push.LocalDevice) {\n      throwMissingPluginError('Push');\n    }\n    if (!this._device) {\n      this._device = this.push.LocalDevice.load(this);\n    }\n    return this._device;\n  }\n\n  baseUri(host: string) {\n    return Defaults.getHttpScheme(this.options) + host + ':' + Defaults.getPort(this.options, false);\n  }\n\n  async stats(params: RequestParams): Promise<PaginatedResult<Stats>> {\n    return this.rest.stats(params);\n  }\n\n  async time(params?: RequestParams): Promise<number> {\n    return this.rest.time(params);\n  }\n\n  async request(\n    method: string,\n    path: string,\n    version: number,\n    params: RequestParams,\n    body: unknown,\n    customHeaders: Record<string, string>,\n  ): Promise<HttpPaginatedResponse<unknown>> {\n    return this.rest.request(method, path, version, params, body, customHeaders);\n  }\n\n  batchPublish<T extends BatchPublishSpec | BatchPublishSpec[]>(\n    specOrSpecs: T,\n  ): Promise<T extends BatchPublishSpec ? BatchPublishResult : BatchPublishResult[]> {\n    return this.rest.batchPublish(specOrSpecs);\n  }\n\n  batchPresence(channels: string[]): Promise<BatchPresenceResult> {\n    return this.rest.batchPresence(channels);\n  }\n\n  setLog(logOptions: LoggerOptions): void {\n    this.logger.setLog(logOptions.level, logOptions.handler);\n  }\n\n  /**\n   * Get the current time based on the local clock,\n   * or if the option queryTime is true, return the server time.\n   * The server time offset from the local time is stored so that\n   * only one request to the server to get the time is ever needed\n   */\n  async getTimestamp(queryTime: boolean): Promise<number> {\n    if (!this.isTimeOffsetSet() && queryTime) {\n      return this.time();\n    }\n\n    return this.getTimestampUsingOffset();\n  }\n\n  getTimestampUsingOffset(): number {\n    return Date.now() + (this.serverTimeOffset || 0);\n  }\n\n  isTimeOffsetSet(): boolean {\n    return this.serverTimeOffset !== null;\n  }\n\n  static Platform = Platform;\n\n  /**\n   * These exports are for use by UMD plugins; reason being so that constructors and static methods can be accessed by these plugins without needing to import the classes directly and result in the class existing in both the plugin and the core library.\n   */\n  Platform = Platform;\n  ErrorInfo = ErrorInfo;\n  Logger = Logger;\n  Defaults = Defaults;\n  Utils = Utils;\n  EventEmitter = EventEmitter;\n  MessageEncoding = MessageEncoding;\n}\n\nexport default BaseClient;\n", "import { MsgPack } from 'common/types/msgpack';\nimport type { LocalDevice } from 'plugins/push/pushactivation';\nimport * as Utils from '../util/utils';\nimport ErrorInfo, { IConvertibleToErrorInfo } from './errorinfo';\n\nexport enum DeviceFormFactor {\n  Phone = 'phone',\n  Tablet = 'tablet',\n  Desktop = 'desktop',\n  TV = 'tv',\n  Watch = 'watch',\n  Car = 'car',\n  Embedded = 'embedded',\n  Other = 'other',\n}\n\nexport enum DevicePlatform {\n  Android = 'android',\n  IOS = 'ios',\n  Browser = 'browser',\n}\n\ntype DevicePushState = 'ACTIVE' | 'FAILING' | 'FAILED';\n\ninterface WebPushEncryptionKey {\n  p256dh: string;\n  auth: string;\n}\n\ninterface WebPushRecipient {\n  transportType: 'web';\n  targetUrl: string;\n  encryptionKey: WebPushEncryptionKey;\n  publicVapidKey: string;\n}\n\ninterface PushChannelRecipient {\n  transportType: 'ablyChannel';\n  channel: string;\n  ablyKey: string;\n  ablyUrl: string;\n}\n\ntype PushRecipient = WebPushRecipient | PushChannelRecipient;\n\nexport type DevicePushDetails = {\n  error?: ErrorInfo;\n  recipient?: PushRecipient;\n  state?: DevicePushState;\n  metadata?: string;\n};\n\nclass DeviceDetails {\n  id?: string;\n  clientId?: string;\n  deviceSecret?: string;\n  formFactor?: DeviceFormFactor;\n  platform?: DevicePlatform;\n  push?: DevicePushDetails;\n  metadata?: string;\n  deviceIdentityToken?: string;\n\n  toJSON(): DeviceDetails {\n    return {\n      id: this.id,\n      deviceSecret: this.deviceSecret,\n      platform: this.platform,\n      formFactor: this.formFactor,\n      clientId: this.clientId,\n      metadata: this.metadata,\n      deviceIdentityToken: this.deviceIdentityToken,\n      push: {\n        recipient: this.push?.recipient,\n        state: this.push?.state,\n        error: this.push?.error,\n      },\n    } as DeviceDetails;\n  }\n\n  toString(): string {\n    let result = '[DeviceDetails';\n    if (this.id) result += '; id=' + this.id;\n    if (this.platform) result += '; platform=' + this.platform;\n    if (this.formFactor) result += '; formFactor=' + this.formFactor;\n    if (this.clientId) result += '; clientId=' + this.clientId;\n    if (this.metadata) result += '; metadata=' + this.metadata;\n    if (this.deviceIdentityToken) result += '; deviceIdentityToken=' + JSON.stringify(this.deviceIdentityToken);\n    if (this.push?.recipient) result += '; push.recipient=' + JSON.stringify(this.push.recipient);\n    if (this.push?.state) result += '; push.state=' + this.push.state;\n    if (this.push?.error) result += '; push.error=' + JSON.stringify(this.push.error);\n    if (this.push?.metadata) result += '; push.metadata=' + this.push.metadata;\n    result += ']';\n    return result;\n  }\n\n  static toRequestBody(body: unknown, MsgPack: MsgPack | null, format?: Utils.Format) {\n    return Utils.encodeBody(body, MsgPack, format);\n  }\n\n  static fromResponseBody(\n    body: Array<Record<string, unknown>> | Record<string, unknown>,\n    MsgPack: MsgPack | null,\n    format?: Utils.Format,\n  ): DeviceDetails | DeviceDetails[] {\n    if (format) {\n      body = Utils.decodeBody(body, MsgPack, format);\n    }\n\n    if (Array.isArray(body)) {\n      return DeviceDetails.fromValuesArray(body);\n    } else {\n      return DeviceDetails.fromValues(body);\n    }\n  }\n\n  static fromValues(values: Record<string, unknown>): DeviceDetails {\n    values.error = values.error && ErrorInfo.fromValues(values.error as IConvertibleToErrorInfo);\n    return Object.assign(new DeviceDetails(), values);\n  }\n\n  static fromLocalDevice(device: LocalDevice): DeviceDetails {\n    return Object.assign(new DeviceDetails(), device);\n  }\n\n  static fromValuesArray(values: Array<Record<string, unknown>>): DeviceDetails[] {\n    const count = values.length,\n      result = new Array(count);\n    for (let i = 0; i < count; i++) result[i] = DeviceDetails.fromValues(values[i]);\n    return result;\n  }\n}\n\nexport default DeviceDetails;\n", "import Platform from '../../platform';\nimport * as Utils from '../util/utils';\nimport Logger from '../util/logger';\nimport Auth from './auth';\nimport HttpMethods from '../../constants/HttpMethods';\nimport ErrorInfo, { IPartialErrorInfo, PartialErrorInfo } from '../types/errorinfo';\nimport BaseClient from './baseclient';\nimport { MsgPack } from 'common/types/msgpack';\nimport { RequestBody, ResponseHeaders, appendingParams as urlFromPathAndParams, paramString } from 'common/types/http';\nimport httpStatusCodes from '../../constants/HttpStatusCodes';\n\nasync function withAuthDetails<T>(\n  client: BaseClient,\n  headers: ResponseHeaders | undefined,\n  params: Record<string, any>,\n  opCallback: Function,\n): Promise<ResourceResult<T>> {\n  if (client.http.supportsAuthHeaders) {\n    const authHeaders = await client.auth.getAuthHeaders();\n    return opCallback(Utils.mixin(authHeaders!, headers), params);\n  } else {\n    const authParams = await client.auth.getAuthParams();\n    return opCallback(headers, Utils.mixin(authParams!, params));\n  }\n}\n\nfunction unenvelope<T>(\n  result: ResourceResult<T>,\n  MsgPack: MsgPack | null,\n  format: Utils.Format | null,\n): ResourceResult<T> {\n  if (result.err && !result.body) {\n    return { err: result.err };\n  }\n\n  if (result.statusCode === httpStatusCodes.NoContent) {\n    return { ...result, body: [] as any, unpacked: true };\n  }\n\n  let body = result.body;\n\n  if (!result.unpacked) {\n    try {\n      body = Utils.decodeBody(body, MsgPack, format);\n    } catch (e) {\n      if (Utils.isErrorInfoOrPartialErrorInfo(e)) {\n        return { err: e };\n      } else {\n        return { err: new PartialErrorInfo(Utils.inspectError(e), null) };\n      }\n    }\n  }\n\n  if (!body) {\n    return { err: new PartialErrorInfo('unenvelope(): Response body is missing', null) };\n  }\n\n  const { statusCode: wrappedStatusCode, response, headers: wrappedHeaders } = body as Record<string, any>;\n\n  if (wrappedStatusCode === undefined) {\n    /* Envelope already unwrapped by the transport */\n    return { ...result, body, unpacked: true };\n  }\n\n  if (wrappedStatusCode < 200 || wrappedStatusCode >= 300) {\n    /* handle wrapped errors */\n    let wrappedErr = (response && response.error) || result.err;\n    if (!wrappedErr) {\n      wrappedErr = new Error('Error in unenveloping ' + body);\n      wrappedErr.statusCode = wrappedStatusCode;\n    }\n    return { err: wrappedErr, body: response, headers: wrappedHeaders, unpacked: true, statusCode: wrappedStatusCode };\n  }\n\n  return { err: result.err, body: response, headers: wrappedHeaders, unpacked: true, statusCode: wrappedStatusCode };\n}\n\nfunction logResult<T>(\n  result: ResourceResult<T>,\n  method: HttpMethods,\n  path: string,\n  params: Record<string, string>,\n  logger: Logger,\n) {\n  if (result.err) {\n    Logger.logAction(\n      logger,\n      Logger.LOG_MICRO,\n      'Resource.' + method + '()',\n      'Received Error; ' + urlFromPathAndParams(path, params) + '; Error: ' + Utils.inspectError(result.err),\n    );\n  } else {\n    Logger.logAction(\n      logger,\n      Logger.LOG_MICRO,\n      'Resource.' + method + '()',\n      'Received; ' +\n        urlFromPathAndParams(path, params) +\n        '; Headers: ' +\n        paramString(result.headers as Record<string, any>) +\n        '; StatusCode: ' +\n        result.statusCode +\n        '; Body: ' +\n        (Platform.BufferUtils.isBuffer(result.body)\n          ? ' (Base64): ' + Platform.BufferUtils.base64Encode(result.body)\n          : ': ' + Platform.Config.inspect(result.body)),\n    );\n  }\n}\n\nexport interface ResourceResponse<T> {\n  body?: T;\n  headers?: ResponseHeaders;\n  unpacked?: boolean;\n  statusCode?: number;\n}\n\nexport interface ResourceResult<T> extends ResourceResponse<T> {\n  /**\n   * Any error returned by the underlying HTTP client.\n   */\n  err: IPartialErrorInfo | null;\n}\n\nclass Resource {\n  /**\n   * @param throwError Whether to throw any error returned by the underlying HTTP client.\n   *\n   * If you specify `true`, then this method will return a `ResourceResponse<T>`, and if the underlying HTTP client returns an error, this method call will throw that error. If you specify `false`, then it will return a `ResourceResult<T>`, whose `err` property contains any error that was returned by the underlying HTTP client.\n   */\n  static async get<T = unknown>(\n    client: BaseClient,\n    path: string,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    throwError: true,\n  ): Promise<ResourceResponse<T>>;\n  static async get<T = unknown>(\n    client: BaseClient,\n    path: string,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    throwError: false,\n  ): Promise<ResourceResult<T>>;\n  static async get<T = unknown>(\n    client: BaseClient,\n    path: string,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    throwError: boolean,\n  ): Promise<ResourceResponse<T> | ResourceResult<T>> {\n    return Resource.do(HttpMethods.Get, client, path, null, headers, params, envelope, throwError ?? false);\n  }\n\n  /**\n   * @param throwError Whether to throw any error returned by the underlying HTTP client.\n   *\n   * If you specify `true`, then this method will return a `ResourceResponse<T>`, and if the underlying HTTP client returns an error, this method call will throw that error. If you specify `false`, then it will return a `ResourceResult<T>`, whose `err` property contains any error that was returned by the underlying HTTP client.\n   */\n  static async delete<T = unknown>(\n    client: BaseClient,\n    path: string,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    throwError: true,\n  ): Promise<ResourceResponse<T>>;\n  static async delete<T = unknown>(\n    client: BaseClient,\n    path: string,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    throwError: false,\n  ): Promise<ResourceResult<T>>;\n  static async delete<T = unknown>(\n    client: BaseClient,\n    path: string,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    throwError: boolean,\n  ): Promise<ResourceResponse<T> | ResourceResult<T>> {\n    return Resource.do(HttpMethods.Delete, client, path, null, headers, params, envelope, throwError);\n  }\n\n  /**\n   * @param throwError Whether to throw any error returned by the underlying HTTP client.\n   *\n   * If you specify `true`, then this method will return a `ResourceResponse<T>`, and if the underlying HTTP client returns an error, this method call will throw that error. If you specify `false`, then it will return a `ResourceResult<T>`, whose `err` property contains any error that was returned by the underlying HTTP client.\n   */\n  static async post<T = unknown>(\n    client: BaseClient,\n    path: string,\n    body: RequestBody | null,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    throwError: true,\n  ): Promise<ResourceResponse<T>>;\n  static async post<T = unknown>(\n    client: BaseClient,\n    path: string,\n    body: RequestBody | null,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    throwError: false,\n  ): Promise<ResourceResult<T>>;\n  static async post<T = unknown>(\n    client: BaseClient,\n    path: string,\n    body: RequestBody | null,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    throwError: boolean,\n  ): Promise<ResourceResponse<T> | ResourceResult<T>> {\n    return Resource.do(HttpMethods.Post, client, path, body, headers, params, envelope, throwError);\n  }\n\n  /**\n   * @param throwError Whether to throw any error returned by the underlying HTTP client.\n   *\n   * If you specify `true`, then this method will return a `ResourceResponse<T>`, and if the underlying HTTP client returns an error, this method call will throw that error. If you specify `false`, then it will return a `ResourceResult<T>`, whose `err` property contains any error that was returned by the underlying HTTP client.\n   */\n  static async patch<T = unknown>(\n    client: BaseClient,\n    path: string,\n    body: RequestBody | null,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    throwError: true,\n  ): Promise<ResourceResponse<T>>;\n  static async patch<T = unknown>(\n    client: BaseClient,\n    path: string,\n    body: RequestBody | null,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    throwError: false,\n  ): Promise<ResourceResult<T>>;\n  static async patch<T = unknown>(\n    client: BaseClient,\n    path: string,\n    body: RequestBody | null,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    throwError: boolean,\n  ): Promise<ResourceResponse<T> | ResourceResult<T>> {\n    return Resource.do(HttpMethods.Patch, client, path, body, headers, params, envelope, throwError);\n  }\n\n  /**\n   * @param throwError Whether to throw any error returned by the underlying HTTP client.\n   *\n   * If you specify `true`, then this method will return a `ResourceResponse<T>`, and if the underlying HTTP client returns an error, this method call will throw that error. If you specify `false`, then it will return a `ResourceResult<T>`, whose `err` property contains any error that was returned by the underlying HTTP client.\n   */\n  static async put<T = unknown>(\n    client: BaseClient,\n    path: string,\n    body: RequestBody | null,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    throwError: true,\n  ): Promise<ResourceResponse<T>>;\n  static async put<T = unknown>(\n    client: BaseClient,\n    path: string,\n    body: RequestBody | null,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    throwError: false,\n  ): Promise<ResourceResult<T>>;\n  static async put<T = unknown>(\n    client: BaseClient,\n    path: string,\n    body: RequestBody | null,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    throwError: boolean,\n  ): Promise<ResourceResponse<T> | ResourceResult<T>> {\n    return Resource.do(HttpMethods.Put, client, path, body, headers, params, envelope, throwError);\n  }\n\n  static async do<T>(\n    method: HttpMethods,\n    client: BaseClient,\n    path: string,\n    body: RequestBody | null,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    throwError: boolean,\n  ): Promise<ResourceResponse<T> | ResourceResult<T>> {\n    if (envelope) {\n      (params = params || {})['envelope'] = envelope;\n    }\n\n    const logger = client.logger;\n\n    async function doRequest(\n      this: any,\n      headers: Record<string, string>,\n      params: Record<string, any>,\n    ): Promise<ResourceResult<T>> {\n      if (logger.shouldLog(Logger.LOG_MICRO)) {\n        let decodedBody = body;\n        if (headers['content-type']?.indexOf('msgpack') > 0) {\n          try {\n            if (!client._MsgPack) {\n              Utils.throwMissingPluginError('MsgPack');\n            }\n            decodedBody = client._MsgPack.decode(body as Buffer);\n          } catch (decodeErr) {\n            Logger.logAction(\n              logger,\n              Logger.LOG_MICRO,\n              'Resource.' + method + '()',\n              'Sending MsgPack Decoding Error: ' + Utils.inspectError(decodeErr),\n            );\n          }\n        }\n        Logger.logAction(\n          logger,\n          Logger.LOG_MICRO,\n          'Resource.' + method + '()',\n          'Sending; ' + urlFromPathAndParams(path, params) + '; Body: ' + decodedBody,\n        );\n      }\n\n      const httpResult = await client.http.do(method, path, headers, body, params);\n\n      if (httpResult.error && Auth.isTokenErr(httpResult.error as ErrorInfo)) {\n        /* token has expired, so get a new one */\n        await client.auth.authorize(null, null);\n        /* retry ... */\n        return withAuthDetails(client, headers, params, doRequest);\n      }\n\n      return {\n        err: httpResult.error as ErrorInfo,\n        body: httpResult.body as T | undefined,\n        headers: httpResult.headers,\n        unpacked: httpResult.unpacked,\n        statusCode: httpResult.statusCode,\n      };\n    }\n\n    let result = await withAuthDetails<T>(client, headers, params, doRequest);\n\n    if (envelope) {\n      result = unenvelope(result, client._MsgPack, envelope);\n    }\n\n    if (logger.shouldLog(Logger.LOG_MICRO)) {\n      logResult(result, method, path, params, logger);\n    }\n\n    if (throwError) {\n      if (result.err) {\n        throw result.err;\n      } else {\n        const response: Omit<ResourceResult<T>, 'err'> & Pick<Partial<ResourceResult<T>>, 'err'> = { ...result };\n        delete response.err;\n        return response;\n      }\n    }\n\n    return result;\n  }\n}\n\nexport default Resource;\n", "import * as Utils from '../util/utils';\nimport Logger from '../util/logger';\nimport Resource, { ResourceResult } from './resource';\nimport ErrorInfo, { IPartialErrorInfo } from '../types/errorinfo';\nimport BaseClient from './baseclient';\nimport { RequestBody, ResponseHeaders } from 'common/types/http';\nimport HttpStatusCodes from '../../constants/HttpStatusCodes';\n\nexport type BodyHandler = (body: unknown, headers: ResponseHeaders, unpacked?: boolean) => Promise<any>;\n\nfunction getRelParams(linkUrl: string) {\n  const urlMatch = linkUrl.match(/^\\.\\/(\\w+)\\?(.*)$/);\n  return urlMatch && urlMatch[2] && Utils.parseQueryString(urlMatch[2]);\n}\n\nfunction parseRelLinks(linkHeader: string | Array<string>) {\n  if (typeof linkHeader == 'string') linkHeader = linkHeader.split(',');\n\n  const relParams: Record<string, Record<string, string>> = {};\n  for (let i = 0; i < linkHeader.length; i++) {\n    const linkMatch = linkHeader[i].match(/^\\s*<(.+)>;\\s*rel=\"(\\w+)\"$/);\n    if (linkMatch) {\n      const params = getRelParams(linkMatch[1]);\n      if (params) relParams[linkMatch[2]] = params;\n    }\n  }\n  return relParams;\n}\n\nfunction returnErrOnly(err: IPartialErrorInfo, body: unknown, useHPR?: boolean) {\n  /* If using httpPaginatedResponse, errors from Ably are returned as part of\n   * the HPR, only throw `err` for network errors etc. which don't\n   * return a body and/or have no ably-originated error code (non-numeric\n   * error codes originate from node) */\n  return !(useHPR && (body || typeof err.code === 'number'));\n}\n\nclass PaginatedResource {\n  client: BaseClient;\n  path: string;\n  headers: Record<string, string>;\n  envelope: Utils.Format | null;\n  bodyHandler: BodyHandler;\n  useHttpPaginatedResponse: boolean;\n\n  constructor(\n    client: BaseClient,\n    path: string,\n    headers: Record<string, string>,\n    envelope: Utils.Format | undefined,\n    bodyHandler: BodyHandler,\n    useHttpPaginatedResponse?: boolean,\n  ) {\n    this.client = client;\n    this.path = path;\n    this.headers = headers;\n    this.envelope = envelope ?? null;\n    this.bodyHandler = bodyHandler;\n    this.useHttpPaginatedResponse = useHttpPaginatedResponse || false;\n  }\n\n  get logger(): Logger {\n    return this.client.logger;\n  }\n\n  async get<T1, T2>(params: Record<string, T2>): Promise<PaginatedResult<T1>> {\n    const result = await Resource.get<T1>(this.client, this.path, this.headers, params, this.envelope, false);\n    return this.handlePage(result);\n  }\n\n  async delete<T1, T2>(params: Record<string, T2>): Promise<PaginatedResult<T1>> {\n    const result = await Resource.delete<T1>(this.client, this.path, this.headers, params, this.envelope, false);\n    return this.handlePage(result);\n  }\n\n  async post<T1, T2>(params: Record<string, T2>, body: RequestBody | null): Promise<PaginatedResult<T1>> {\n    const result = await Resource.post<T1>(this.client, this.path, body, this.headers, params, this.envelope, false);\n    return this.handlePage(result);\n  }\n\n  async put<T1, T2>(params: Record<string, T2>, body: RequestBody | null): Promise<PaginatedResult<T1>> {\n    const result = await Resource.put<T1>(this.client, this.path, body, this.headers, params, this.envelope, false);\n    return this.handlePage(result);\n  }\n\n  async patch<T1, T2>(params: Record<string, T2>, body: RequestBody | null): Promise<PaginatedResult<T1>> {\n    const result = await Resource.patch<T1>(this.client, this.path, body, this.headers, params, this.envelope, false);\n    return this.handlePage(result);\n  }\n\n  async handlePage<T>(result: ResourceResult<T>): Promise<PaginatedResult<T>> {\n    if (result.err && returnErrOnly(result.err, result.body, this.useHttpPaginatedResponse)) {\n      Logger.logAction(\n        this.logger,\n        Logger.LOG_ERROR,\n        'PaginatedResource.handlePage()',\n        'Unexpected error getting resource: err = ' + Utils.inspectError(result.err),\n      );\n      throw result.err;\n    }\n\n    let items, linkHeader, relParams;\n\n    try {\n      items =\n        result.statusCode == HttpStatusCodes.NoContent\n          ? []\n          : await this.bodyHandler(result.body, result.headers || {}, result.unpacked);\n    } catch (e) {\n      /* If we got an error, the failure to parse the body is almost certainly\n       * due to that, so throw that in preference over the parse error */\n      throw result.err || e;\n    }\n\n    if (result.headers && (linkHeader = result.headers['Link'] || result.headers['link'])) {\n      relParams = parseRelLinks(linkHeader);\n    }\n\n    if (this.useHttpPaginatedResponse) {\n      return new HttpPaginatedResponse(\n        this,\n        items,\n        result.headers || {},\n        result.statusCode as number,\n        relParams,\n        result.err,\n      );\n    } else {\n      return new PaginatedResult(this, items, relParams);\n    }\n  }\n}\n\nexport class PaginatedResult<T> {\n  resource: PaginatedResource;\n  items: T[];\n  private _relParams?: Record<string, any>;\n\n  constructor(resource: PaginatedResource, items: T[], relParams?: Record<string, any>) {\n    this.resource = resource;\n    this.items = items;\n    this._relParams = relParams;\n  }\n\n  async first(): Promise<PaginatedResult<T>> {\n    if (this.hasFirst()) {\n      return this.get(this._relParams!.first);\n    }\n\n    throw new ErrorInfo('No link to the first page of results', 40400, 404);\n  }\n\n  async current(): Promise<PaginatedResult<T>> {\n    if (this.hasCurrent()) {\n      return this.get(this._relParams!.current);\n    }\n\n    throw new ErrorInfo('No link to the current page of results', 40400, 404);\n  }\n\n  async next(): Promise<PaginatedResult<T> | null> {\n    if (this.hasNext()) {\n      return this.get(this._relParams!.next);\n    }\n\n    return null;\n  }\n\n  hasFirst(): boolean {\n    return this._relParams != null && 'first' in this._relParams;\n  }\n\n  hasCurrent(): boolean {\n    return this._relParams != null && 'current' in this._relParams;\n  }\n\n  hasNext(): boolean {\n    return this._relParams != null && 'next' in this._relParams;\n  }\n\n  isLast(): boolean {\n    return !this.hasNext();\n  }\n\n  /* We assume that only the initial request can be a POST, and that accessing\n   * the rest of a multipage set of results can always be done with GET */\n  async get(params: any): Promise<PaginatedResult<T>> {\n    const res = this.resource;\n    const result = await Resource.get<T>(res.client, res.path, res.headers, params, res.envelope, false);\n    return res.handlePage(result);\n  }\n}\n\nexport class HttpPaginatedResponse<T> extends PaginatedResult<T> {\n  statusCode: number;\n  success: boolean;\n  headers: ResponseHeaders;\n  errorCode?: number | null;\n  errorMessage?: string | null;\n\n  constructor(\n    resource: PaginatedResource,\n    items: T[],\n    headers: ResponseHeaders,\n    statusCode: number,\n    relParams: any,\n    err: IPartialErrorInfo | null,\n  ) {\n    super(resource, items, relParams);\n    this.statusCode = statusCode;\n    this.success = statusCode < 300 && statusCode >= 200;\n    this.headers = headers;\n    this.errorCode = err && err.code;\n    this.errorMessage = err && err.message;\n  }\n\n  toJSON() {\n    return {\n      items: this.items,\n      statusCode: this.statusCode,\n      success: this.success,\n      headers: this.headers,\n      errorCode: this.errorCode,\n      errorMessage: this.errorMessage,\n    };\n  }\n}\n\nexport default PaginatedResource;\n", "import { MsgPack } from 'common/types/msgpack';\nimport * as Utils from '../util/utils';\n\ntype PushChannelSubscriptionObject = {\n  channel: string;\n  deviceId?: string;\n  clientId?: string;\n};\n\nclass PushChannelSubscription {\n  /** PCS4, the channel name associated with this subscription */\n  channel!: string;\n  /** PCS2, optional, populated for subscriptions made for a specific device registration */\n  deviceId?: string;\n  /** PCS3, optional, populated for subscriptions made for a specific clientId */\n  clientId?: string;\n\n  /**\n   * Overload toJSON() to intercept JSON.stringify()\n   * @return {*}\n   */\n  toJSON(): PushChannelSubscriptionObject {\n    return {\n      channel: this.channel,\n      deviceId: this.deviceId,\n      clientId: this.clientId,\n    };\n  }\n\n  toString(): string {\n    let result = '[PushChannelSubscription';\n    if (this.channel) result += '; channel=' + this.channel;\n    if (this.deviceId) result += '; deviceId=' + this.deviceId;\n    if (this.clientId) result += '; clientId=' + this.clientId;\n    result += ']';\n    return result;\n  }\n\n  static toRequestBody = Utils.encodeBody;\n\n  static fromResponseBody(\n    body: Array<Record<string, unknown>> | Record<string, unknown>,\n    MsgPack: MsgPack | null,\n    format?: Utils.Format,\n  ): PushChannelSubscription | PushChannelSubscription[] {\n    if (format) {\n      body = Utils.decodeBody(body, MsgPack, format) as Record<string, unknown>;\n    }\n\n    if (Array.isArray(body)) {\n      return PushChannelSubscription.fromValuesArray(body);\n    } else {\n      return PushChannelSubscription.fromValues(body);\n    }\n  }\n\n  static fromValues(values: Record<string, unknown>): PushChannelSubscription {\n    return Object.assign(new PushChannelSubscription(), values);\n  }\n\n  static fromValuesArray(values: Array<Record<string, unknown>>): PushChannelSubscription[] {\n    const count = values.length,\n      result = new Array(count);\n    for (let i = 0; i < count; i++) result[i] = PushChannelSubscription.fromValues(values[i]);\n    return result;\n  }\n}\n\nexport default PushChannelSubscription;\n", "import * as Utils from '../util/utils';\nimport DeviceDetails from '../types/devicedetails';\nimport Resource from './resource';\nimport PaginatedResource, { PaginatedResult } from './paginatedresource';\nimport ErrorInfo from '../types/errorinfo';\nimport PushChannelSubscription from '../types/pushchannelsubscription';\nimport BaseClient from './baseclient';\nimport Defaults from '../util/defaults';\nimport type {\n  ActivationStateMachine,\n  DeregisterCallback,\n  LocalDeviceFactory,\n  RegisterCallback,\n} from 'plugins/push/pushactivation';\nimport Platform from 'common/platform';\nimport type { ErrCallback } from 'common/types/utils';\n\nclass Push {\n  client: BaseClient;\n  admin: Admin;\n  stateMachine?: ActivationStateMachine;\n  LocalDevice?: LocalDeviceFactory;\n\n  constructor(client: BaseClient) {\n    this.client = client;\n    this.admin = new Admin(client);\n    if (Platform.Config.push && client.options.plugins?.Push) {\n      this.stateMachine = new client.options.plugins.Push.ActivationStateMachine(client);\n      this.LocalDevice = client.options.plugins.Push.localDeviceFactory(DeviceDetails);\n    }\n  }\n\n  async activate(registerCallback?: RegisterCallback, updateFailedCallback?: ErrCallback) {\n    await new Promise<void>((resolve, reject) => {\n      if (!this.client.options.plugins?.Push) {\n        reject(Utils.createMissingPluginError('Push'));\n        return;\n      }\n      if (!this.stateMachine) {\n        reject(new ErrorInfo('This platform is not supported as a target of push notifications', 40000, 400));\n        return;\n      }\n      if (this.stateMachine.activatedCallback) {\n        reject(new ErrorInfo('Activation already in progress', 40000, 400));\n        return;\n      }\n      this.stateMachine.activatedCallback = (err: ErrorInfo) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve();\n      };\n      this.stateMachine.updateFailedCallback = updateFailedCallback;\n      this.stateMachine.handleEvent(\n        new this.client.options.plugins.Push.CalledActivate(this.stateMachine, registerCallback),\n      );\n    });\n  }\n\n  async deactivate(deregisterCallback: DeregisterCallback) {\n    await new Promise<void>((resolve, reject) => {\n      if (!this.client.options.plugins?.Push) {\n        reject(Utils.createMissingPluginError('Push'));\n        return;\n      }\n      if (!this.stateMachine) {\n        reject(new ErrorInfo('This platform is not supported as a target of push notifications', 40000, 400));\n        return;\n      }\n      if (this.stateMachine.deactivatedCallback) {\n        reject(new ErrorInfo('Deactivation already in progress', 40000, 400));\n        return;\n      }\n      this.stateMachine.deactivatedCallback = (err: ErrorInfo) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve();\n      };\n      this.stateMachine.handleEvent(\n        new this.client.options.plugins.Push.CalledDeactivate(this.stateMachine, deregisterCallback),\n      );\n    });\n  }\n}\n\nclass Admin {\n  client: BaseClient;\n  deviceRegistrations: DeviceRegistrations;\n  channelSubscriptions: ChannelSubscriptions;\n\n  constructor(client: BaseClient) {\n    this.client = client;\n    this.deviceRegistrations = new DeviceRegistrations(client);\n    this.channelSubscriptions = new ChannelSubscriptions(client);\n  }\n\n  async publish(recipient: any, payload: any): Promise<void> {\n    const client = this.client;\n    const format = client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      headers = Defaults.defaultPostHeaders(client.options, { format }),\n      params = {};\n    const body = Utils.mixin({ recipient: recipient }, payload);\n\n    Utils.mixin(headers, client.options.headers);\n\n    if (client.options.pushFullWait) Utils.mixin(params, { fullWait: 'true' });\n\n    const requestBody = Utils.encodeBody(body, client._MsgPack, format);\n    await Resource.post(client, '/push/publish', requestBody, headers, params, null, true);\n  }\n}\n\nclass DeviceRegistrations {\n  client: BaseClient;\n\n  constructor(client: BaseClient) {\n    this.client = client;\n  }\n\n  async save(device: any): Promise<DeviceDetails> {\n    const client = this.client;\n    const body = DeviceDetails.fromValues(device);\n    const format = client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      headers = Defaults.defaultPostHeaders(client.options, { format }),\n      params = {};\n\n    Utils.mixin(headers, client.options.headers);\n\n    if (client.options.pushFullWait) Utils.mixin(params, { fullWait: 'true' });\n\n    const requestBody = Utils.encodeBody(body, client._MsgPack, format);\n    const response = await Resource.put(\n      client,\n      '/push/deviceRegistrations/' + encodeURIComponent(device.id),\n      requestBody,\n      headers,\n      params,\n      null,\n      true,\n    );\n\n    return DeviceDetails.fromResponseBody(\n      response.body as Record<string, unknown>,\n      client._MsgPack,\n      response.unpacked ? undefined : format,\n    ) as DeviceDetails;\n  }\n\n  async get(deviceIdOrDetails: any): Promise<DeviceDetails> {\n    const client = this.client,\n      format = client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      headers = Defaults.defaultGetHeaders(client.options, { format }),\n      deviceId = deviceIdOrDetails.id || deviceIdOrDetails;\n\n    if (typeof deviceId !== 'string' || !deviceId.length) {\n      throw new ErrorInfo(\n        'First argument to DeviceRegistrations#get must be a deviceId string or DeviceDetails',\n        40000,\n        400,\n      );\n    }\n\n    Utils.mixin(headers, client.options.headers);\n\n    const response = await Resource.get(\n      client,\n      '/push/deviceRegistrations/' + encodeURIComponent(deviceId),\n      headers,\n      {},\n      null,\n      true,\n    );\n\n    return DeviceDetails.fromResponseBody(\n      response.body as Record<string, unknown>,\n      client._MsgPack,\n      response.unpacked ? undefined : format,\n    ) as DeviceDetails;\n  }\n\n  async list(params: any): Promise<PaginatedResult<unknown>> {\n    const client = this.client,\n      format = client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      envelope = this.client.http.supportsLinkHeaders ? undefined : format,\n      headers = Defaults.defaultGetHeaders(client.options, { format });\n\n    Utils.mixin(headers, client.options.headers);\n\n    return new PaginatedResource(client, '/push/deviceRegistrations', headers, envelope, async function (\n      body,\n      headers,\n      unpacked,\n    ) {\n      return DeviceDetails.fromResponseBody(\n        body as Record<string, unknown>[],\n        client._MsgPack,\n        unpacked ? undefined : format,\n      );\n    }).get(params);\n  }\n\n  async remove(deviceIdOrDetails: any): Promise<void> {\n    const client = this.client,\n      format = client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      headers = Defaults.defaultGetHeaders(client.options, { format }),\n      params = {},\n      deviceId = deviceIdOrDetails.id || deviceIdOrDetails;\n\n    if (typeof deviceId !== 'string' || !deviceId.length) {\n      throw new ErrorInfo(\n        'First argument to DeviceRegistrations#remove must be a deviceId string or DeviceDetails',\n        40000,\n        400,\n      );\n    }\n\n    Utils.mixin(headers, client.options.headers);\n\n    if (client.options.pushFullWait) Utils.mixin(params, { fullWait: 'true' });\n\n    await Resource['delete'](\n      client,\n      '/push/deviceRegistrations/' + encodeURIComponent(deviceId),\n      headers,\n      params,\n      null,\n      true,\n    );\n  }\n\n  async removeWhere(params: any): Promise<void> {\n    const client = this.client,\n      format = client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      headers = Defaults.defaultGetHeaders(client.options, { format });\n\n    Utils.mixin(headers, client.options.headers);\n\n    if (client.options.pushFullWait) Utils.mixin(params, { fullWait: 'true' });\n\n    await Resource['delete'](client, '/push/deviceRegistrations', headers, params, null, true);\n  }\n}\n\nclass ChannelSubscriptions {\n  client: BaseClient;\n\n  constructor(client: BaseClient) {\n    this.client = client;\n  }\n\n  async save(subscription: Record<string, unknown>): Promise<PushChannelSubscription> {\n    const client = this.client;\n    const body = PushChannelSubscription.fromValues(subscription);\n    const format = client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      headers = Defaults.defaultPostHeaders(client.options, { format }),\n      params = {};\n\n    Utils.mixin(headers, client.options.headers);\n\n    if (client.options.pushFullWait) Utils.mixin(params, { fullWait: 'true' });\n\n    const requestBody = Utils.encodeBody(body, client._MsgPack, format);\n    const response = await Resource.post(\n      client,\n      '/push/channelSubscriptions',\n      requestBody,\n      headers,\n      params,\n      null,\n      true,\n    );\n\n    return PushChannelSubscription.fromResponseBody(\n      response.body as Record<string, any>,\n      client._MsgPack,\n      response.unpacked ? undefined : format,\n    ) as PushChannelSubscription;\n  }\n\n  async list(params: any): Promise<PaginatedResult<unknown>> {\n    const client = this.client,\n      format = client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      envelope = this.client.http.supportsLinkHeaders ? undefined : format,\n      headers = Defaults.defaultGetHeaders(client.options, { format });\n\n    Utils.mixin(headers, client.options.headers);\n\n    return new PaginatedResource(client, '/push/channelSubscriptions', headers, envelope, async function (\n      body,\n      headers,\n      unpacked,\n    ) {\n      return PushChannelSubscription.fromResponseBody(\n        body as Record<string, unknown>[],\n        client._MsgPack,\n        unpacked ? undefined : format,\n      );\n    }).get(params);\n  }\n\n  async removeWhere(params: any): Promise<void> {\n    const client = this.client,\n      format = client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      headers = Defaults.defaultGetHeaders(client.options, { format });\n\n    Utils.mixin(headers, client.options.headers);\n\n    if (client.options.pushFullWait) Utils.mixin(params, { fullWait: 'true' });\n\n    await Resource['delete'](client, '/push/channelSubscriptions', headers, params, null, true);\n  }\n\n  /* ChannelSubscriptions have no unique id; removing one is equivalent to removeWhere by its properties */\n  remove = ChannelSubscriptions.prototype.removeWhere;\n\n  async listChannels(params: any): Promise<PaginatedResult<unknown>> {\n    const client = this.client,\n      format = client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      envelope = this.client.http.supportsLinkHeaders ? undefined : format,\n      headers = Defaults.defaultGetHeaders(client.options, { format });\n\n    Utils.mixin(headers, client.options.headers);\n\n    if (client.options.pushFullWait) Utils.mixin(params, { fullWait: 'true' });\n\n    return new PaginatedResource(client, '/push/channels', headers, envelope, async function (body, headers, unpacked) {\n      const parsedBody = (\n        !unpacked && format ? Utils.decodeBody(body, client._MsgPack, format) : body\n      ) as Array<string>;\n\n      for (let i = 0; i < parsedBody.length; i++) {\n        parsedBody[i] = String(parsedBody[i]);\n      }\n      return parsedBody;\n    }).get(params);\n  }\n}\n\nexport default Push;\n", "import Logger from '../util/logger';\nimport { BaseMessage, encode, decode, wireToJSON, normalizeCipherOptions, CipherOptions, strMsg } from './basemessage';\nimport * as API from '../../../../ably';\nimport * as Utils from '../util/utils';\n\nimport type { IUntypedCryptoStatic } from 'common/types/ICryptoStatic';\nimport type { Properties } from '../util/utils';\nimport type RestChannel from '../client/restchannel';\nimport type RealtimeChannel from '../client/realtimechannel';\nimport type { ChannelOptions } from '../../types/channel';\ntype Channel = RestChannel | RealtimeChannel;\n\nconst actions = ['absent', 'present', 'enter', 'leave', 'update'];\n\nexport async function fromEncoded(\n  logger: Logger,\n  Crypto: IUntypedCryptoStatic | null,\n  encoded: WirePresenceMessage,\n  inputOptions?: API.ChannelOptions,\n): Promise<PresenceMessage> {\n  const options = normalizeCipherOptions(Crypto, logger, inputOptions ?? null);\n  const wpm = WirePresenceMessage.fromValues(encoded);\n  return wpm.decode(options, logger);\n}\n\nexport async function fromEncodedArray(\n  logger: Logger,\n  Crypto: IUntypedCryptoStatic | null,\n  encodedArray: WirePresenceMessage[],\n  options?: API.ChannelOptions,\n): Promise<PresenceMessage[]> {\n  return Promise.all(\n    encodedArray.map(function (encoded) {\n      return fromEncoded(logger, Crypto, encoded, options);\n    }),\n  );\n}\n\n// these forms of the functions are used internally when we have a channel instance\n// already, so don't need to normalise channel options\nexport async function _fromEncoded(\n  encoded: Properties<WirePresenceMessage>,\n  channel: Channel,\n): Promise<PresenceMessage> {\n  return WirePresenceMessage.fromValues(encoded).decode(channel.channelOptions, channel.logger);\n}\n\nexport async function _fromEncodedArray(\n  encodedArray: Properties<WirePresenceMessage>[],\n  channel: Channel,\n): Promise<PresenceMessage[]> {\n  return Promise.all(\n    encodedArray.map(function (encoded) {\n      return _fromEncoded(encoded, channel);\n    }),\n  );\n}\n\n// for tree-shakability\nexport function fromValues(values: Properties<PresenceMessage>) {\n  return PresenceMessage.fromValues(values);\n}\n\nclass PresenceMessage extends BaseMessage {\n  action?: string;\n\n  /* Returns whether this presenceMessage is synthesized, i.e. was not actually\n   * sent by the connection (usually means a leave event sent 15s after a\n   * disconnection). This is useful because synthesized messages cannot be\n   * compared for newness by id lexicographically - RTP2b1\n   */\n  isSynthesized(): boolean {\n    if (!this.id || !this.connectionId) {\n      return true;\n    }\n    return this.id.substring(this.connectionId.length, 0) !== this.connectionId;\n  }\n\n  /* RTP2b2 */\n  parseId(): { connectionId: string; msgSerial: number; index: number } {\n    if (!this.id) throw new Error('parseId(): Presence message does not contain an id');\n    const parts = this.id.split(':');\n    return {\n      connectionId: parts[0],\n      msgSerial: parseInt(parts[1], 10),\n      index: parseInt(parts[2], 10),\n    };\n  }\n\n  async encode(options: CipherOptions): Promise<WirePresenceMessage> {\n    const res = Object.assign(new WirePresenceMessage(), this, {\n      action: actions.indexOf(this.action || 'present'),\n    });\n    return encode(res, options);\n  }\n\n  static fromValues(values: Properties<PresenceMessage>): PresenceMessage {\n    return Object.assign(new PresenceMessage(), values);\n  }\n\n  static fromValuesArray(values: Properties<PresenceMessage>[]): PresenceMessage[] {\n    return values.map((v) => PresenceMessage.fromValues(v));\n  }\n\n  static fromData(data: any): PresenceMessage {\n    if (data instanceof PresenceMessage) {\n      return data;\n    }\n    return PresenceMessage.fromValues({\n      data,\n    });\n  }\n\n  toString() {\n    return strMsg(this, 'PresenceMessage');\n  }\n}\n\nexport class WirePresenceMessage extends BaseMessage {\n  action?: number;\n\n  toJSON(...args: any[]) {\n    return wireToJSON.call(this, ...args);\n  }\n\n  static fromValues(values: Properties<WirePresenceMessage>): WirePresenceMessage {\n    return Object.assign(new WirePresenceMessage(), values);\n  }\n\n  static fromValuesArray(values: Properties<WirePresenceMessage>[]): WirePresenceMessage[] {\n    return values.map((v) => WirePresenceMessage.fromValues(v));\n  }\n\n  async decode(channelOptions: ChannelOptions, logger: Logger): Promise<PresenceMessage> {\n    const res = Object.assign(new PresenceMessage(), {\n      ...this,\n      action: actions[this.action!],\n    });\n    try {\n      await decode(res, channelOptions);\n    } catch (e) {\n      Logger.logAction(logger, Logger.LOG_ERROR, 'WirePresenceMessage.decode()', Utils.inspectError(e));\n    }\n    return res;\n  }\n\n  toString() {\n    return strMsg(this, 'WirePresenceMessage');\n  }\n}\n\nexport default PresenceMessage;\n", "import * as Utils from '../util/utils';\nimport Logger from '../util/logger';\nimport PaginatedResource, { PaginatedResult } from './paginatedresource';\nimport PresenceMessage, { WirePresenceMessage, _fromEncodedArray } from '../types/presencemessage';\nimport RestChannel from './restchannel';\nimport Defaults from '../util/defaults';\n\nclass RestPresence {\n  channel: RestChannel;\n\n  constructor(channel: RestChannel) {\n    this.channel = channel;\n  }\n\n  get logger(): Logger {\n    return this.channel.logger;\n  }\n\n  async get(params: any): Promise<PaginatedResult<PresenceMessage>> {\n    Logger.logAction(this.logger, Logger.LOG_MICRO, 'RestPresence.get()', 'channel = ' + this.channel.name);\n    const client = this.channel.client,\n      format = client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      envelope = this.channel.client.http.supportsLinkHeaders ? undefined : format,\n      headers = Defaults.defaultGetHeaders(client.options, { format });\n\n    Utils.mixin(headers, client.options.headers);\n\n    return new PaginatedResource(\n      client,\n      this.channel.client.rest.presenceMixin.basePath(this),\n      headers,\n      envelope,\n      async (body, headers, unpacked) => {\n        const decoded = (\n          unpacked ? body : Utils.decodeBody(body, client._MsgPack, format)\n        ) as Utils.Properties<WirePresenceMessage>[];\n\n        return _fromEncodedArray(decoded, this.channel);\n      },\n    ).get(params);\n  }\n\n  async history(params: any): Promise<PaginatedResult<PresenceMessage>> {\n    Logger.logAction(this.logger, Logger.LOG_MICRO, 'RestPresence.history()', 'channel = ' + this.channel.name);\n    return this.channel.client.rest.presenceMixin.history(this, params);\n  }\n}\n\nexport default RestPresence;\n", "import Logger from '../util/logger';\nimport {\n  BaseMessage,\n  encode,\n  decode,\n  wireToJSON,\n  normalizeCipherOptions,\n  EncodingDecodingContext,\n  CipherOptions,\n  strMsg,\n} from './basemessage';\nimport * as Utils from '../util/utils';\nimport * as API from '../../../../ably';\n\nimport type { IUntypedCryptoStatic } from 'common/types/ICryptoStatic';\nimport type { ChannelOptions } from '../../types/channel';\nimport type { Properties } from '../util/utils';\nimport type RestChannel from '../client/restchannel';\nimport type RealtimeChannel from '../client/realtimechannel';\nimport type ErrorInfo from './errorinfo';\ntype Channel = RestChannel | RealtimeChannel;\n\nconst actions: API.MessageAction[] = ['message.create', 'message.update', 'message.delete', 'meta', 'message.summary'];\n\nfunction stringifyAction(action: number | undefined): string {\n  return actions[action || 0] || 'unknown';\n}\n\nfunction getMessageSize(msg: WireMessage) {\n  let size = 0;\n  if (msg.name) {\n    size += msg.name.length;\n  }\n  if (msg.clientId) {\n    size += msg.clientId.length;\n  }\n  if (msg.extras) {\n    size += JSON.stringify(msg.extras).length;\n  }\n  if (msg.data) {\n    size += Utils.dataSizeBytes(msg.data);\n  }\n  return size;\n}\n\nexport async function fromEncoded(\n  logger: Logger,\n  Crypto: IUntypedCryptoStatic | null,\n  encoded: Properties<WireMessage>,\n  inputOptions?: API.ChannelOptions,\n): Promise<Message> {\n  const options = normalizeCipherOptions(Crypto, logger, inputOptions ?? null);\n  const wm = WireMessage.fromValues(encoded);\n  return wm.decode(options, logger);\n}\n\nexport async function fromEncodedArray(\n  logger: Logger,\n  Crypto: IUntypedCryptoStatic | null,\n  encodedArray: Array<WireMessage>,\n  options?: API.ChannelOptions,\n): Promise<Message[]> {\n  return Promise.all(\n    encodedArray.map(function (encoded) {\n      return fromEncoded(logger, Crypto, encoded, options);\n    }),\n  );\n}\n\n// these forms of the functions are used internally when we have a channel instance\n// already, so don't need to normalise channel options\nexport async function _fromEncoded(encoded: Properties<WireMessage>, channel: Channel): Promise<Message> {\n  const wm = WireMessage.fromValues(encoded);\n  return wm.decode(channel.channelOptions, channel.logger);\n}\n\nexport async function _fromEncodedArray(encodedArray: Properties<WireMessage>[], channel: Channel): Promise<Message[]> {\n  return Promise.all(\n    encodedArray.map(function (encoded) {\n      return _fromEncoded(encoded, channel);\n    }),\n  );\n}\n\nexport async function encodeArray(messages: Array<Message>, options: CipherOptions): Promise<Array<WireMessage>> {\n  return Promise.all(messages.map((message) => message.encode(options)));\n}\n\nexport const serialize = Utils.encodeBody;\n\n/* This should be called on encode()d (and encrypt()d) Messages (as it\n * assumes the data is a string or buffer) */\nexport function getMessagesSize(messages: WireMessage[]): number {\n  let msg,\n    total = 0;\n  for (let i = 0; i < messages.length; i++) {\n    msg = messages[i];\n    total += msg.size || (msg.size = getMessageSize(msg));\n  }\n  return total;\n}\n\nclass Message extends BaseMessage {\n  name?: string;\n  connectionKey?: string;\n  action?: API.MessageAction;\n  serial?: string;\n  refSerial?: string;\n  refType?: string;\n  createdAt?: number;\n  version?: string;\n  operation?: API.Operation;\n  summary?: any; // TODO improve typings after summary structure is finalised\n\n  expandFields() {\n    if (this.action === 'message.create') {\n      // TM2k\n      if (this.version && !this.serial) {\n        this.serial = this.version;\n      }\n      // TM2o\n      if (this.timestamp && !this.createdAt) {\n        this.createdAt = this.timestamp;\n      }\n    }\n  }\n\n  async encode(options: CipherOptions): Promise<WireMessage> {\n    const res = Object.assign(new WireMessage(), this, {\n      action: actions.indexOf(this.action || 'message.create'),\n    });\n    return encode(res, options);\n  }\n\n  static fromValues(values: Properties<Message>): Message {\n    return Object.assign(new Message(), values);\n  }\n\n  static fromValuesArray(values: Properties<Message>[]): Message[] {\n    return values.map((v) => Message.fromValues(v));\n  }\n\n  toString() {\n    return strMsg(this, 'Message');\n  }\n}\n\nexport class WireMessage extends BaseMessage {\n  name?: string;\n  connectionKey?: string;\n  action?: number;\n  serial?: string;\n  refSerial?: string;\n  refType?: string;\n  createdAt?: number;\n  version?: string;\n  operation?: API.Operation;\n  summary?: any;\n\n  // Overload toJSON() to intercept JSON.stringify()\n  toJSON(...args: any[]) {\n    return wireToJSON.call(this, ...args);\n  }\n\n  static fromValues(values: Properties<WireMessage>): WireMessage {\n    return Object.assign(new WireMessage(), values);\n  }\n\n  static fromValuesArray(values: Properties<WireMessage>[]): WireMessage[] {\n    return values.map((v) => WireMessage.fromValues(v));\n  }\n\n  // for contexts where some decoding errors need to be handled specially by the caller\n  async decodeWithErr(\n    inputContext: CipherOptions | EncodingDecodingContext | ChannelOptions,\n    logger: Logger,\n  ): Promise<{ decoded: Message; err: ErrorInfo | undefined }> {\n    const res: Message = Object.assign(new Message(), {\n      ...this,\n      action: stringifyAction(this.action),\n    });\n    let err: ErrorInfo | undefined;\n    try {\n      await decode(res, inputContext);\n    } catch (e) {\n      Logger.logAction(logger, Logger.LOG_ERROR, 'WireMessage.decode()', Utils.inspectError(e));\n      err = e as ErrorInfo;\n    }\n    res.expandFields();\n    return { decoded: res, err: err };\n  }\n\n  async decode(\n    inputContext: CipherOptions | EncodingDecodingContext | ChannelOptions,\n    logger: Logger,\n  ): Promise<Message> {\n    const { decoded } = await this.decodeWithErr(inputContext, logger);\n    return decoded;\n  }\n\n  toString() {\n    return strMsg(this, 'WireMessage');\n  }\n}\n\nexport default Message;\n", "import * as Utils from '../util/utils';\nimport Logger from '../util/logger';\nimport RestPresence from './restpresence';\nimport Message, {\n  serialize as serializeMessage,\n  getMessagesSize,\n  encodeArray as encodeMessagesArray,\n} from '../types/message';\nimport { CipherOptions } from '../types/basemessage';\nimport ErrorInfo from '../types/errorinfo';\nimport { PaginatedResult } from './paginatedresource';\nimport Resource from './resource';\nimport { ChannelOptions } from '../../types/channel';\nimport BaseRest from './baseclient';\nimport * as API from '../../../../ably';\nimport Defaults, { normaliseChannelOptions } from '../util/defaults';\nimport { RestHistoryParams } from './restchannelmixin';\nimport { RequestBody } from 'common/types/http';\nimport type { PushChannel } from 'plugins/push';\nimport type RestAnnotations from './restannotations';\n\nconst MSG_ID_ENTROPY_BYTES = 9;\n\nfunction allEmptyIds(messages: Array<Message>) {\n  return messages.every(function (message: Message) {\n    return !message.id;\n  });\n}\n\nclass RestChannel {\n  client: BaseRest;\n  name: string;\n  presence: RestPresence;\n  channelOptions: ChannelOptions;\n  _push?: PushChannel;\n  private _annotations: RestAnnotations | null = null;\n  get annotations(): RestAnnotations {\n    if (!this._annotations) {\n      Utils.throwMissingPluginError('Annotations');\n    }\n    return this._annotations;\n  }\n\n  constructor(client: BaseRest, name: string, channelOptions?: ChannelOptions) {\n    Logger.logAction(client.logger, Logger.LOG_MINOR, 'RestChannel()', 'started; name = ' + name);\n    this.name = name;\n    this.client = client;\n    this.presence = new RestPresence(this);\n    this.channelOptions = normaliseChannelOptions(client._Crypto ?? null, this.logger, channelOptions);\n    if (client.options.plugins?.Push) {\n      this._push = new client.options.plugins.Push.PushChannel(this);\n    }\n    if (client._Annotations) {\n      this._annotations = new client._Annotations.RestAnnotations(this);\n    }\n  }\n\n  get push() {\n    if (!this._push) {\n      Utils.throwMissingPluginError('Push');\n    }\n    return this._push;\n  }\n\n  get logger(): Logger {\n    return this.client.logger;\n  }\n\n  setOptions(options?: ChannelOptions): void {\n    this.channelOptions = normaliseChannelOptions(this.client._Crypto ?? null, this.logger, options);\n  }\n\n  async history(params: RestHistoryParams | null): Promise<PaginatedResult<Message>> {\n    Logger.logAction(this.logger, Logger.LOG_MICRO, 'RestChannel.history()', 'channel = ' + this.name);\n    return this.client.rest.channelMixin.history(this, params);\n  }\n\n  async publish(...args: any[]): Promise<void> {\n    const first = args[0],\n      second = args[1];\n    let messages: Array<Message>;\n    let params: any;\n\n    if (typeof first === 'string' || first === null) {\n      /* (name, data, ...) */\n      messages = [Message.fromValues({ name: first, data: second })];\n      params = args[2];\n    } else if (Utils.isObject(first)) {\n      messages = [Message.fromValues(first)];\n      params = args[1];\n    } else if (Array.isArray(first)) {\n      messages = Message.fromValuesArray(first);\n      params = args[1];\n    } else {\n      throw new ErrorInfo(\n        'The single-argument form of publish() expects a message object or an array of message objects',\n        40013,\n        400,\n      );\n    }\n\n    if (!params) {\n      /* No params supplied */\n      params = {};\n    }\n\n    const client = this.client,\n      options = client.options,\n      format = options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      idempotentRestPublishing = client.options.idempotentRestPublishing,\n      headers = Defaults.defaultPostHeaders(client.options, { format });\n\n    Utils.mixin(headers, options.headers);\n\n    if (idempotentRestPublishing && allEmptyIds(messages)) {\n      const msgIdBase = await Utils.randomString(MSG_ID_ENTROPY_BYTES);\n      messages.forEach(function (message, index) {\n        message.id = msgIdBase + ':' + index.toString();\n      });\n    }\n\n    const wireMessages = await encodeMessagesArray(messages, this.channelOptions as CipherOptions);\n\n    /* RSL1i */\n    const size = getMessagesSize(wireMessages),\n      maxMessageSize = options.maxMessageSize;\n    if (size > maxMessageSize) {\n      throw new ErrorInfo(\n        `Maximum size of messages that can be published at once exceeded (was ${size} bytes; limit is ${maxMessageSize} bytes)`,\n        40009,\n        400,\n      );\n    }\n\n    await this._publish(serializeMessage(wireMessages, client._MsgPack, format), headers, params);\n  }\n\n  async _publish(requestBody: RequestBody | null, headers: Record<string, string>, params: any): Promise<void> {\n    await Resource.post(\n      this.client,\n      this.client.rest.channelMixin.basePath(this) + '/messages',\n      requestBody,\n      headers,\n      params,\n      null,\n      true,\n    );\n  }\n\n  async status(): Promise<API.ChannelDetails> {\n    return this.client.rest.channelMixin.status(this);\n  }\n}\n\nexport default RestChannel;\n", "type StatsValues = {\n  entries?: Partial<Record<string, number>>;\n  schema?: string;\n  appId?: string;\n  inProgress?: never;\n  unit?: never;\n  intervalId?: never;\n};\n\nclass Stats {\n  entries?: Partial<Record<string, number>>;\n  schema?: string;\n  appId?: string;\n  inProgress?: never;\n  unit?: never;\n  intervalId?: never;\n\n  constructor(values?: StatsValues) {\n    this.entries = (values && values.entries) || undefined;\n    this.schema = (values && values.schema) || undefined;\n    this.appId = (values && values.appId) || undefined;\n    this.inProgress = (values && values.inProgress) || undefined;\n    this.unit = (values && values.unit) || undefined;\n    this.intervalId = (values && values.intervalId) || undefined;\n  }\n\n  static fromValues(values: StatsValues): Stats {\n    return new Stats(values);\n  }\n}\n\nexport default Stats;\n", "import * as API from '../../../../ably';\nimport RestChannel from './restchannel';\nimport RealtimeChannel from './realtimechannel';\nimport * as Utils from '../util/utils';\nimport Message, { WireMessage, _fromEncodedArray } from '../types/message';\nimport Defaults from '../util/defaults';\nimport PaginatedResource, { PaginatedResult } from './paginatedresource';\nimport Resource from './resource';\n\nexport interface RestHistoryParams {\n  start?: number;\n  end?: number;\n  direction?: string;\n  limit?: number;\n}\n\nexport class RestChannelMixin {\n  static basePath(channel: RestChannel | RealtimeChannel) {\n    return '/channels/' + encodeURIComponent(channel.name);\n  }\n\n  static history(\n    channel: RestChannel | RealtimeChannel,\n    params: RestHistoryParams | null,\n  ): Promise<PaginatedResult<Message>> {\n    const client = channel.client,\n      format = client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      envelope = channel.client.http.supportsLinkHeaders ? undefined : format,\n      headers = Defaults.defaultGetHeaders(client.options, { format });\n\n    Utils.mixin(headers, client.options.headers);\n\n    return new PaginatedResource(client, this.basePath(channel) + '/messages', headers, envelope, async function (\n      body,\n      headers,\n      unpacked,\n    ) {\n      const decoded = (\n        unpacked ? body : Utils.decodeBody(body, client._MsgPack, format)\n      ) as Utils.Properties<WireMessage>[];\n\n      return _fromEncodedArray(decoded, channel);\n    }).get(params as Record<string, unknown>);\n  }\n\n  static async status(channel: RestChannel | RealtimeChannel): Promise<API.ChannelDetails> {\n    const format = channel.client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json;\n    const headers = Defaults.defaultPostHeaders(channel.client.options, { format });\n\n    const response = await Resource.get<API.ChannelDetails>(\n      channel.client,\n      this.basePath(channel),\n      headers,\n      {},\n      format,\n      true,\n    );\n\n    return response.body!;\n  }\n}\n", "import RestPresence from './restpresence';\nimport RealtimePresence from './realtimepresence';\nimport * as Utils from '../util/utils';\nimport Defaults from '../util/defaults';\nimport PaginatedResource, { PaginatedResult } from './paginatedresource';\nimport PresenceMessage, { WirePresenceMessage, _fromEncodedArray } from '../types/presencemessage';\nimport { RestChannelMixin } from './restchannelmixin';\n\nexport class RestPresenceMixin {\n  static basePath(presence: RestPresence | RealtimePresence) {\n    return RestChannelMixin.basePath(presence.channel) + '/presence';\n  }\n\n  static async history(\n    presence: RestPresence | RealtimePresence,\n    params: any,\n  ): Promise<PaginatedResult<PresenceMessage>> {\n    const client = presence.channel.client,\n      format = client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      envelope = presence.channel.client.http.supportsLinkHeaders ? undefined : format,\n      headers = Defaults.defaultGetHeaders(client.options, { format });\n\n    Utils.mixin(headers, client.options.headers);\n\n    return new PaginatedResource(\n      client,\n      this.basePath(presence) + '/history',\n      headers,\n      envelope,\n      async (body, headers, unpacked) => {\n        const decoded = (\n          unpacked ? body : Utils.decodeBody(body, client._MsgPack, format)\n        ) as Utils.Properties<WirePresenceMessage>[];\n\n        return _fromEncodedArray(decoded, presence.channel);\n      },\n    ).get(params);\n  }\n}\n", "import * as Utils from '../util/utils';\nimport Defaults from '../util/defaults';\nimport Push from './push';\nimport PaginatedResource, { HttpPaginatedResponse, PaginatedResult } from './paginatedresource';\nimport RestChannel from './restchannel';\nimport ErrorInfo from '../types/errorinfo';\nimport Stats from '../types/stats';\nimport HttpMethods from '../../constants/HttpMethods';\nimport { ChannelOptions } from '../../types/channel';\nimport { RequestBody, RequestParams } from '../../types/http';\nimport * as API from '../../../../ably';\nimport Resource from './resource';\n\nimport Platform from '../../platform';\nimport BaseClient from './baseclient';\nimport { useTokenAuth } from './auth';\nimport { RestChannelMixin } from './restchannelmixin';\nimport { RestPresenceMixin } from './restpresencemixin';\nimport DeviceDetails from '../types/devicedetails';\nimport PushChannelSubscription from '../types/pushchannelsubscription';\n\ntype BatchResult<T> = API.BatchResult<T>;\n\ntype BatchPublishSpec = API.BatchPublishSpec;\ntype BatchPublishSuccessResult = API.BatchPublishSuccessResult;\ntype BatchPublishFailureResult = API.BatchPublishFailureResult;\ntype BatchPublishResult = BatchResult<BatchPublishSuccessResult | BatchPublishFailureResult>;\ntype BatchPresenceSuccessResult = API.BatchPresenceSuccessResult;\ntype BatchPresenceFailureResult = API.BatchPresenceFailureResult;\ntype BatchPresenceResult = BatchResult<BatchPresenceSuccessResult | BatchPresenceFailureResult>;\n\ntype TokenRevocationTargetSpecifier = API.TokenRevocationTargetSpecifier;\ntype TokenRevocationOptions = API.TokenRevocationOptions;\ntype TokenRevocationSuccessResult = API.TokenRevocationSuccessResult;\ntype TokenRevocationFailureResult = API.TokenRevocationFailureResult;\ntype TokenRevocationResult = BatchResult<TokenRevocationSuccessResult | TokenRevocationFailureResult>;\n\nexport class Rest {\n  private readonly client: BaseClient;\n  readonly channels: Channels;\n  readonly push: Push;\n\n  readonly channelMixin = RestChannelMixin;\n  readonly presenceMixin = RestPresenceMixin;\n\n  // exposed for plugins but shouldn't be bundled with minimal realtime\n  Resource = Resource;\n  PaginatedResource = PaginatedResource;\n  DeviceDetails = DeviceDetails;\n  PushChannelSubscription = PushChannelSubscription;\n\n  constructor(client: BaseClient) {\n    this.client = client;\n    this.channels = new Channels(this.client);\n    this.push = new Push(this.client);\n  }\n\n  async stats(params: RequestParams): Promise<PaginatedResult<Stats>> {\n    const headers = Defaults.defaultGetHeaders(this.client.options),\n      format = this.client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      envelope = this.client.http.supportsLinkHeaders ? undefined : format;\n\n    Utils.mixin(headers, this.client.options.headers);\n\n    return new PaginatedResource(this.client, '/stats', headers, envelope, function (body, headers, unpacked) {\n      const statsValues = unpacked ? body : JSON.parse(body as string);\n      for (let i = 0; i < statsValues.length; i++) statsValues[i] = Stats.fromValues(statsValues[i]);\n      return statsValues;\n    }).get(params as Record<string, string>);\n  }\n\n  async time(params?: RequestParams): Promise<number> {\n    const headers = Defaults.defaultGetHeaders(this.client.options);\n    if (this.client.options.headers) Utils.mixin(headers, this.client.options.headers);\n    const timeUri = (host: string) => {\n      return this.client.baseUri(host) + '/time';\n    };\n\n    let { error, body, unpacked } = await this.client.http.do(\n      HttpMethods.Get,\n      timeUri,\n      headers,\n      null,\n      params as RequestParams,\n    );\n\n    if (error) {\n      throw error;\n    }\n    if (!unpacked) body = JSON.parse(body as string);\n    const time = (body as number[])[0];\n    if (!time) {\n      throw new ErrorInfo('Internal error (unexpected result type from GET /time)', 50000, 500);\n    }\n    /* calculate time offset only once for this device by adding to the prototype */\n    this.client.serverTimeOffset = time - Date.now();\n    return time;\n  }\n\n  async request(\n    method: string,\n    path: string,\n    version: number,\n    params: RequestParams,\n    body: unknown,\n    customHeaders: Record<string, string>,\n  ): Promise<HttpPaginatedResponse<unknown>> {\n    const [encoder, decoder, format] = (() => {\n      if (this.client.options.useBinaryProtocol) {\n        if (!this.client._MsgPack) {\n          Utils.throwMissingPluginError('MsgPack');\n        }\n        return [this.client._MsgPack.encode, this.client._MsgPack.decode, Utils.Format.msgpack];\n      } else {\n        return [JSON.stringify, JSON.parse, Utils.Format.json];\n      }\n    })();\n    const envelope = this.client.http.supportsLinkHeaders ? undefined : format;\n    params = params || {};\n    const _method = method.toLowerCase() as HttpMethods;\n    const headers =\n      _method == 'get'\n        ? Defaults.defaultGetHeaders(this.client.options, { format, protocolVersion: version })\n        : Defaults.defaultPostHeaders(this.client.options, { format, protocolVersion: version });\n\n    if (typeof body !== 'string') {\n      body = encoder(body) ?? null;\n    }\n    Utils.mixin(headers, this.client.options.headers);\n    if (customHeaders) {\n      Utils.mixin(headers, customHeaders);\n    }\n    const paginatedResource = new PaginatedResource(\n      this.client,\n      path,\n      headers,\n      envelope,\n      async function (resbody, headers, unpacked) {\n        return Utils.ensureArray(unpacked ? resbody : decoder(resbody as string & Buffer));\n      },\n      /* useHttpPaginatedResponse: */ true,\n    );\n\n    if (!Platform.Http.methods.includes(_method)) {\n      throw new ErrorInfo('Unsupported method ' + _method, 40500, 405);\n    }\n\n    if (Platform.Http.methodsWithBody.includes(_method)) {\n      return paginatedResource[_method as HttpMethods.Post](params, body as RequestBody) as Promise<\n        HttpPaginatedResponse<unknown>\n      >;\n    } else {\n      return paginatedResource[_method as HttpMethods.Get | HttpMethods.Delete](params) as Promise<\n        HttpPaginatedResponse<unknown>\n      >;\n    }\n  }\n\n  async batchPublish<T extends BatchPublishSpec | BatchPublishSpec[]>(\n    specOrSpecs: T,\n  ): Promise<T extends BatchPublishSpec ? BatchPublishResult : BatchPublishResult[]> {\n    let requestBodyDTO: BatchPublishSpec[];\n    let singleSpecMode: boolean;\n    if (Array.isArray(specOrSpecs)) {\n      requestBodyDTO = specOrSpecs;\n      singleSpecMode = false;\n    } else {\n      requestBodyDTO = [specOrSpecs];\n      singleSpecMode = true;\n    }\n\n    const format = this.client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      headers = Defaults.defaultPostHeaders(this.client.options, { format });\n\n    if (this.client.options.headers) Utils.mixin(headers, this.client.options.headers);\n\n    const requestBody = Utils.encodeBody(requestBodyDTO, this.client._MsgPack, format);\n\n    const response = await Resource.post(this.client, '/messages', requestBody, headers, {}, null, true);\n\n    const batchResults = (\n      response.unpacked ? response.body : Utils.decodeBody(response.body, this.client._MsgPack, format)\n    ) as BatchPublishResult[];\n\n    // I don't love the below type assertions but not sure how to avoid them\n    if (singleSpecMode) {\n      return batchResults[0] as T extends BatchPublishSpec ? BatchPublishResult : BatchPublishResult[];\n    } else {\n      return batchResults as T extends BatchPublishSpec ? BatchPublishResult : BatchPublishResult[];\n    }\n  }\n\n  async batchPresence(channels: string[]): Promise<BatchPresenceResult> {\n    const format = this.client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      headers = Defaults.defaultPostHeaders(this.client.options, { format });\n\n    if (this.client.options.headers) Utils.mixin(headers, this.client.options.headers);\n\n    const channelsParam = channels.join(',');\n\n    const response = await Resource.get(this.client, '/presence', headers, { channels: channelsParam }, null, true);\n\n    return (\n      response.unpacked ? response.body : Utils.decodeBody(response.body, this.client._MsgPack, format)\n    ) as BatchPresenceResult;\n  }\n\n  async revokeTokens(\n    specifiers: TokenRevocationTargetSpecifier[],\n    options?: TokenRevocationOptions,\n  ): Promise<TokenRevocationResult> {\n    if (useTokenAuth(this.client.options)) {\n      throw new ErrorInfo('Cannot revoke tokens when using token auth', 40162, 401);\n    }\n\n    const keyName = this.client.options.keyName!;\n\n    let resolvedOptions = options ?? {};\n\n    const requestBodyDTO = {\n      targets: specifiers.map((specifier) => `${specifier.type}:${specifier.value}`),\n      ...resolvedOptions,\n    };\n\n    const format = this.client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      headers = Defaults.defaultPostHeaders(this.client.options, { format });\n\n    if (this.client.options.headers) Utils.mixin(headers, this.client.options.headers);\n\n    const requestBody = Utils.encodeBody(requestBodyDTO, this.client._MsgPack, format);\n\n    const response = await Resource.post(\n      this.client,\n      `/keys/${keyName}/revokeTokens`,\n      requestBody,\n      headers,\n      {},\n      null,\n      true,\n    );\n\n    return (\n      response.unpacked ? response.body : Utils.decodeBody(response.body, this.client._MsgPack, format)\n    ) as TokenRevocationResult;\n  }\n}\n\nclass Channels {\n  client: BaseClient;\n  // RSN2\n  all: Record<string, RestChannel>;\n\n  constructor(client: BaseClient) {\n    this.client = client;\n    this.all = Object.create(null);\n  }\n\n  get(name: string, channelOptions?: ChannelOptions) {\n    name = String(name);\n    let channel = this.all[name];\n    if (!channel) {\n      this.all[name] = channel = new RestChannel(this.client, name, channelOptions);\n    } else if (channelOptions) {\n      channel.setOptions(channelOptions);\n    }\n\n    return channel;\n  }\n\n  /* Included to support certain niche use-cases; most users should ignore this.\n   * Please do not use this unless you know what you're doing */\n  release(name: string) {\n    delete this.all[String(name)];\n  }\n}\n", "import BaseClient from './baseclient';\nimport ClientOptions from '../../types/ClientOptions';\nimport { Rest } from './rest';\nimport Defaults from '../util/defaults';\nimport Logger from '../util/logger';\n\n/**\n `BaseRest` is an export of the tree-shakable version of the SDK, and acts as the base class for the `DefaultRest` class exported by the non tree-shakable version.\n\n It always includes the `Rest` plugin.\n */\nexport class BaseRest extends BaseClient {\n  /*\n   * The public typings declare that this only accepts an object, but since we want to emit a good error message in the case where a non-TypeScript user does one of these things:\n   *\n   * 1. passes a string (which is quite likely if they\u2019re e.g. migrating from the default variant to the modular variant)\n   * 2. passes no argument at all\n   *\n   * tell the compiler that these cases are possible so that it forces us to handle them.\n   */\n  constructor(options?: ClientOptions | string) {\n    super(Defaults.objectifyOptions(options, false, 'BaseRest', Logger.defaultLogger, { Rest }));\n  }\n}\n", "import { Rest } from './rest';\r\nimport { IUntypedCryptoStatic } from '../../types/ICryptoStatic';\r\nimport { MsgPack } from 'common/types/msgpack';\r\nimport RealtimePresence from './realtimepresence';\r\nimport RealtimeAnnotations from './realtimeannotations';\r\nimport RestAnnotations from './restannotations';\r\nimport XHRRequest from 'platform/web/lib/http/request/xhrrequest';\r\nimport fetchRequest from 'platform/web/lib/http/request/fetchrequest';\r\nimport { FilteredSubscriptions } from './filteredsubscriptions';\r\nimport PresenceMessage, { WirePresenceMessage } from '../types/presencemessage';\r\nimport Annotation, { WireAnnotation } from '../types/annotation';\r\nimport { TransportCtor } from '../transport/transport';\r\nimport type * as PushPlugin from 'plugins/push';\r\nimport type * as ObjectsPlugin from 'plugins/objects';\r\n\r\nexport interface PresenceMessagePlugin {\r\n  PresenceMessage: typeof PresenceMessage;\r\n  WirePresenceMessage: typeof WirePresenceMessage;\r\n}\r\n\r\nexport type RealtimePresencePlugin = PresenceMessagePlugin & {\r\n  RealtimePresence: typeof RealtimePresence;\r\n};\r\n\r\nexport type AnnotationsPlugin = {\r\n  Annotation: typeof Annotation;\r\n  WireAnnotation: typeof WireAnnotation;\r\n  RealtimeAnnotations: typeof RealtimeAnnotations;\r\n  RestAnnotations: typeof RestAnnotations;\r\n};\r\n\r\nexport interface ModularPlugins {\r\n  Rest?: typeof Rest;\r\n  Crypto?: IUntypedCryptoStatic;\r\n  MsgPack?: MsgPack;\r\n  RealtimePresence?: RealtimePresencePlugin;\r\n  Annotations?: AnnotationsPlugin;\r\n  WebSocketTransport?: TransportCtor;\r\n  XHRPolling?: TransportCtor;\r\n  XHRRequest?: typeof XHRRequest;\r\n  FetchRequest?: typeof fetchRequest;\r\n  MessageInteractions?: typeof FilteredSubscriptions;\r\n  Push?: typeof PushPlugin;\r\n  Objects?: typeof ObjectsPlugin; // PC5, PT2b\r\n}\r\n\r\nexport const allCommonModularPlugins: ModularPlugins = { Rest };\r\n", "import Message, { WireMessage, fromEncoded, fromEncodedArray } from './message';\nimport * as API from '../../../../ably';\nimport Platform from 'common/platform';\nimport Logger from '../util/logger';\nimport type { Properties } from '../util/utils';\n\n/**\n `DefaultMessage` is the class returned by `DefaultRest` and `DefaultRealtime`\u2019s `Message` static property. It introduces the static methods described in the `MessageStatic` interface of the public API of the non tree-shakable version of the library.\n */\nexport class DefaultMessage extends Message {\n  static async fromEncoded(encoded: unknown, inputOptions?: API.ChannelOptions): Promise<Message> {\n    return fromEncoded(Logger.defaultLogger, Platform.Crypto, encoded as WireMessage, inputOptions);\n  }\n\n  static async fromEncodedArray(encodedArray: Array<unknown>, options?: API.ChannelOptions): Promise<Message[]> {\n    return fromEncodedArray(Logger.defaultLogger, Platform.Crypto, encodedArray as WireMessage[], options);\n  }\n\n  static fromValues(values: Properties<Message>): Message {\n    return Message.fromValues(values);\n  }\n}\n", "import * as API from '../../../../ably';\nimport Logger from '../util/logger';\nimport PresenceMessage, { fromEncoded, fromEncodedArray, WirePresenceMessage } from './presencemessage';\nimport Platform from 'common/platform';\nimport type { Properties } from '../util/utils';\n\n/**\n `DefaultPresenceMessage` is the class returned by `DefaultRest` and `DefaultRealtime`\u2019s `PresenceMessage` static property. It introduces the static methods described in the `PresenceMessageStatic` interface of the public API of the non tree-shakable version of the library.\n */\nexport class DefaultPresenceMessage extends PresenceMessage {\n  static async fromEncoded(encoded: unknown, inputOptions?: API.ChannelOptions): Promise<PresenceMessage> {\n    return fromEncoded(Logger.defaultLogger, Platform.Crypto, encoded as WirePresenceMessage, inputOptions);\n  }\n\n  static async fromEncodedArray(\n    encodedArray: Array<unknown>,\n    options?: API.ChannelOptions,\n  ): Promise<PresenceMessage[]> {\n    return fromEncodedArray(Logger.defaultLogger, Platform.Crypto, encodedArray as WirePresenceMessage[], options);\n  }\n\n  static fromValues(values: Properties<PresenceMessage>): PresenceMessage {\n    return PresenceMessage.fromValues(values);\n  }\n}\n", "import Logger from '../util/logger';\nimport { BaseMessage, encode, decode, wireToJSON, strMsg } from './basemessage';\nimport * as API from '../../../../ably';\nimport * as Utils from '../util/utils';\n\nimport type { Properties } from '../util/utils';\nimport type RestChannel from '../client/restchannel';\nimport type RealtimeChannel from '../client/realtimechannel';\nimport type { ChannelOptions } from '../../types/channel';\ntype Channel = RestChannel | RealtimeChannel;\n\nconst actions = ['annotation.create', 'annotation.delete'];\n\nexport async function fromEncoded(\n  logger: Logger,\n  encoded: WireAnnotation,\n  options?: API.ChannelOptions,\n): Promise<Annotation> {\n  const wa = WireAnnotation.fromValues(encoded);\n  return wa.decode(options || {}, logger);\n}\n\nexport async function fromEncodedArray(\n  logger: Logger,\n  encodedArray: WireAnnotation[],\n  options?: API.ChannelOptions,\n): Promise<Annotation[]> {\n  return Promise.all(\n    encodedArray.map(function (encoded) {\n      return fromEncoded(logger, encoded, options);\n    }),\n  );\n}\n\n// these forms of the functions are used internally when we have a channel instance\n// already, so don't need to normalise channel options\nexport async function _fromEncoded(encoded: Properties<WireAnnotation>, channel: Channel): Promise<Annotation> {\n  return WireAnnotation.fromValues(encoded).decode(channel.channelOptions, channel.logger);\n}\n\nexport async function _fromEncodedArray(\n  encodedArray: Properties<WireAnnotation>[],\n  channel: Channel,\n): Promise<Annotation[]> {\n  return Promise.all(\n    encodedArray.map(function (encoded) {\n      return _fromEncoded(encoded, channel);\n    }),\n  );\n}\n\n// for tree-shakability\nexport function fromValues(values: Properties<Annotation>) {\n  return Annotation.fromValues(values);\n}\n\nclass Annotation extends BaseMessage {\n  action?: API.AnnotationAction;\n  serial?: string;\n  messageSerial?: string;\n  type?: string;\n  name?: string;\n  count?: number;\n\n  async encode(): Promise<WireAnnotation> {\n    const res = Object.assign(new WireAnnotation(), this, {\n      action: actions.indexOf(this.action || 'annotation.create'),\n    });\n    // note: we do not pass cipheroptions/channeloptions here as annotations are not\n    // encrypted (as the data needs to be parsed by the server for summarisation)\n    return encode(res, {});\n  }\n\n  static fromValues(values: Properties<Annotation>): Annotation {\n    return Object.assign(new Annotation(), values);\n  }\n\n  static fromValuesArray(values: Properties<Annotation>[]): Annotation[] {\n    return values.map((v) => Annotation.fromValues(v));\n  }\n\n  toString() {\n    return strMsg(this, 'Annotation');\n  }\n}\n\nexport class WireAnnotation extends BaseMessage {\n  action?: number;\n  serial?: string;\n  messageSerial?: string;\n  type?: string;\n  name?: string;\n  count?: number;\n\n  toJSON(...args: any[]) {\n    return wireToJSON.call(this, ...args);\n  }\n\n  static fromValues(values: Properties<WireAnnotation>): WireAnnotation {\n    return Object.assign(new WireAnnotation(), values);\n  }\n\n  static fromValuesArray(values: Properties<WireAnnotation>[]): WireAnnotation[] {\n    return values.map((v) => WireAnnotation.fromValues(v));\n  }\n\n  async decode(channelOptions: ChannelOptions, logger: Logger): Promise<Annotation> {\n    const res = Object.assign(new Annotation(), {\n      ...this,\n      action: actions[this.action!],\n    });\n    try {\n      await decode(res, channelOptions);\n    } catch (e) {\n      Logger.logAction(logger, Logger.LOG_ERROR, 'WireAnnotation.decode()', Utils.inspectError(e));\n    }\n    return res;\n  }\n\n  toString() {\n    return strMsg(this, 'WireAnnotation');\n  }\n}\n\nexport default Annotation;\n", "import * as API from '../../../../ably';\nimport Logger from '../util/logger';\nimport Annotation, { fromEncoded, fromEncodedArray, WireAnnotation } from './annotation';\nimport type { Properties } from '../util/utils';\n\n/**\n `DefaultAnnotation` is the class returned by `DefaultRest` and `DefaultRealtime`\u2019s `Annotation` static property. It introduces the static methods described in the `AnnotationStatic` interface of the public API of the non tree-shakable version of the library.\n */\nexport class DefaultAnnotation extends Annotation {\n  static async fromEncoded(encoded: unknown, inputOptions?: API.ChannelOptions): Promise<Annotation> {\n    return fromEncoded(Logger.defaultLogger, encoded as WireAnnotation, inputOptions);\n  }\n\n  static async fromEncodedArray(encodedArray: Array<unknown>, options?: API.ChannelOptions): Promise<Annotation[]> {\n    return fromEncodedArray(Logger.defaultLogger, encodedArray as WireAnnotation[], options);\n  }\n\n  static fromValues(values: Properties<Annotation>): Annotation {\n    return Annotation.fromValues(values);\n  }\n}\n", "import * as Utils from '../util/utils';\nimport Annotation, { WireAnnotation, _fromEncodedArray } from '../types/annotation';\nimport type Message from '../types/message';\nimport type RestChannel from './restchannel';\nimport type RealtimeChannel from './realtimechannel';\nimport Defaults from '../util/defaults';\nimport PaginatedResource, { PaginatedResult } from './paginatedresource';\nimport Resource from './resource';\nimport type { Properties } from '../util/utils';\nimport ErrorInfo from '../types/errorinfo';\n\nexport interface RestGetAnnotationsParams {\n  limit?: number;\n}\n\nexport function serialFromMsgOrSerial(msgOrSerial: string | Message): string {\n  let messageSerial: string | undefined;\n  switch (typeof msgOrSerial) {\n    case 'string':\n      messageSerial = msgOrSerial;\n      break;\n    case 'object':\n      messageSerial = msgOrSerial.serial;\n      break;\n  }\n  if (!messageSerial || typeof messageSerial !== 'string') {\n    throw new ErrorInfo(\n      'First argument of annotations.publish() must be either a Message (or at least an object with a string `serial` property) or a message serial (string)',\n      40003,\n      400,\n    );\n  }\n  return messageSerial;\n}\n\nexport function constructValidateAnnotation(\n  msgOrSerial: string | Message,\n  annotationValues: Partial<Properties<Annotation>>,\n): Annotation {\n  const messageSerial = serialFromMsgOrSerial(msgOrSerial);\n\n  if (!annotationValues || typeof annotationValues !== 'object') {\n    throw new ErrorInfo(\n      'Second argument of annotations.publish() must be an object (the intended annotation to publish)',\n      40003,\n      400,\n    );\n  }\n\n  const annotation = Annotation.fromValues(annotationValues);\n  annotation.messageSerial = messageSerial;\n  if (!annotation.action) {\n    annotation.action = 'annotation.create';\n  }\n  return annotation;\n}\n\nfunction basePathForSerial(channel: RestChannel | RealtimeChannel, serial: string) {\n  return (\n    channel.client.rest.channelMixin.basePath(channel) + '/messages/' + encodeURIComponent(serial) + '/annotations'\n  );\n}\n\nclass RestAnnotations {\n  private channel: RestChannel;\n\n  constructor(channel: RestChannel) {\n    this.channel = channel;\n  }\n\n  async publish(msgOrSerial: string | Message, annotationValues: Partial<Properties<Annotation>>): Promise<void> {\n    const annotation = constructValidateAnnotation(msgOrSerial, annotationValues);\n    const wireAnnotation = await annotation.encode();\n\n    const client = this.channel.client,\n      options = client.options,\n      format = options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      headers = Defaults.defaultPostHeaders(client.options, { format }),\n      params = {};\n\n    Utils.mixin(headers, client.options.headers);\n\n    const requestBody = Utils.encodeBody([wireAnnotation], client._MsgPack, format);\n\n    await Resource.post(\n      client,\n      basePathForSerial(this.channel, annotation.messageSerial!),\n      requestBody,\n      headers,\n      params,\n      null,\n      true,\n    );\n  }\n\n  async delete(msgOrSerial: string | Message, annotationValues: Partial<Properties<Annotation>>): Promise<void> {\n    annotationValues.action = 'annotation.delete';\n    return this.publish(msgOrSerial, annotationValues);\n  }\n\n  async get(\n    msgOrSerial: string | Message,\n    params: RestGetAnnotationsParams | null,\n  ): Promise<PaginatedResult<Annotation>> {\n    const client = this.channel.client,\n      messageSerial = serialFromMsgOrSerial(msgOrSerial),\n      format = client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      envelope = client.http.supportsLinkHeaders ? undefined : format,\n      headers = Defaults.defaultGetHeaders(client.options, { format });\n\n    Utils.mixin(headers, client.options.headers);\n\n    return new PaginatedResource(\n      client,\n      basePathForSerial(this.channel, messageSerial),\n      headers,\n      envelope,\n      async (body, _, unpacked) => {\n        const decoded = (\n          unpacked ? body : Utils.decodeBody(body, client._MsgPack, format)\n        ) as Utils.Properties<WireAnnotation>[];\n\n        return _fromEncodedArray(decoded, this.channel);\n      },\n    ).get(params as Record<string, unknown>);\n  }\n}\n\nexport default RestAnnotations;\n", "import { MsgPack } from 'common/types/msgpack';\r\nimport * as API from '../../../../ably';\r\nimport { PresenceMessagePlugin } from '../client/modularplugins';\r\nimport { AnnotationsPlugin } from '../client/modularplugins';\r\nimport * as Utils from '../util/utils';\r\nimport ErrorInfo from './errorinfo';\r\nimport { WireMessage } from './message';\r\nimport PresenceMessage, { WirePresenceMessage } from './presencemessage';\r\nimport Annotation, { WireAnnotation } from './annotation';\r\nimport RealtimeAnnotations from '../client/realtimeannotations';\r\nimport RestAnnotations from '../client/restannotations';\r\nimport { flags, flagNames, channelModes, ActionName } from './protocolmessagecommon';\r\nimport type { Properties } from '../util/utils';\r\nimport type * as ObjectsPlugin from 'plugins/objects';\r\nimport { MessageEncoding } from './basemessage';\r\n\r\nexport const serialize = Utils.encodeBody;\r\n\r\nfunction toStringArray(array?: any[]): string {\r\n  const result = [];\r\n  if (array) {\r\n    for (let i = 0; i < array.length; i++) {\r\n      result.push(array[i].toString());\r\n    }\r\n  }\r\n  return '[ ' + result.join(', ') + ' ]';\r\n}\r\n\r\nexport function deserialize(\r\n  serialized: unknown,\r\n  MsgPack: MsgPack | null,\r\n  presenceMessagePlugin: PresenceMessagePlugin | null,\r\n  annotationsPlugin: AnnotationsPlugin | null,\r\n  objectsPlugin: typeof ObjectsPlugin | null,\r\n  format?: Utils.Format,\r\n): ProtocolMessage {\r\n  const deserialized = Utils.decodeBody<Record<string, unknown>>(serialized, MsgPack, format);\r\n  return fromDeserialized(deserialized, presenceMessagePlugin, annotationsPlugin, objectsPlugin);\r\n}\r\n\r\nexport function fromDeserialized(\r\n  deserialized: Record<string, unknown>,\r\n  presenceMessagePlugin: PresenceMessagePlugin | null,\r\n  annotationsPlugin: AnnotationsPlugin | null,\r\n  objectsPlugin: typeof ObjectsPlugin | null,\r\n): ProtocolMessage {\r\n  let error: ErrorInfo | undefined;\r\n  if (deserialized.error) {\r\n    error = ErrorInfo.fromValues(deserialized.error as ErrorInfo);\r\n  }\r\n\r\n  let messages: WireMessage[] | undefined;\r\n  if (deserialized.messages) {\r\n    messages = WireMessage.fromValuesArray(deserialized.messages as Array<Properties<WireMessage>>);\r\n  }\r\n\r\n  let presence: WirePresenceMessage[] | undefined;\r\n  if (presenceMessagePlugin && deserialized.presence) {\r\n    presence = presenceMessagePlugin.WirePresenceMessage.fromValuesArray(\r\n      deserialized.presence as Array<Properties<WirePresenceMessage>>,\r\n    );\r\n  }\r\n\r\n  let annotations: WireAnnotation[] | undefined;\r\n  if (annotationsPlugin && deserialized.annotations) {\r\n    annotations = annotationsPlugin.WireAnnotation.fromValuesArray(\r\n      deserialized.annotations as Array<Properties<WireAnnotation>>,\r\n    );\r\n  }\r\n\r\n  let state: ObjectsPlugin.ObjectMessage[] | undefined;\r\n  if (objectsPlugin && deserialized.state) {\r\n    state = objectsPlugin.ObjectMessage.fromValuesArray(\r\n      deserialized.state as ObjectsPlugin.ObjectMessage[],\r\n      Utils,\r\n      MessageEncoding,\r\n    );\r\n  }\r\n\r\n  return Object.assign(new ProtocolMessage(), { ...deserialized, presence, messages, annotations, state, error });\r\n}\r\n\r\n/**\r\n * Used internally by the tests.\r\n *\r\n * ObjectsPlugin code can't be included as part of the core library to prevent size growth,\r\n * so if a test needs to build object messages, then it must provide the plugin upon call.\r\n */\r\nexport function makeFromDeserializedWithDependencies(dependencies?: { ObjectsPlugin: typeof ObjectsPlugin | null }) {\r\n  return (deserialized: Record<string, unknown>): ProtocolMessage => {\r\n    return fromDeserialized(\r\n      deserialized,\r\n      {\r\n        PresenceMessage,\r\n        WirePresenceMessage,\r\n      },\r\n      { Annotation, WireAnnotation, RealtimeAnnotations, RestAnnotations },\r\n      dependencies?.ObjectsPlugin ?? null,\r\n    );\r\n  };\r\n}\r\n\r\nexport function fromValues(values: Properties<ProtocolMessage>): ProtocolMessage {\r\n  return Object.assign(new ProtocolMessage(), values);\r\n}\r\n\r\nexport function stringify(\r\n  msg: any,\r\n  presenceMessagePlugin: PresenceMessagePlugin | null,\r\n  annotationsPlugin: AnnotationsPlugin | null,\r\n  objectsPlugin: typeof ObjectsPlugin | null,\r\n): string {\r\n  let result = '[ProtocolMessage';\r\n  if (msg.action !== undefined) result += '; action=' + ActionName[msg.action] || msg.action;\r\n\r\n  const simpleAttributes = ['id', 'channel', 'channelSerial', 'connectionId', 'count', 'msgSerial', 'timestamp'];\r\n  let attribute;\r\n  for (let attribIndex = 0; attribIndex < simpleAttributes.length; attribIndex++) {\r\n    attribute = simpleAttributes[attribIndex];\r\n    if (msg[attribute] !== undefined) result += '; ' + attribute + '=' + msg[attribute];\r\n  }\r\n\r\n  if (msg.messages) result += '; messages=' + toStringArray(WireMessage.fromValuesArray(msg.messages));\r\n  if (msg.presence && presenceMessagePlugin)\r\n    result += '; presence=' + toStringArray(presenceMessagePlugin.WirePresenceMessage.fromValuesArray(msg.presence));\r\n  if (msg.annotations && annotationsPlugin) {\r\n    result += '; annotations=' + toStringArray(annotationsPlugin.WireAnnotation.fromValuesArray(msg.annotations));\r\n  }\r\n  if (msg.state && objectsPlugin) {\r\n    result +=\r\n      '; state=' + toStringArray(objectsPlugin.ObjectMessage.fromValuesArray(msg.state, Utils, MessageEncoding));\r\n  }\r\n  if (msg.error) result += '; error=' + ErrorInfo.fromValues(msg.error).toString();\r\n  if (msg.auth && msg.auth.accessToken) result += '; token=' + msg.auth.accessToken;\r\n  if (msg.flags) result += '; flags=' + flagNames.filter(msg.hasFlag).join(',');\r\n  if (msg.params) {\r\n    let stringifiedParams = '';\r\n    Utils.forInOwnNonNullProperties(msg.params, function (prop: string) {\r\n      if (stringifiedParams.length > 0) {\r\n        stringifiedParams += '; ';\r\n      }\r\n      stringifiedParams += prop + '=' + msg.params[prop];\r\n    });\r\n    if (stringifiedParams.length > 0) {\r\n      result += '; params=[' + stringifiedParams + ']';\r\n    }\r\n  }\r\n  result += ']';\r\n  return result;\r\n}\r\n\r\nclass ProtocolMessage {\r\n  action?: number;\r\n  flags?: number;\r\n  id?: string;\r\n  timestamp?: number;\r\n  count?: number;\r\n  error?: ErrorInfo;\r\n  connectionId?: string;\r\n  channel?: string;\r\n  channelSerial?: string | null;\r\n  msgSerial?: number;\r\n  messages?: WireMessage[];\r\n  /**\r\n   * This will be undefined if we skipped decoding this property due to user not requesting Presence functionality \u2014 see {@link fromDeserialized}\r\n   */\r\n  presence?: WirePresenceMessage[];\r\n  annotations?: WireAnnotation[];\r\n  /**\r\n   * This will be undefined if we skipped decoding this property due to user not requesting Objects functionality \u2014 see {@link fromDeserialized}\r\n   */\r\n  state?: ObjectsPlugin.ObjectMessage[]; // TR4r\r\n  auth?: unknown;\r\n  connectionDetails?: Record<string, unknown>;\r\n  params?: Record<string, string>;\r\n\r\n  hasFlag = (flag: string): boolean => {\r\n    return ((this.flags as number) & flags[flag]) > 0;\r\n  };\r\n\r\n  setFlag(flag: keyof typeof flags): number {\r\n    return (this.flags = (this.flags as number) | flags[flag]);\r\n  }\r\n\r\n  getMode(): number {\r\n    return (this.flags || 0) & flags.MODE_ALL;\r\n  }\r\n\r\n  encodeModesToFlags(modes: API.ChannelMode[]): void {\r\n    modes.forEach((mode) => this.setFlag(mode));\r\n  }\r\n\r\n  decodeModesFromFlags(): string[] | undefined {\r\n    const modes: string[] = [];\r\n    channelModes.forEach((mode) => {\r\n      if (this.hasFlag(mode)) {\r\n        modes.push(mode);\r\n      }\r\n    });\r\n    return modes.length > 0 ? modes : undefined;\r\n  }\r\n}\r\n\r\nexport default ProtocolMessage;\r\n", "import ErrorInfo from '../types/errorinfo';\n\nclass ChannelStateChange {\n  previous: string;\n  current: string;\n  resumed?: boolean;\n  reason?: string | Error | ErrorInfo;\n  hasBacklog?: boolean;\n\n  constructor(\n    previous: string,\n    current: string,\n    resumed?: boolean,\n    hasBacklog?: boolean,\n    reason?: string | Error | ErrorInfo | null,\n  ) {\n    this.previous = previous;\n    this.current = current;\n    if (current === 'attached') {\n      this.resumed = resumed;\n      this.hasBacklog = hasBacklog;\n    }\n    if (reason) this.reason = reason;\n  }\n}\n\nexport default ChannelStateChange;\n", "import { actions, channelModes } from '../types/protocolmessagecommon';\r\nimport ProtocolMessage, { fromValues as protocolMessageFromValues } from '../types/protocolmessage';\r\nimport EventEmitter from '../util/eventemitter';\r\nimport * as Utils from '../util/utils';\r\nimport Logger from '../util/logger';\r\nimport { EncodingDecodingContext, CipherOptions, populateFieldsFromParent } from '../types/basemessage';\r\nimport Message, { getMessagesSize, encodeArray as encodeMessagesArray } from '../types/message';\r\nimport ChannelStateChange from './channelstatechange';\r\nimport ErrorInfo, { PartialErrorInfo } from '../types/errorinfo';\r\nimport * as API from '../../../../ably';\r\nimport ConnectionManager from '../transport/connectionmanager';\r\nimport ConnectionStateChange from './connectionstatechange';\r\nimport { StandardCallback } from '../../types/utils';\r\nimport BaseRealtime from './baserealtime';\r\nimport { ChannelOptions } from '../../types/channel';\r\nimport { normaliseChannelOptions } from '../util/defaults';\r\nimport { PaginatedResult } from './paginatedresource';\r\nimport type { PushChannel } from 'plugins/push';\r\nimport type { WirePresenceMessage } from '../types/presencemessage';\r\nimport type { Objects, ObjectMessage } from 'plugins/objects';\r\nimport type RealtimePresence from './realtimepresence';\r\nimport type RealtimeAnnotations from './realtimeannotations';\r\n\r\ninterface RealtimeHistoryParams {\r\n  start?: number;\r\n  end?: number;\r\n  direction?: string;\r\n  limit?: number;\r\n  untilAttach?: boolean;\r\n  from_serial?: string;\r\n}\r\n\r\nconst noop = function () {};\r\n\r\nfunction validateChannelOptions(options?: API.ChannelOptions) {\r\n  if (options && 'params' in options && !Utils.isObject(options.params)) {\r\n    return new ErrorInfo('options.params must be an object', 40000, 400);\r\n  }\r\n  if (options && 'modes' in options) {\r\n    if (!Array.isArray(options.modes)) {\r\n      return new ErrorInfo('options.modes must be an array', 40000, 400);\r\n    }\r\n    for (let i = 0; i < options.modes.length; i++) {\r\n      const currentMode = options.modes[i];\r\n      if (\r\n        !currentMode ||\r\n        typeof currentMode !== 'string' ||\r\n        !channelModes.includes(String.prototype.toUpperCase.call(currentMode))\r\n      ) {\r\n        return new ErrorInfo('Invalid channel mode: ' + currentMode, 40000, 400);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass RealtimeChannel extends EventEmitter {\r\n  name: string;\r\n  channelOptions: ChannelOptions;\r\n  client: BaseRealtime;\r\n  private _presence: RealtimePresence | null;\r\n  private _annotations: RealtimeAnnotations | null = null;\r\n  get presence(): RealtimePresence {\r\n    if (!this._presence) {\r\n      Utils.throwMissingPluginError('RealtimePresence');\r\n    }\r\n    return this._presence;\r\n  }\r\n  get annotations(): RealtimeAnnotations {\r\n    if (!this._annotations) {\r\n      Utils.throwMissingPluginError('Annotations');\r\n    }\r\n    return this._annotations;\r\n  }\r\n  connectionManager: ConnectionManager;\r\n  state: API.ChannelState;\r\n  subscriptions: EventEmitter;\r\n  filteredSubscriptions?: Map<API.messageCallback<Message>, Map<API.MessageFilter, API.messageCallback<Message>[]>>;\r\n  syncChannelSerial?: string | null;\r\n  properties: {\r\n    attachSerial: string | null | undefined;\r\n    channelSerial: string | null | undefined;\r\n  };\r\n  errorReason: ErrorInfo | string | null;\r\n  _mode = 0;\r\n  _attachResume: boolean;\r\n  _decodingContext: EncodingDecodingContext;\r\n  _lastPayload: {\r\n    messageId?: string | null;\r\n    protocolMessageChannelSerial?: string | null;\r\n    decodeFailureRecoveryInProgress: null | boolean;\r\n  };\r\n  _allChannelChanges: EventEmitter;\r\n  params?: Record<string, any>;\r\n  modes: API.ChannelMode[] | undefined;\r\n  stateTimer?: number | NodeJS.Timeout | null;\r\n  retryTimer?: number | NodeJS.Timeout | null;\r\n  retryCount: number = 0;\r\n  _push?: PushChannel;\r\n  _objects?: Objects;\r\n\r\n  constructor(client: BaseRealtime, name: string, options?: API.ChannelOptions) {\r\n    super(client.logger);\r\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'RealtimeChannel()', 'started; name = ' + name);\r\n    this.name = name;\r\n    this.channelOptions = normaliseChannelOptions(client._Crypto ?? null, this.logger, options);\r\n    this.client = client;\r\n    this._presence = client._RealtimePresence ? new client._RealtimePresence.RealtimePresence(this) : null;\r\n    if (client._Annotations) {\r\n      this._annotations = new client._Annotations.RealtimeAnnotations(this);\r\n    }\r\n    this.connectionManager = client.connection.connectionManager;\r\n    this.state = 'initialized';\r\n    this.subscriptions = new EventEmitter(this.logger);\r\n    this.syncChannelSerial = undefined;\r\n    this.properties = {\r\n      attachSerial: undefined,\r\n      channelSerial: undefined,\r\n    };\r\n    this.setOptions(options);\r\n    this.errorReason = null;\r\n    this._attachResume = false;\r\n    this._decodingContext = {\r\n      channelOptions: this.channelOptions,\r\n      plugins: client.options.plugins || {},\r\n      baseEncodedPreviousPayload: undefined,\r\n    };\r\n    this._lastPayload = {\r\n      messageId: null,\r\n      protocolMessageChannelSerial: null,\r\n      decodeFailureRecoveryInProgress: null,\r\n    };\r\n    /* Only differences between this and the public event emitter is that this emits an\r\n     * update event for all ATTACHEDs, whether resumed or not */\r\n    this._allChannelChanges = new EventEmitter(this.logger);\r\n\r\n    if (client.options.plugins?.Push) {\r\n      this._push = new client.options.plugins.Push.PushChannel(this);\r\n    }\r\n\r\n    if (client.options.plugins?.Objects) {\r\n      this._objects = new client.options.plugins.Objects.Objects(this);\r\n    }\r\n  }\r\n\r\n  get push() {\r\n    if (!this._push) {\r\n      Utils.throwMissingPluginError('Push');\r\n    }\r\n    return this._push;\r\n  }\r\n\r\n  /** @spec RTL27 */\r\n  get objects() {\r\n    if (!this._objects) {\r\n      Utils.throwMissingPluginError('Objects'); // RTL27b\r\n    }\r\n    return this._objects; // RTL27a\r\n  }\r\n\r\n  invalidStateError(): ErrorInfo {\r\n    return new ErrorInfo(\r\n      'Channel operation failed as channel state is ' + this.state,\r\n      90001,\r\n      400,\r\n      this.errorReason || undefined,\r\n    );\r\n  }\r\n\r\n  static processListenerArgs(args: unknown[]): any[] {\r\n    /* [event], listener */\r\n    args = Array.prototype.slice.call(args);\r\n    if (typeof args[0] === 'function') {\r\n      args.unshift(null);\r\n    }\r\n    return args;\r\n  }\r\n\r\n  async setOptions(options?: API.ChannelOptions): Promise<void> {\r\n    const previousChannelOptions = this.channelOptions;\r\n    const err = validateChannelOptions(options);\r\n    if (err) {\r\n      throw err;\r\n    }\r\n    this.channelOptions = normaliseChannelOptions(this.client._Crypto ?? null, this.logger, options);\r\n    if (this._decodingContext) this._decodingContext.channelOptions = this.channelOptions;\r\n    if (this._shouldReattachToSetOptions(options, previousChannelOptions)) {\r\n      /* This does not just do _attach(true, null, callback) because that would put us\r\n       * into the 'attaching' state until we receive the new attached, which is\r\n       * conceptually incorrect: we are still attached, we just have a pending request to\r\n       * change some channel params. Per RTL17 going into the attaching state would mean\r\n       * rejecting messages until we have confirmation that the options have changed,\r\n       * which would unnecessarily lose message continuity. */\r\n      this.attachImpl();\r\n      return new Promise((resolve, reject) => {\r\n        // Ignore 'attaching' -- could be just due to to a resume & reattach, should not\r\n        // call back setOptions until we're definitely attached with the new options (or\r\n        // else in a terminal state)\r\n        this._allChannelChanges.once(\r\n          ['attached', 'update', 'detached', 'failed'],\r\n          function (this: { event: string }, stateChange: ConnectionStateChange) {\r\n            switch (this.event) {\r\n              case 'update':\r\n              case 'attached':\r\n                resolve();\r\n                break;\r\n              default:\r\n                reject(stateChange.reason);\r\n            }\r\n          },\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  _shouldReattachToSetOptions(options: API.ChannelOptions | undefined, prevOptions: API.ChannelOptions) {\r\n    if (!(this.state === 'attached' || this.state === 'attaching')) {\r\n      return false;\r\n    }\r\n    if (options?.params) {\r\n      // Don't check against the `agent` param - it isn't returned in the ATTACHED message\r\n      const requestedParams = omitAgent(options.params);\r\n      const existingParams = omitAgent(prevOptions.params);\r\n\r\n      if (Object.keys(requestedParams).length !== Object.keys(existingParams).length) {\r\n        return true;\r\n      }\r\n\r\n      if (!Utils.shallowEquals(existingParams, requestedParams)) {\r\n        return true;\r\n      }\r\n    }\r\n    if (options?.modes) {\r\n      if (!prevOptions.modes || !Utils.arrEquals(options.modes, prevOptions.modes)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async publish(...args: any[]): Promise<void> {\r\n    let messages: Message[];\r\n    let argCount = args.length;\r\n\r\n    if (argCount == 1) {\r\n      if (Utils.isObject(args[0])) {\r\n        messages = [Message.fromValues(args[0])];\r\n      } else if (Array.isArray(args[0])) {\r\n        messages = Message.fromValuesArray(args[0]);\r\n      } else {\r\n        throw new ErrorInfo(\r\n          'The single-argument form of publish() expects a message object or an array of message objects',\r\n          40013,\r\n          400,\r\n        );\r\n      }\r\n    } else {\r\n      messages = [Message.fromValues({ name: args[0], data: args[1] })];\r\n    }\r\n    const maxMessageSize = this.client.options.maxMessageSize;\r\n    // TODO get rid of CipherOptions type assertion, indicates channeloptions types are broken\r\n    const wireMessages = await encodeMessagesArray(messages, this.channelOptions as CipherOptions);\r\n    /* RSL1i */\r\n    const size = getMessagesSize(wireMessages);\r\n    if (size > maxMessageSize) {\r\n      throw new ErrorInfo(\r\n        `Maximum size of messages that can be published at once exceeded (was ${size} bytes; limit is ${maxMessageSize} bytes)`,\r\n        40009,\r\n        400,\r\n      );\r\n    }\r\n\r\n    this.throwIfUnpublishableState();\r\n\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MICRO,\r\n      'RealtimeChannel.publish()',\r\n      'sending message; channel state is ' + this.state + ', message count = ' + wireMessages.length,\r\n    );\r\n\r\n    const pm = protocolMessageFromValues({ action: actions.MESSAGE, channel: this.name, messages: wireMessages });\r\n    return this.sendMessage(pm);\r\n  }\r\n\r\n  throwIfUnpublishableState(): void {\r\n    if (!this.connectionManager.activeState()) {\r\n      throw this.connectionManager.getError();\r\n    }\r\n    if (this.state === 'failed' || this.state === 'suspended') {\r\n      throw this.invalidStateError();\r\n    }\r\n  }\r\n\r\n  onEvent(messages: Array<any>): void {\r\n    Logger.logAction(this.logger, Logger.LOG_MICRO, 'RealtimeChannel.onEvent()', 'received message');\r\n    const subscriptions = this.subscriptions;\r\n    for (let i = 0; i < messages.length; i++) {\r\n      const message = messages[i];\r\n      subscriptions.emit(message.name, message);\r\n    }\r\n  }\r\n\r\n  async attach(): Promise<ChannelStateChange | null> {\r\n    if (this.state === 'attached') {\r\n      return null;\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this._attach(false, null, (err, result) => (err ? reject(err) : resolve(result!)));\r\n    });\r\n  }\r\n\r\n  _attach(\r\n    forceReattach: boolean,\r\n    attachReason: ErrorInfo | null,\r\n    callback?: StandardCallback<ChannelStateChange>,\r\n  ): void {\r\n    if (!callback) {\r\n      callback = (err?: ErrorInfo | null) => {\r\n        if (err) {\r\n          Logger.logAction(\r\n            this.logger,\r\n            Logger.LOG_ERROR,\r\n            'RealtimeChannel._attach()',\r\n            'Channel attach failed: ' + err.toString(),\r\n          );\r\n        }\r\n      };\r\n    }\r\n\r\n    const connectionManager = this.connectionManager;\r\n    if (!connectionManager.activeState()) {\r\n      callback(connectionManager.getError());\r\n      return;\r\n    }\r\n\r\n    if (this.state !== 'attaching' || forceReattach) {\r\n      this.requestState('attaching', attachReason);\r\n    }\r\n\r\n    this.once(function (this: { event: string }, stateChange: ChannelStateChange) {\r\n      switch (this.event) {\r\n        case 'attached':\r\n          callback?.(null, stateChange);\r\n          break;\r\n        case 'detached':\r\n        case 'suspended':\r\n        case 'failed':\r\n          callback?.(\r\n            stateChange.reason ||\r\n              connectionManager.getError() ||\r\n              new ErrorInfo('Unable to attach; reason unknown; state = ' + this.event, 90000, 500),\r\n          );\r\n          break;\r\n        case 'detaching':\r\n          callback?.(new ErrorInfo('Attach request superseded by a subsequent detach request', 90000, 409));\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  attachImpl(): void {\r\n    Logger.logAction(this.logger, Logger.LOG_MICRO, 'RealtimeChannel.attachImpl()', 'sending ATTACH message');\r\n    const attachMsg = protocolMessageFromValues({\r\n      action: actions.ATTACH,\r\n      channel: this.name,\r\n      params: this.channelOptions.params,\r\n      // RTL4c1: Includes the channel serial to resume from a previous message\r\n      // or attachment.\r\n      channelSerial: this.properties.channelSerial,\r\n    });\r\n    if (this.channelOptions.modes) {\r\n      attachMsg.encodeModesToFlags(Utils.allToUpperCase(this.channelOptions.modes) as API.ChannelMode[]);\r\n    }\r\n    if (this._attachResume) {\r\n      attachMsg.setFlag('ATTACH_RESUME');\r\n    }\r\n    if (this._lastPayload.decodeFailureRecoveryInProgress) {\r\n      attachMsg.channelSerial = this._lastPayload.protocolMessageChannelSerial;\r\n    }\r\n    this.sendMessage(attachMsg).catch(noop);\r\n  }\r\n\r\n  async detach(): Promise<void> {\r\n    const connectionManager = this.connectionManager;\r\n    if (!connectionManager.activeState()) {\r\n      throw connectionManager.getError();\r\n    }\r\n    switch (this.state) {\r\n      case 'suspended':\r\n        this.notifyState('detached');\r\n        return;\r\n      case 'detached':\r\n        return;\r\n      case 'failed':\r\n        throw new ErrorInfo('Unable to detach; channel state = failed', 90001, 400);\r\n      default:\r\n        this.requestState('detaching');\r\n      // eslint-disable-next-line no-fallthrough\r\n      case 'detaching':\r\n        return new Promise((resolve, reject) => {\r\n          this.once(function (this: { event: string }, stateChange: ChannelStateChange) {\r\n            switch (this.event) {\r\n              case 'detached':\r\n                resolve();\r\n                break;\r\n              case 'attached':\r\n              case 'suspended':\r\n              case 'failed':\r\n                reject(\r\n                  stateChange.reason ||\r\n                    connectionManager.getError() ||\r\n                    new ErrorInfo('Unable to detach; reason unknown; state = ' + this.event, 90000, 500),\r\n                );\r\n                break;\r\n              case 'attaching':\r\n                reject(new ErrorInfo('Detach request superseded by a subsequent attach request', 90000, 409));\r\n                break;\r\n            }\r\n          });\r\n        });\r\n    }\r\n  }\r\n\r\n  detachImpl(): void {\r\n    Logger.logAction(this.logger, Logger.LOG_MICRO, 'RealtimeChannel.detach()', 'sending DETACH message');\r\n    const msg = protocolMessageFromValues({ action: actions.DETACH, channel: this.name });\r\n    this.sendMessage(msg).catch(noop);\r\n  }\r\n\r\n  async subscribe(...args: unknown[] /* [event], listener */): Promise<ChannelStateChange | null> {\r\n    const [event, listener] = RealtimeChannel.processListenerArgs(args);\r\n\r\n    if (this.state === 'failed') {\r\n      throw ErrorInfo.fromValues(this.invalidStateError());\r\n    }\r\n\r\n    // Filtered\r\n    if (event && typeof event === 'object' && !Array.isArray(event)) {\r\n      this.client._FilteredSubscriptions.subscribeFilter(this, event, listener);\r\n    } else {\r\n      this.subscriptions.on(event, listener);\r\n    }\r\n\r\n    // (RTL7g)\r\n    if (this.channelOptions.attachOnSubscribe !== false) {\r\n      return this.attach();\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  unsubscribe(...args: unknown[] /* [event], listener */): void {\r\n    const [event, listener] = RealtimeChannel.processListenerArgs(args);\r\n\r\n    // If we either have a filtered listener, a filter or both we need to do additional processing to find the original function(s)\r\n    if ((typeof event === 'object' && !listener) || this.filteredSubscriptions?.has(listener)) {\r\n      this.client._FilteredSubscriptions\r\n        .getAndDeleteFilteredSubscriptions(this, event, listener)\r\n        .forEach((l) => this.subscriptions.off(l));\r\n      return;\r\n    }\r\n\r\n    this.subscriptions.off(event, listener);\r\n  }\r\n\r\n  sync(): void {\r\n    /* check preconditions */\r\n    switch (this.state) {\r\n      case 'initialized':\r\n      case 'detaching':\r\n      case 'detached':\r\n        throw new PartialErrorInfo('Unable to sync to channel; not attached', 40000);\r\n      default:\r\n    }\r\n    const connectionManager = this.connectionManager;\r\n    if (!connectionManager.activeState()) {\r\n      throw connectionManager.getError();\r\n    }\r\n\r\n    /* send sync request */\r\n    const syncMessage = protocolMessageFromValues({ action: actions.SYNC, channel: this.name });\r\n    if (this.syncChannelSerial) {\r\n      syncMessage.channelSerial = this.syncChannelSerial;\r\n    }\r\n    connectionManager.send(syncMessage);\r\n  }\r\n\r\n  async sendMessage(msg: ProtocolMessage): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.connectionManager.send(msg, this.client.options.queueMessages, (err) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          resolve();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  async sendPresence(presence: WirePresenceMessage[]): Promise<void> {\r\n    const msg = protocolMessageFromValues({\r\n      action: actions.PRESENCE,\r\n      channel: this.name,\r\n      presence: presence,\r\n    });\r\n    return this.sendMessage(msg);\r\n  }\r\n\r\n  sendState(objectMessages: ObjectMessage[]): Promise<void> {\r\n    const msg = protocolMessageFromValues({\r\n      action: actions.OBJECT,\r\n      channel: this.name,\r\n      state: objectMessages,\r\n    });\r\n    return this.sendMessage(msg);\r\n  }\r\n\r\n  // Access to this method is synchronised by ConnectionManager#processChannelMessage, in order to synchronise access to the state stored in _decodingContext.\r\n  async processMessage(message: ProtocolMessage): Promise<void> {\r\n    if (\r\n      message.action === actions.ATTACHED ||\r\n      message.action === actions.MESSAGE ||\r\n      message.action === actions.PRESENCE ||\r\n      message.action === actions.OBJECT ||\r\n      message.action === actions.ANNOTATION\r\n    ) {\r\n      // RTL15b\r\n      this.setChannelSerial(message.channelSerial);\r\n    }\r\n\r\n    let syncChannelSerial,\r\n      isSync = false;\r\n    switch (message.action) {\r\n      case actions.ATTACHED: {\r\n        this.properties.attachSerial = message.channelSerial;\r\n        this._mode = message.getMode();\r\n        this.params = (message as any).params || {};\r\n        const modesFromFlags = message.decodeModesFromFlags();\r\n        this.modes = (modesFromFlags && (Utils.allToLowerCase(modesFromFlags) as API.ChannelMode[])) || undefined;\r\n        const resumed = message.hasFlag('RESUMED');\r\n        const hasPresence = message.hasFlag('HAS_PRESENCE');\r\n        const hasBacklog = message.hasFlag('HAS_BACKLOG');\r\n        const hasObjects = message.hasFlag('HAS_OBJECTS');\r\n        if (this.state === 'attached') {\r\n          if (!resumed) {\r\n            // we have lost continuity.\r\n            // the presence set needs to be re-synced\r\n            if (this._presence) {\r\n              this._presence.onAttached(hasPresence);\r\n            }\r\n            // the Objects tree needs to be re-synced\r\n            if (this._objects) {\r\n              this._objects.onAttached(hasObjects);\r\n            }\r\n          }\r\n          const change = new ChannelStateChange(this.state, this.state, resumed, hasBacklog, message.error);\r\n          this._allChannelChanges.emit('update', change);\r\n          if (!resumed || this.channelOptions.updateOnAttached) {\r\n            this.emit('update', change);\r\n          }\r\n        } else if (this.state === 'detaching') {\r\n          /* RTL5i: re-send DETACH and remain in the 'detaching' state */\r\n          this.checkPendingState();\r\n        } else {\r\n          this.notifyState('attached', message.error, resumed, hasPresence, hasBacklog, hasObjects);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case actions.DETACHED: {\r\n        const detachErr = message.error\r\n          ? ErrorInfo.fromValues(message.error)\r\n          : new ErrorInfo('Channel detached', 90001, 404);\r\n        if (this.state === 'detaching') {\r\n          this.notifyState('detached', detachErr);\r\n        } else if (this.state === 'attaching') {\r\n          /* Only retry immediately if we were previously attached. If we were\r\n           * attaching, go into suspended, fail messages, and wait a few seconds\r\n           * before retrying */\r\n          this.notifyState('suspended', detachErr);\r\n        } else if (this.state === 'attached' || this.state === 'suspended') {\r\n          // RTL13a\r\n          this.requestState('attaching', detachErr);\r\n        }\r\n        // else no action (detached in initialized, detached, or failed state is a noop)\r\n        break;\r\n      }\r\n\r\n      case actions.SYNC:\r\n        /* syncs can have channelSerials, but might not if the sync is one page long */\r\n        isSync = true;\r\n        syncChannelSerial = this.syncChannelSerial = message.channelSerial;\r\n        /* syncs can happen on channels with no presence data as part of connection\r\n         * resuming, in which case protocol message has no presence property */\r\n        if (!message.presence) break;\r\n      // eslint-disable-next-line no-fallthrough\r\n      case actions.PRESENCE: {\r\n        if (!message.presence) {\r\n          break;\r\n        }\r\n\r\n        populateFieldsFromParent(message);\r\n        const options = this.channelOptions;\r\n        if (this._presence) {\r\n          const presenceMessages = await Promise.all(\r\n            message.presence.map((wpm) => {\r\n              return wpm.decode(options, this.logger);\r\n            }),\r\n          );\r\n\r\n          this._presence.setPresence(presenceMessages, isSync, syncChannelSerial as any);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // RTL1\r\n      // OBJECT and OBJECT_SYNC message processing share most of the logic, so group them together\r\n      case actions.OBJECT:\r\n      case actions.OBJECT_SYNC: {\r\n        if (!this._objects || !message.state) {\r\n          return;\r\n        }\r\n\r\n        populateFieldsFromParent(message);\r\n        const objectMessages = message.state;\r\n        // need to use the active protocol format instead of just client's useBinaryProtocol option,\r\n        // as comet transport does not support msgpack and will default to json without changing useBinaryProtocol.\r\n        // message processing is done in the same event loop tick up until this point,\r\n        // so we can reliably expect an active protocol to exist and be the one that received the object message.\r\n        const format = this.client.connection.connectionManager.getActiveTransportFormat()!;\r\n        await Promise.all(\r\n          objectMessages.map((om) =>\r\n            this.client._objectsPlugin!.ObjectMessage.decode(om, this.client, this.logger, Logger, Utils, format),\r\n          ),\r\n        );\r\n\r\n        if (message.action === actions.OBJECT) {\r\n          this._objects.handleObjectMessages(objectMessages);\r\n        } else {\r\n          this._objects.handleObjectSyncMessages(objectMessages, message.channelSerial);\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n      case actions.MESSAGE: {\r\n        //RTL17\r\n        if (this.state !== 'attached') {\r\n          Logger.logAction(\r\n            this.logger,\r\n            Logger.LOG_MAJOR,\r\n            'RealtimeChannel.processMessage()',\r\n            'Message \"' +\r\n              message.id +\r\n              '\" skipped as this channel \"' +\r\n              this.name +\r\n              '\" state is not \"attached\" (state is \"' +\r\n              this.state +\r\n              '\").',\r\n          );\r\n          return;\r\n        }\r\n\r\n        populateFieldsFromParent(message);\r\n\r\n        const encoded = message.messages!,\r\n          firstMessage = encoded[0],\r\n          lastMessage = encoded[encoded.length - 1];\r\n\r\n        if (\r\n          firstMessage.extras &&\r\n          firstMessage.extras.delta &&\r\n          firstMessage.extras.delta.from !== this._lastPayload.messageId\r\n        ) {\r\n          const msg =\r\n            'Delta message decode failure - previous message not available for message \"' +\r\n            message.id +\r\n            '\" on this channel \"' +\r\n            this.name +\r\n            '\".';\r\n          Logger.logAction(this.logger, Logger.LOG_ERROR, 'RealtimeChannel.processMessage()', msg);\r\n          this._startDecodeFailureRecovery(new ErrorInfo(msg, 40018, 400));\r\n          break;\r\n        }\r\n\r\n        let messages: Message[] = [];\r\n        for (let i = 0; i < encoded.length; i++) {\r\n          const { decoded, err } = await encoded[i].decodeWithErr(this._decodingContext, this.logger);\r\n          messages[i] = decoded;\r\n\r\n          if (err) {\r\n            switch (err.code) {\r\n              case 40018:\r\n                /* decode failure */\r\n                this._startDecodeFailureRecovery(err);\r\n                return;\r\n\r\n              case 40019: /* No vcdiff plugin passed in - no point recovering, give up */\r\n              case 40021:\r\n                /* Browser does not support deltas, similarly no point recovering */\r\n                this.notifyState('failed', err);\r\n                return;\r\n\r\n              default:\r\n              // do nothing, continue decoding\r\n            }\r\n          }\r\n        }\r\n\r\n        this._lastPayload.messageId = lastMessage.id;\r\n        this._lastPayload.protocolMessageChannelSerial = message.channelSerial;\r\n        this.onEvent(messages);\r\n        break;\r\n      }\r\n\r\n      case actions.ANNOTATION: {\r\n        populateFieldsFromParent(message);\r\n        const options = this.channelOptions;\r\n        if (this._annotations) {\r\n          const annotations = await Promise.all(\r\n            (message.annotations || []).map((wpm) => {\r\n              return wpm.decode(options, this.logger);\r\n            }),\r\n          );\r\n\r\n          this._annotations._processIncoming(annotations);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case actions.ERROR: {\r\n        /* there was a channel-specific error */\r\n        const err = message.error as ErrorInfo;\r\n        if (err && err.code == 80016) {\r\n          /* attach/detach operation attempted on superseded transport handle */\r\n          this.checkPendingState();\r\n        } else {\r\n          this.notifyState('failed', ErrorInfo.fromValues(err));\r\n        }\r\n        break;\r\n      }\r\n\r\n      default:\r\n        // RSF1, should handle unrecognized message actions gracefully and don't abort the realtime connection to ensure forward compatibility\r\n        Logger.logAction(\r\n          this.logger,\r\n          Logger.LOG_MAJOR,\r\n          'RealtimeChannel.processMessage()',\r\n          'Protocol error: unrecognised message action (' + message.action + ')',\r\n        );\r\n    }\r\n  }\r\n\r\n  _startDecodeFailureRecovery(reason: ErrorInfo): void {\r\n    if (!this._lastPayload.decodeFailureRecoveryInProgress) {\r\n      Logger.logAction(\r\n        this.logger,\r\n        Logger.LOG_MAJOR,\r\n        'RealtimeChannel.processMessage()',\r\n        'Starting decode failure recovery process.',\r\n      );\r\n      this._lastPayload.decodeFailureRecoveryInProgress = true;\r\n      this._attach(true, reason, () => {\r\n        this._lastPayload.decodeFailureRecoveryInProgress = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  onAttached(): void {\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MINOR,\r\n      'RealtimeChannel.onAttached',\r\n      'activating channel; name = ' + this.name,\r\n    );\r\n  }\r\n\r\n  notifyState(\r\n    state: API.ChannelState,\r\n    reason?: ErrorInfo | null,\r\n    resumed?: boolean,\r\n    hasPresence?: boolean,\r\n    hasBacklog?: boolean,\r\n    hasObjects?: boolean,\r\n  ): void {\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MICRO,\r\n      'RealtimeChannel.notifyState',\r\n      'name = ' + this.name + ', current state = ' + this.state + ', notifying state ' + state,\r\n    );\r\n    this.clearStateTimer();\r\n\r\n    // RTP5a1\r\n    if (['detached', 'suspended', 'failed'].includes(state)) {\r\n      this.properties.channelSerial = null;\r\n    }\r\n\r\n    if (state === this.state) {\r\n      return;\r\n    }\r\n    if (this._presence) {\r\n      this._presence.actOnChannelState(state, hasPresence, reason);\r\n    }\r\n    if (this._objects) {\r\n      this._objects.actOnChannelState(state, hasObjects);\r\n    }\r\n    if (state === 'suspended' && this.connectionManager.state.sendEvents) {\r\n      this.startRetryTimer();\r\n    } else {\r\n      this.cancelRetryTimer();\r\n    }\r\n    if (reason) {\r\n      this.errorReason = reason;\r\n    }\r\n    const change = new ChannelStateChange(this.state, state, resumed, hasBacklog, reason);\r\n    const action = 'Channel state for channel \"' + this.name + '\"';\r\n    const message = state + (reason ? '; reason: ' + reason : '');\r\n    if (state === 'failed') {\r\n      Logger.logAction(this.logger, Logger.LOG_ERROR, action, message);\r\n    } else {\r\n      Logger.logAction(this.logger, Logger.LOG_MAJOR, action, message);\r\n    }\r\n\r\n    if (state !== 'attaching' && state !== 'suspended') {\r\n      this.retryCount = 0;\r\n    }\r\n\r\n    /* Note: we don't set inProgress for pending states until the request is actually in progress */\r\n    if (state === 'attached') {\r\n      this.onAttached();\r\n    }\r\n\r\n    if (state === 'attached') {\r\n      this._attachResume = true;\r\n    } else if (state === 'detaching' || state === 'failed') {\r\n      this._attachResume = false;\r\n    }\r\n\r\n    this.state = state;\r\n    this._allChannelChanges.emit(state, change);\r\n    this.emit(state, change);\r\n  }\r\n\r\n  requestState(state: API.ChannelState, reason?: ErrorInfo | null): void {\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MINOR,\r\n      'RealtimeChannel.requestState',\r\n      'name = ' + this.name + ', state = ' + state,\r\n    );\r\n    this.notifyState(state, reason);\r\n    /* send the event and await response */\r\n    this.checkPendingState();\r\n  }\r\n\r\n  checkPendingState(): void {\r\n    /* if can't send events, do nothing */\r\n    const cmState = this.connectionManager.state;\r\n    if (!cmState.sendEvents) {\r\n      Logger.logAction(\r\n        this.logger,\r\n        Logger.LOG_MINOR,\r\n        'RealtimeChannel.checkPendingState',\r\n        'sendEvents is false; state is ' + this.connectionManager.state.state,\r\n      );\r\n      return;\r\n    }\r\n\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MINOR,\r\n      'RealtimeChannel.checkPendingState',\r\n      'name = ' + this.name + ', state = ' + this.state,\r\n    );\r\n    /* Only start the state timer running when actually sending the event */\r\n    switch (this.state) {\r\n      case 'attaching':\r\n        this.startStateTimerIfNotRunning();\r\n        this.attachImpl();\r\n        break;\r\n      case 'detaching':\r\n        this.startStateTimerIfNotRunning();\r\n        this.detachImpl();\r\n        break;\r\n      case 'attached':\r\n        /* resume any sync operation that was in progress */\r\n        this.sync();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  timeoutPendingState(): void {\r\n    switch (this.state) {\r\n      case 'attaching': {\r\n        const err = new ErrorInfo('Channel attach timed out', 90007, 408);\r\n        this.notifyState('suspended', err);\r\n        break;\r\n      }\r\n      case 'detaching': {\r\n        const err = new ErrorInfo('Channel detach timed out', 90007, 408);\r\n        this.notifyState('attached', err);\r\n        break;\r\n      }\r\n      default:\r\n        this.checkPendingState();\r\n        break;\r\n    }\r\n  }\r\n\r\n  startStateTimerIfNotRunning(): void {\r\n    if (!this.stateTimer) {\r\n      this.stateTimer = setTimeout(() => {\r\n        Logger.logAction(this.logger, Logger.LOG_MINOR, 'RealtimeChannel.startStateTimerIfNotRunning', 'timer expired');\r\n        this.stateTimer = null;\r\n        this.timeoutPendingState();\r\n      }, this.client.options.timeouts.realtimeRequestTimeout);\r\n    }\r\n  }\r\n\r\n  clearStateTimer(): void {\r\n    const stateTimer = this.stateTimer;\r\n    if (stateTimer) {\r\n      clearTimeout(stateTimer);\r\n      this.stateTimer = null;\r\n    }\r\n  }\r\n\r\n  startRetryTimer(): void {\r\n    if (this.retryTimer) return;\r\n\r\n    this.retryCount++;\r\n    const retryDelay = Utils.getRetryTime(this.client.options.timeouts.channelRetryTimeout, this.retryCount);\r\n\r\n    this.retryTimer = setTimeout(() => {\r\n      /* If connection is not connected, just leave in suspended, a reattach\r\n       * will be triggered once it connects again */\r\n      if (this.state === 'suspended' && this.connectionManager.state.sendEvents) {\r\n        this.retryTimer = null;\r\n        Logger.logAction(\r\n          this.logger,\r\n          Logger.LOG_MINOR,\r\n          'RealtimeChannel retry timer expired',\r\n          'attempting a new attach',\r\n        );\r\n        this.requestState('attaching');\r\n      }\r\n    }, retryDelay);\r\n  }\r\n\r\n  cancelRetryTimer(): void {\r\n    if (this.retryTimer) {\r\n      clearTimeout(this.retryTimer as NodeJS.Timeout);\r\n      this.retryTimer = null;\r\n    }\r\n  }\r\n\r\n  history = async function (\r\n    this: RealtimeChannel,\r\n    params: RealtimeHistoryParams | null,\r\n  ): Promise<PaginatedResult<Message>> {\r\n    Logger.logAction(this.logger, Logger.LOG_MICRO, 'RealtimeChannel.history()', 'channel = ' + this.name);\r\n\r\n    // We fetch this first so that any plugin-not-provided error takes priority over other errors\r\n    const restMixin = this.client.rest.channelMixin;\r\n\r\n    if (params && params.untilAttach) {\r\n      if (this.state !== 'attached') {\r\n        throw new ErrorInfo('option untilAttach requires the channel to be attached', 40000, 400);\r\n      }\r\n      if (!this.properties.attachSerial) {\r\n        throw new ErrorInfo(\r\n          'untilAttach was specified and channel is attached, but attachSerial is not defined',\r\n          40000,\r\n          400,\r\n        );\r\n      }\r\n      delete params.untilAttach;\r\n      params.from_serial = this.properties.attachSerial;\r\n    }\r\n\r\n    return restMixin.history(this, params);\r\n  } as any;\r\n\r\n  whenState = ((state: string) => {\r\n    return EventEmitter.prototype.whenState.call(this, state, this.state);\r\n  }) as any;\r\n\r\n  /* @returns null (if can safely be released) | ErrorInfo (if cannot) */\r\n  getReleaseErr(): ErrorInfo | null {\r\n    const s = this.state;\r\n    if (s === 'initialized' || s === 'detached' || s === 'failed') {\r\n      return null;\r\n    }\r\n    return new ErrorInfo(\r\n      'Can only release a channel in a state where there is no possibility of further updates from the server being received (initialized, detached, or failed); was ' +\r\n        s,\r\n      90001,\r\n      400,\r\n    );\r\n  }\r\n\r\n  setChannelSerial(channelSerial?: string | null): void {\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MICRO,\r\n      'RealtimeChannel.setChannelSerial()',\r\n      'Updating channel serial; serial = ' + channelSerial + '; previous = ' + this.properties.channelSerial,\r\n    );\r\n\r\n    // RTP17h: Only update the channel serial if its present (it won't always\r\n    // be set).\r\n    if (channelSerial) {\r\n      this.properties.channelSerial = channelSerial;\r\n    }\r\n  }\r\n\r\n  async status(): Promise<API.ChannelDetails> {\r\n    return this.client.rest.channelMixin.status(this);\r\n  }\r\n}\r\n\r\nfunction omitAgent(channelParams?: API.ChannelParams) {\r\n  const { agent: _, ...paramsWithoutAgent } = channelParams || {};\r\n  return paramsWithoutAgent;\r\n}\r\n\r\nexport default RealtimeChannel;\r\n", "import EventEmitter from '../util/eventemitter';\nimport Logger from '../util/logger';\nimport Annotation from '../types/annotation';\nimport { actions, flags } from '../types/protocolmessagecommon';\nimport { fromValues as protocolMessageFromValues } from '../types/protocolmessage';\nimport ErrorInfo from '../types/errorinfo';\nimport RealtimeChannel from './realtimechannel';\nimport RestAnnotations, { RestGetAnnotationsParams, constructValidateAnnotation } from './restannotations';\nimport type { PaginatedResult } from './paginatedresource';\nimport type Message from '../types/message';\nimport type { Properties } from '../util/utils';\n\nclass RealtimeAnnotations {\n  private channel: RealtimeChannel;\n  private logger: Logger;\n  private subscriptions: EventEmitter;\n\n  constructor(channel: RealtimeChannel) {\n    this.channel = channel;\n    this.logger = channel.logger;\n    this.subscriptions = new EventEmitter(this.logger);\n  }\n\n  async publish(msgOrSerial: string | Message, annotationValues: Partial<Properties<Annotation>>): Promise<void> {\n    const channelName = this.channel.name;\n    const annotation = constructValidateAnnotation(msgOrSerial, annotationValues);\n    const wireAnnotation = await annotation.encode();\n\n    this.channel.throwIfUnpublishableState();\n\n    Logger.logAction(\n      this.logger,\n      Logger.LOG_MICRO,\n      'RealtimeAnnotations.publish()',\n      'channelName = ' +\n        channelName +\n        ', sending annotation with messageSerial = ' +\n        annotation.messageSerial +\n        ', type = ' +\n        annotation.type,\n    );\n\n    const pm = protocolMessageFromValues({\n      action: actions.ANNOTATION,\n      channel: channelName,\n      annotations: [wireAnnotation],\n    });\n    return this.channel.sendMessage(pm);\n  }\n\n  async delete(msgOrSerial: string | Message, annotationValues: Partial<Properties<Annotation>>): Promise<void> {\n    annotationValues.action = 'annotation.delete';\n    return this.publish(msgOrSerial, annotationValues);\n  }\n\n  async subscribe(..._args: unknown[] /* [type], listener */): Promise<void> {\n    const args = RealtimeChannel.processListenerArgs(_args);\n    const event = args[0];\n    const listener = args[1];\n    const channel = this.channel;\n\n    if (channel.state === 'failed') {\n      throw ErrorInfo.fromValues(channel.invalidStateError());\n    }\n\n    this.subscriptions.on(event, listener);\n\n    if (this.channel.channelOptions.attachOnSubscribe !== false) {\n      await channel.attach();\n    }\n\n    // explicit check for attach state in caes attachOnSubscribe=false\n    if ((this.channel.state === 'attached' && this.channel._mode & flags.ANNOTATION_SUBSCRIBE) === 0) {\n      throw new ErrorInfo(\n        \"You are trying to add an annotation listener, but you haven't requested the annotation_subscribe channel mode in ChannelOptions, so this won't do anything (we only deliver annotations to clients who have explicitly requested them)\",\n        93001,\n        400,\n      );\n    }\n  }\n\n  unsubscribe(..._args: unknown[] /* [event], listener */): void {\n    const args = RealtimeChannel.processListenerArgs(_args);\n    const event = args[0];\n    const listener = args[1];\n    this.subscriptions.off(event, listener);\n  }\n\n  _processIncoming(annotations: Annotation[]): void {\n    for (const annotation of annotations) {\n      this.subscriptions.emit(annotation.type || '', annotation);\n    }\n  }\n\n  async get(\n    msgOrSerial: string | Message,\n    params: RestGetAnnotationsParams | null,\n  ): Promise<PaginatedResult<Annotation>> {\n    return RestAnnotations.prototype.get.call(this, msgOrSerial, params);\n  }\n}\n\nexport default RealtimeAnnotations;\n", "import { BaseRest } from './baserest';\nimport ClientOptions from '../../types/ClientOptions';\nimport { allCommonModularPlugins } from './modularplugins';\nimport Platform from 'common/platform';\nimport { DefaultMessage } from '../types/defaultmessage';\nimport { MsgPack } from 'common/types/msgpack';\nimport { DefaultPresenceMessage } from '../types/defaultpresencemessage';\nimport { DefaultAnnotation } from '../types/defaultannotation';\nimport { Http } from 'common/types/http';\nimport RealtimeAnnotations from './realtimeannotations';\nimport RestAnnotations from './restannotations';\nimport Annotation, { WireAnnotation } from '../types/annotation';\nimport Defaults from '../util/defaults';\nimport Logger from '../util/logger';\n\n/**\n `DefaultRest` is the class that the non tree-shakable version of the SDK exports as `Rest`. It ensures that this version of the SDK includes all of the functionality which is optionally available in the tree-shakable version.\n */\nexport class DefaultRest extends BaseRest {\n  // The public typings declare that this requires an argument to be passed, but since we want to emit a good error message in the case where a non-TypeScript user does not pass an argument, tell the compiler that this is possible so that it forces us to handle it.\n  constructor(options?: ClientOptions | string) {\n    const MsgPack = DefaultRest._MsgPack;\n    if (!MsgPack) {\n      throw new Error('Expected DefaultRest._MsgPack to have been set');\n    }\n\n    super(\n      Defaults.objectifyOptions(options, true, 'Rest', Logger.defaultLogger, {\n        ...allCommonModularPlugins,\n        Crypto: DefaultRest.Crypto ?? undefined,\n        MsgPack: DefaultRest._MsgPack ?? undefined,\n        Annotations: {\n          Annotation,\n          WireAnnotation,\n          RealtimeAnnotations,\n          RestAnnotations,\n        },\n      }),\n    );\n  }\n\n  private static _Crypto: typeof Platform.Crypto = null;\n  static get Crypto() {\n    if (this._Crypto === null) {\n      throw new Error('Encryption not enabled; use ably.encryption.js instead');\n    }\n\n    return this._Crypto;\n  }\n  static set Crypto(newValue: typeof Platform.Crypto) {\n    this._Crypto = newValue;\n  }\n\n  static Message = DefaultMessage;\n  static PresenceMessage = DefaultPresenceMessage;\n  static Annotation = DefaultAnnotation;\n\n  static _MsgPack: MsgPack | null = null;\n\n  // Used by tests\n  static _Http = Http;\n}\n", "import ErrorInfo from '../types/errorinfo';\nimport EventEmitter from '../util/eventemitter';\nimport Logger from '../util/logger';\nimport { PendingMessage } from './protocol';\n\nclass MessageQueue extends EventEmitter {\n  messages: Array<PendingMessage>;\n\n  constructor(logger: Logger) {\n    super(logger);\n    this.messages = [];\n  }\n\n  count(): number {\n    return this.messages.length;\n  }\n\n  push(message: PendingMessage): void {\n    this.messages.push(message);\n  }\n\n  shift(): PendingMessage | undefined {\n    return this.messages.shift();\n  }\n\n  last(): PendingMessage {\n    return this.messages[this.messages.length - 1];\n  }\n\n  copyAll(): PendingMessage[] {\n    return this.messages.slice();\n  }\n\n  append(messages: Array<PendingMessage>): void {\n    this.messages.push.apply(this.messages, messages);\n  }\n\n  prepend(messages: Array<PendingMessage>): void {\n    this.messages.unshift.apply(this.messages, messages);\n  }\n\n  completeMessages(serial: number, count: number, err?: ErrorInfo | null): void {\n    Logger.logAction(\n      this.logger,\n      Logger.LOG_MICRO,\n      'MessageQueue.completeMessages()',\n      'serial = ' + serial + '; count = ' + count,\n    );\n    err = err || null;\n    const messages = this.messages;\n    if (messages.length === 0) {\n      throw new Error('MessageQueue.completeMessages(): completeMessages called on any empty MessageQueue');\n    }\n    const first = messages[0];\n    if (first) {\n      const startSerial = first.message.msgSerial as number;\n      const endSerial = serial + count; /* the serial of the first message that is *not* the subject of this call */\n      if (endSerial > startSerial) {\n        const completeMessages = messages.splice(0, endSerial - startSerial);\n        for (const message of completeMessages) {\n          (message.callback as Function)(err);\n        }\n      }\n      if (messages.length == 0) this.emit('idle');\n    }\n  }\n\n  completeAllMessages(err: ErrorInfo): void {\n    this.completeMessages(0, Number.MAX_SAFE_INTEGER || Number.MAX_VALUE, err);\n  }\n\n  resetSendAttempted(): void {\n    for (let msg of this.messages) {\n      msg.sendAttempted = false;\n    }\n  }\n\n  clear(): void {\n    Logger.logAction(\n      this.logger,\n      Logger.LOG_MICRO,\n      'MessageQueue.clear()',\n      'clearing ' + this.messages.length + ' messages',\n    );\n    this.messages = [];\n    this.emit('idle');\n  }\n}\n\nexport default MessageQueue;\n", "import { actions } from '../types/protocolmessagecommon';\r\nimport ProtocolMessage, { stringify as stringifyProtocolMessage } from '../types/protocolmessage';\r\nimport * as Utils from '../util/utils';\r\nimport EventEmitter from '../util/eventemitter';\r\nimport Logger from '../util/logger';\r\nimport MessageQueue from './messagequeue';\r\nimport ErrorInfo from '../types/errorinfo';\r\nimport Transport from './transport';\r\nimport { ErrCallback } from '../../types/utils';\r\n\r\nexport class PendingMessage {\r\n  message: ProtocolMessage;\r\n  callback?: ErrCallback;\r\n  merged: boolean;\r\n  sendAttempted: boolean;\r\n  ackRequired: boolean;\r\n\r\n  constructor(message: ProtocolMessage, callback?: ErrCallback) {\r\n    this.message = message;\r\n    this.callback = callback;\r\n    this.merged = false;\r\n    const action = message.action;\r\n    this.sendAttempted = false;\r\n    this.ackRequired =\r\n      typeof action === 'number' &&\r\n      [actions.MESSAGE, actions.PRESENCE, actions.ANNOTATION, actions.OBJECT].includes(action);\r\n  }\r\n}\r\n\r\nclass Protocol extends EventEmitter {\r\n  transport: Transport;\r\n  messageQueue: MessageQueue;\r\n\r\n  constructor(transport: Transport) {\r\n    super(transport.logger);\r\n    this.transport = transport;\r\n    this.messageQueue = new MessageQueue(this.logger);\r\n    transport.on('ack', (serial: number, count: number) => {\r\n      this.onAck(serial, count);\r\n    });\r\n    transport.on('nack', (serial: number, count: number, err: ErrorInfo) => {\r\n      this.onNack(serial, count, err);\r\n    });\r\n  }\r\n\r\n  onAck(serial: number, count: number): void {\r\n    Logger.logAction(this.logger, Logger.LOG_MICRO, 'Protocol.onAck()', 'serial = ' + serial + '; count = ' + count);\r\n    this.messageQueue.completeMessages(serial, count);\r\n  }\r\n\r\n  onNack(serial: number, count: number, err: ErrorInfo): void {\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_ERROR,\r\n      'Protocol.onNack()',\r\n      'serial = ' + serial + '; count = ' + count + '; err = ' + Utils.inspectError(err),\r\n    );\r\n    if (!err) {\r\n      err = new ErrorInfo('Unable to send message; channel not responding', 50001, 500);\r\n    }\r\n    this.messageQueue.completeMessages(serial, count, err);\r\n  }\r\n\r\n  onceIdle(listener: ErrCallback): void {\r\n    const messageQueue = this.messageQueue;\r\n    if (messageQueue.count() === 0) {\r\n      listener();\r\n      return;\r\n    }\r\n    messageQueue.once('idle', listener);\r\n  }\r\n\r\n  send(pendingMessage: PendingMessage): void {\r\n    if (pendingMessage.ackRequired) {\r\n      this.messageQueue.push(pendingMessage);\r\n    }\r\n    if (this.logger.shouldLog(Logger.LOG_MICRO)) {\r\n      Logger.logActionNoStrip(\r\n        this.logger,\r\n        Logger.LOG_MICRO,\r\n        'Protocol.send()',\r\n        'sending msg; ' +\r\n          stringifyProtocolMessage(\r\n            pendingMessage.message,\r\n            this.transport.connectionManager.realtime._RealtimePresence,\r\n            this.transport.connectionManager.realtime._Annotations,\r\n            this.transport.connectionManager.realtime._objectsPlugin,\r\n          ),\r\n      );\r\n    }\r\n    pendingMessage.sendAttempted = true;\r\n    this.transport.send(pendingMessage.message);\r\n  }\r\n\r\n  getTransport(): Transport {\r\n    return this.transport;\r\n  }\r\n\r\n  getPendingMessages(): PendingMessage[] {\r\n    return this.messageQueue.copyAll();\r\n  }\r\n\r\n  clearPendingMessages(): void {\r\n    return this.messageQueue.clear();\r\n  }\r\n\r\n  finish(): void {\r\n    const transport = this.transport;\r\n    this.onceIdle(function () {\r\n      transport.disconnect();\r\n    });\r\n  }\r\n}\r\n\r\nexport default Protocol;\r\n", "import { IPartialErrorInfo } from '../types/errorinfo';\n\nclass ConnectionStateChange {\n  previous?: string;\n  current?: string;\n  retryIn?: number;\n  reason?: IPartialErrorInfo;\n\n  constructor(previous?: string, current?: string, retryIn?: number | null, reason?: IPartialErrorInfo) {\n    this.previous = previous;\n    this.current = current;\n    if (retryIn) this.retryIn = retryIn;\n    if (reason) this.reason = reason;\n  }\n}\n\nexport default ConnectionStateChange;\n", "import ErrorInfo from '../types/errorinfo';\n\nconst ConnectionErrorCodes = {\n  DISCONNECTED: 80003,\n  SUSPENDED: 80002,\n  FAILED: 80000,\n  CLOSING: 80017,\n  CLOSED: 80017,\n  UNKNOWN_CONNECTION_ERR: 50002,\n  UNKNOWN_CHANNEL_ERR: 50001,\n};\n\nconst ConnectionErrors = {\n  disconnected: () =>\n    ErrorInfo.fromValues({\n      statusCode: 400,\n      code: ConnectionErrorCodes.DISCONNECTED,\n      message: 'Connection to server temporarily unavailable',\n    }),\n  suspended: () =>\n    ErrorInfo.fromValues({\n      statusCode: 400,\n      code: ConnectionErrorCodes.SUSPENDED,\n      message: 'Connection to server unavailable',\n    }),\n  failed: () =>\n    ErrorInfo.fromValues({\n      statusCode: 400,\n      code: ConnectionErrorCodes.FAILED,\n      message: 'Connection failed or disconnected by server',\n    }),\n  closing: () =>\n    ErrorInfo.fromValues({\n      statusCode: 400,\n      code: ConnectionErrorCodes.CLOSING,\n      message: 'Connection closing',\n    }),\n  closed: () =>\n    ErrorInfo.fromValues({\n      statusCode: 400,\n      code: ConnectionErrorCodes.CLOSED,\n      message: 'Connection closed',\n    }),\n  unknownConnectionErr: () =>\n    ErrorInfo.fromValues({\n      statusCode: 500,\n      code: ConnectionErrorCodes.UNKNOWN_CONNECTION_ERR,\n      message: 'Internal connection error',\n    }),\n  unknownChannelErr: () =>\n    ErrorInfo.fromValues({\n      statusCode: 500,\n      code: ConnectionErrorCodes.UNKNOWN_CONNECTION_ERR,\n      message: 'Internal channel error',\n    }),\n};\n\nexport function isRetriable(err: ErrorInfo) {\n  if (!err.statusCode || !err.code || err.statusCode >= 500) {\n    return true;\n  }\n  return Object.values(ConnectionErrorCodes).includes(err.code);\n}\n\nexport default ConnectionErrors;\n", "import { actions } from '../types/protocolmessagecommon';\r\nimport ProtocolMessage, {\r\n  fromValues as protocolMessageFromValues,\r\n  stringify as stringifyProtocolMessage,\r\n} from '../types/protocolmessage';\r\nimport * as Utils from '../util/utils';\r\nimport EventEmitter from '../util/eventemitter';\r\nimport Logger from '../util/logger';\r\nimport ConnectionErrors from './connectionerrors';\r\nimport ErrorInfo from '../types/errorinfo';\r\nimport Auth from '../client/auth';\r\nimport * as API from '../../../../ably';\r\nimport ConnectionManager, { TransportParams } from './connectionmanager';\r\nimport Platform from 'common/platform';\r\nimport TransportName from 'common/constants/TransportName';\r\n\r\nexport type TryConnectCallback = (\r\n  wrappedErr: { error: ErrorInfo; event: string } | null,\r\n  transport?: Transport,\r\n) => void;\r\n\r\nexport interface TransportCtor {\r\n  new (\r\n    connectionManager: ConnectionManager,\r\n    auth: Auth,\r\n    params: TransportParams,\r\n    forceJsonProtocol?: boolean,\r\n  ): Transport;\r\n\r\n  isAvailable(): boolean;\r\n}\r\n\r\nconst closeMessage = protocolMessageFromValues({ action: actions.CLOSE });\r\nconst disconnectMessage = protocolMessageFromValues({ action: actions.DISCONNECT });\r\n\r\n/*\r\n * Transport instances inherit from EventEmitter and emit the following events:\r\n *\r\n * event name       data\r\n * closed           error\r\n * failed           error\r\n * disposed\r\n * connected        null error, connectionSerial, connectionId, connectionDetails\r\n * event            channel message object\r\n */\r\n\r\nabstract class Transport extends EventEmitter {\r\n  connectionManager: ConnectionManager;\r\n  auth: Auth;\r\n  params: TransportParams;\r\n  timeouts: Record<string, number>;\r\n  format?: Utils.Format;\r\n  isConnected: boolean;\r\n  isFinished: boolean;\r\n  isDisposed: boolean;\r\n  maxIdleInterval: number | null;\r\n  idleTimer: NodeJS.Timeout | number | null;\r\n  lastActivity: number | null;\r\n\r\n  constructor(connectionManager: ConnectionManager, auth: Auth, params: TransportParams, forceJsonProtocol?: boolean) {\r\n    super(connectionManager.logger);\r\n    if (forceJsonProtocol) {\r\n      params.format = undefined;\r\n      params.heartbeats = true;\r\n    }\r\n    this.connectionManager = connectionManager;\r\n    this.auth = auth;\r\n    this.params = params;\r\n    this.timeouts = params.options.timeouts;\r\n    this.format = params.format;\r\n    this.isConnected = false;\r\n    this.isFinished = false;\r\n    this.isDisposed = false;\r\n    this.maxIdleInterval = null;\r\n    this.idleTimer = null;\r\n    this.lastActivity = null;\r\n  }\r\n\r\n  abstract shortName: TransportName;\r\n  abstract send(message: ProtocolMessage): void;\r\n\r\n  connect(): void {}\r\n\r\n  close(): void {\r\n    if (this.isConnected) {\r\n      this.requestClose();\r\n    }\r\n    this.finish('closed', ConnectionErrors.closed());\r\n  }\r\n\r\n  disconnect(err?: Error | ErrorInfo): void {\r\n    /* Used for network/transport issues that need to result in the transport\r\n     * being disconnected, but should not transition the connection to 'failed' */\r\n    if (this.isConnected) {\r\n      this.requestDisconnect();\r\n    }\r\n    this.finish('disconnected', err || ConnectionErrors.disconnected());\r\n  }\r\n\r\n  fail(err: ErrorInfo): void {\r\n    /* Used for client-side-detected fatal connection issues */\r\n    if (this.isConnected) {\r\n      this.requestDisconnect();\r\n    }\r\n    this.finish('failed', err || ConnectionErrors.failed());\r\n  }\r\n\r\n  finish(event: string, err?: Error | ErrorInfo): void {\r\n    if (this.isFinished) {\r\n      return;\r\n    }\r\n\r\n    this.isFinished = true;\r\n    this.isConnected = false;\r\n    this.maxIdleInterval = null;\r\n    clearTimeout(this.idleTimer ?? undefined);\r\n    this.idleTimer = null;\r\n    this.emit(event, err);\r\n    this.dispose();\r\n  }\r\n\r\n  onProtocolMessage(message: ProtocolMessage): void {\r\n    if (this.logger.shouldLog(Logger.LOG_MICRO)) {\r\n      Logger.logActionNoStrip(\r\n        this.logger,\r\n        Logger.LOG_MICRO,\r\n        'Transport.onProtocolMessage()',\r\n        'received on ' +\r\n          this.shortName +\r\n          ': ' +\r\n          stringifyProtocolMessage(\r\n            message,\r\n            this.connectionManager.realtime._RealtimePresence,\r\n            this.connectionManager.realtime._Annotations,\r\n            this.connectionManager.realtime._objectsPlugin,\r\n          ) +\r\n          '; connectionId = ' +\r\n          this.connectionManager.connectionId,\r\n      );\r\n    }\r\n    this.onActivity();\r\n\r\n    switch (message.action) {\r\n      case actions.HEARTBEAT:\r\n        Logger.logActionNoStrip(\r\n          this.logger,\r\n          Logger.LOG_MICRO,\r\n          'Transport.onProtocolMessage()',\r\n          this.shortName + ' heartbeat; connectionId = ' + this.connectionManager.connectionId,\r\n        );\r\n        this.emit('heartbeat', message.id);\r\n        break;\r\n      case actions.CONNECTED:\r\n        this.onConnect(message);\r\n        this.emit('connected', message.error, message.connectionId, message.connectionDetails, message);\r\n        break;\r\n      case actions.CLOSED:\r\n        this.onClose(message);\r\n        break;\r\n      case actions.DISCONNECTED:\r\n        this.onDisconnect(message);\r\n        break;\r\n      case actions.ACK:\r\n        this.emit('ack', message.msgSerial, message.count);\r\n        break;\r\n      case actions.NACK:\r\n        this.emit('nack', message.msgSerial, message.count, message.error);\r\n        break;\r\n      case actions.SYNC:\r\n        this.connectionManager.onChannelMessage(message, this);\r\n        break;\r\n      case actions.ACTIVATE:\r\n        // Ignored.\r\n        break;\r\n      case actions.AUTH:\r\n        Utils.whenPromiseSettles(this.auth.authorize(), (err: ErrorInfo | null) => {\r\n          if (err) {\r\n            Logger.logAction(\r\n              this.logger,\r\n              Logger.LOG_ERROR,\r\n              'Transport.onProtocolMessage()',\r\n              'Ably requested re-authentication, but unable to obtain a new token: ' + Utils.inspectError(err),\r\n            );\r\n          }\r\n        });\r\n        break;\r\n      case actions.ERROR:\r\n        Logger.logAction(\r\n          this.logger,\r\n          Logger.LOG_MINOR,\r\n          'Transport.onProtocolMessage()',\r\n          'received error action; connectionId = ' +\r\n            this.connectionManager.connectionId +\r\n            '; err = ' +\r\n            Platform.Config.inspect(message.error) +\r\n            (message.channel ? ', channel: ' + message.channel : ''),\r\n        );\r\n        if (message.channel === undefined) {\r\n          this.onFatalError(message);\r\n          break;\r\n        }\r\n        /* otherwise it's a channel-specific error, so handle it in the channel */\r\n        this.connectionManager.onChannelMessage(message, this);\r\n        break;\r\n      default:\r\n        /* all other actions are channel-specific */\r\n        this.connectionManager.onChannelMessage(message, this);\r\n    }\r\n  }\r\n\r\n  onConnect(message: ProtocolMessage): void {\r\n    this.isConnected = true;\r\n    if (!message.connectionDetails) {\r\n      throw new Error('Transport.onConnect(): Connect message recieved without connectionDetails');\r\n    }\r\n    const maxPromisedIdle = message.connectionDetails.maxIdleInterval as number;\r\n    if (maxPromisedIdle) {\r\n      this.maxIdleInterval = maxPromisedIdle + this.timeouts.realtimeRequestTimeout;\r\n      this.onActivity();\r\n    }\r\n    /* else Realtime declines to guarantee any maximum idle interval - CD2h */\r\n  }\r\n\r\n  onDisconnect(message: ProtocolMessage): void {\r\n    /* Used for when the server has disconnected the client (usually with a\r\n     * DISCONNECTED action) */\r\n    const err = message && message.error;\r\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'Transport.onDisconnect()', 'err = ' + Utils.inspectError(err));\r\n    this.finish('disconnected', err);\r\n  }\r\n\r\n  onFatalError(message: ProtocolMessage): void {\r\n    /* On receipt of a fatal connection error, we can assume that the server\r\n     * will close the connection and the transport, and do not need to request\r\n     * a disconnection - RTN15i */\r\n    const err = message && message.error;\r\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'Transport.onFatalError()', 'err = ' + Utils.inspectError(err));\r\n    this.finish('failed', err);\r\n  }\r\n\r\n  onClose(message: ProtocolMessage): void {\r\n    const err = message && message.error;\r\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'Transport.onClose()', 'err = ' + Utils.inspectError(err));\r\n    this.finish('closed', err);\r\n  }\r\n\r\n  requestClose(): void {\r\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'Transport.requestClose()', '');\r\n    this.send(closeMessage);\r\n  }\r\n\r\n  requestDisconnect(): void {\r\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'Transport.requestDisconnect()', '');\r\n    this.send(disconnectMessage);\r\n  }\r\n\r\n  ping(id: string): void {\r\n    const msg: Record<string, number | string> = { action: actions.HEARTBEAT };\r\n    if (id) msg.id = id;\r\n    this.send(protocolMessageFromValues(msg));\r\n  }\r\n\r\n  dispose(): void {\r\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'Transport.dispose()', '');\r\n    this.isDisposed = true;\r\n    this.off();\r\n  }\r\n\r\n  onActivity(): void {\r\n    if (!this.maxIdleInterval) {\r\n      return;\r\n    }\r\n    this.lastActivity = this.connectionManager.lastActivity = Date.now();\r\n    this.setIdleTimer(this.maxIdleInterval + 100);\r\n  }\r\n\r\n  setIdleTimer(timeout: number): void {\r\n    if (!this.idleTimer) {\r\n      this.idleTimer = setTimeout(() => {\r\n        this.onIdleTimerExpire();\r\n      }, timeout);\r\n    }\r\n  }\r\n\r\n  onIdleTimerExpire(): void {\r\n    if (!this.lastActivity || !this.maxIdleInterval) {\r\n      throw new Error('Transport.onIdleTimerExpire(): lastActivity/maxIdleInterval not set');\r\n    }\r\n    this.idleTimer = null;\r\n    const sinceLast = Date.now() - this.lastActivity;\r\n    const timeRemaining = this.maxIdleInterval - sinceLast;\r\n    if (timeRemaining <= 0) {\r\n      const msg = 'No activity seen from realtime in ' + sinceLast + 'ms; assuming connection has dropped';\r\n      Logger.logAction(this.logger, Logger.LOG_ERROR, 'Transport.onIdleTimerExpire()', msg);\r\n      this.disconnect(new ErrorInfo(msg, 80003, 408));\r\n    } else {\r\n      this.setIdleTimer(timeRemaining + 100);\r\n    }\r\n  }\r\n\r\n  static tryConnect(\r\n    transportCtor: TransportCtor,\r\n    connectionManager: ConnectionManager,\r\n    auth: Auth,\r\n    transportParams: TransportParams,\r\n    callback: TryConnectCallback,\r\n  ): Transport {\r\n    const transport = new transportCtor(connectionManager, auth, transportParams);\r\n\r\n    let transportAttemptTimer: NodeJS.Timeout | number;\r\n\r\n    const errorCb = function (this: { event: string }, err: ErrorInfo) {\r\n      clearTimeout(transportAttemptTimer);\r\n      callback({ event: this.event, error: err });\r\n    };\r\n\r\n    const realtimeRequestTimeout = connectionManager.options.timeouts.realtimeRequestTimeout;\r\n    transportAttemptTimer = setTimeout(() => {\r\n      transport.off(['preconnect', 'disconnected', 'failed']);\r\n      transport.dispose();\r\n      errorCb.call(\r\n        { event: 'disconnected' },\r\n        new ErrorInfo('Timeout waiting for transport to indicate itself viable', 50000, 500),\r\n      );\r\n    }, realtimeRequestTimeout);\r\n\r\n    transport.on(['failed', 'disconnected'], errorCb);\r\n    transport.on('preconnect', function () {\r\n      Logger.logAction(\r\n        connectionManager.logger,\r\n        Logger.LOG_MINOR,\r\n        'Transport.tryConnect()',\r\n        'viable transport ' + transport,\r\n      );\r\n      clearTimeout(transportAttemptTimer);\r\n      transport.off(['failed', 'disconnected'], errorCb);\r\n      callback(null, transport);\r\n    });\r\n    transport.connect();\r\n    return transport;\r\n  }\r\n\r\n  onAuthUpdated?: (tokenDetails: API.TokenDetails) => void;\r\n\r\n  static isAvailable(): boolean {\r\n    throw new ErrorInfo('isAvailable not implemented for transport', 50000, 500);\r\n  }\r\n}\r\n\r\nexport default Transport;\r\n", "export namespace TransportNames {\n  export const WebSocket = 'web_socket' as const;\n  export const Comet = 'comet' as const;\n  export const XhrPolling = 'xhr_polling' as const;\n}\n\ntype TransportName = typeof TransportNames.WebSocket | typeof TransportNames.Comet | typeof TransportNames.XhrPolling;\n\nexport default TransportName;\n", "import { actions } from '../types/protocolmessagecommon';\r\nimport ProtocolMessage, {\r\n  stringify as stringifyProtocolMessage,\r\n  fromValues as protocolMessageFromValues,\r\n} from 'common/lib/types/protocolmessage';\r\nimport * as Utils from 'common/lib/util/utils';\r\nimport Protocol, { PendingMessage } from './protocol';\r\nimport Defaults, { getAgentString } from 'common/lib/util/defaults';\r\nimport Platform, { TransportImplementations } from 'common/platform';\r\nimport EventEmitter from '../util/eventemitter';\r\nimport MessageQueue from './messagequeue';\r\nimport Logger from '../util/logger';\r\nimport ConnectionStateChange from 'common/lib/client/connectionstatechange';\r\nimport ConnectionErrors, { isRetriable } from './connectionerrors';\r\nimport ErrorInfo, { IPartialErrorInfo, PartialErrorInfo } from 'common/lib/types/errorinfo';\r\nimport Auth from 'common/lib/client/auth';\r\nimport Message, { getMessagesSize } from 'common/lib/types/message';\r\nimport Multicaster, { MulticasterInstance } from 'common/lib/util/multicaster';\r\nimport Transport, { TransportCtor } from './transport';\r\nimport * as API from '../../../../ably';\r\nimport { ErrCallback } from 'common/types/utils';\r\nimport HttpStatusCodes from 'common/constants/HttpStatusCodes';\r\nimport BaseRealtime from '../client/baserealtime';\r\nimport { NormalisedClientOptions } from 'common/types/ClientOptions';\r\nimport TransportName, { TransportNames } from 'common/constants/TransportName';\r\n\r\nlet globalObject = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : self;\r\n\r\nconst haveWebStorage = () => typeof Platform.WebStorage !== 'undefined' && Platform.WebStorage?.localSupported;\r\nconst haveSessionStorage = () => typeof Platform.WebStorage !== 'undefined' && Platform.WebStorage?.sessionSupported;\r\nconst noop = function () {};\r\nconst transportPreferenceName = 'ably-transport-preference';\r\n\r\nfunction bundleWith(dest: ProtocolMessage, src: ProtocolMessage, maxSize: number) {\r\n  let action;\r\n  if (dest.channel !== src.channel) {\r\n    /* RTL6d3 */\r\n    return false;\r\n  }\r\n  if ((action = dest.action) !== actions.PRESENCE && action !== actions.MESSAGE) {\r\n    /* RTL6d - can only bundle messages or presence */\r\n    return false;\r\n  }\r\n  if (action !== src.action) {\r\n    /* RTL6d4 */\r\n    return false;\r\n  }\r\n  const kind = action === actions.PRESENCE ? 'presence' : 'messages',\r\n    proposed = (dest as Record<string, any>)[kind].concat((src as Record<string, any>)[kind]),\r\n    size = getMessagesSize(proposed);\r\n  if (size > maxSize) {\r\n    /* RTL6d1 */\r\n    return false;\r\n  }\r\n  if (!Utils.allSame(proposed, 'clientId')) {\r\n    /* RTL6d2 */\r\n    return false;\r\n  }\r\n  if (\r\n    !proposed.every(function (msg: Message) {\r\n      return !msg.id;\r\n    })\r\n  ) {\r\n    /* RTL6d7 */\r\n    return false;\r\n  }\r\n  /* we're good to go! */\r\n  (dest as Record<string, any>)[kind] = proposed;\r\n  return true;\r\n}\r\n\r\ntype RecoveryContext = {\r\n  connectionKey: string;\r\n  msgSerial: number;\r\n  channelSerials: { [name: string]: string };\r\n};\r\n\r\nfunction decodeRecoveryKey(recoveryKey: NormalisedClientOptions['recover']): RecoveryContext | null {\r\n  try {\r\n    return JSON.parse(recoveryKey as string);\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport class TransportParams {\r\n  options: NormalisedClientOptions;\r\n  host: string | null;\r\n  mode: string;\r\n  format?: Utils.Format;\r\n  connectionKey?: string;\r\n  stream?: any;\r\n  heartbeats?: boolean;\r\n\r\n  constructor(options: NormalisedClientOptions, host: string | null, mode: string, connectionKey?: string) {\r\n    this.options = options;\r\n    this.host = host;\r\n    this.mode = mode;\r\n    this.connectionKey = connectionKey;\r\n    this.format = options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json;\r\n  }\r\n\r\n  getConnectParams(authParams: Record<string, unknown>): Record<string, string> {\r\n    const params = authParams ? Utils.copy(authParams) : {};\r\n    const options = this.options;\r\n    switch (this.mode) {\r\n      case 'resume':\r\n        params.resume = this.connectionKey as string;\r\n        break;\r\n      case 'recover': {\r\n        const recoveryContext = decodeRecoveryKey(options.recover);\r\n        if (recoveryContext) {\r\n          params.recover = recoveryContext.connectionKey;\r\n        }\r\n        break;\r\n      }\r\n      default:\r\n    }\r\n    if (options.clientId !== undefined) {\r\n      params.clientId = options.clientId;\r\n    }\r\n    if (options.echoMessages === false) {\r\n      params.echo = 'false';\r\n    }\r\n    if (this.format !== undefined) {\r\n      params.format = this.format;\r\n    }\r\n    if (this.stream !== undefined) {\r\n      params.stream = this.stream;\r\n    }\r\n    if (this.heartbeats !== undefined) {\r\n      params.heartbeats = this.heartbeats;\r\n    }\r\n    params.v = Defaults.protocolVersion;\r\n    params.agent = getAgentString(this.options);\r\n    if (options.transportParams !== undefined) {\r\n      Utils.mixin(params, options.transportParams);\r\n    }\r\n    return params as Record<string, string>;\r\n  }\r\n\r\n  toString(): string {\r\n    let result = '[mode=' + this.mode;\r\n    if (this.host) {\r\n      result += ',host=' + this.host;\r\n    }\r\n    if (this.connectionKey) {\r\n      result += ',connectionKey=' + this.connectionKey;\r\n    }\r\n    if (this.format) {\r\n      result += ',format=' + this.format;\r\n    }\r\n    result += ']';\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\ntype ConnectionState = {\r\n  state: string;\r\n  terminal?: boolean;\r\n  queueEvents?: boolean;\r\n  sendEvents?: boolean;\r\n  failState?: string;\r\n  retryDelay?: number;\r\n  retryImmediately?: boolean;\r\n  error?: IPartialErrorInfo;\r\n};\r\n\r\nclass ConnectionManager extends EventEmitter {\r\n  supportedTransports: Partial<Record<TransportName, TransportCtor>> = {};\r\n  realtime: BaseRealtime;\r\n  options: NormalisedClientOptions;\r\n  states: Record<string, ConnectionState>;\r\n  state: ConnectionState;\r\n  errorReason: IPartialErrorInfo | null;\r\n  queuedMessages: MessageQueue;\r\n  msgSerial: number;\r\n  connectionDetails?: Record<string, any>;\r\n  connectionId?: string;\r\n  connectionKey?: string;\r\n  connectionStateTtl: number;\r\n  maxIdleInterval: number | null;\r\n  transports: TransportName[];\r\n  baseTransport?: TransportName;\r\n  webSocketTransportAvailable?: true;\r\n  transportPreference: string | null;\r\n  domains: string[];\r\n  activeProtocol: null | Protocol;\r\n  pendingTransport?: Transport;\r\n  proposedTransport?: Transport;\r\n  host: string | null;\r\n  lastAutoReconnectAttempt: number | null;\r\n  lastActivity: number | null;\r\n  forceFallbackHost: boolean;\r\n  transitionTimer?: number | NodeJS.Timeout | null;\r\n  suspendTimer?: number | NodeJS.Timeout | null;\r\n  retryTimer?: number | NodeJS.Timeout | null;\r\n  disconnectedRetryCount: number = 0;\r\n  pendingChannelMessagesState: {\r\n    // Whether a message is currently being processed\r\n    isProcessing: boolean;\r\n    // The messages remaining to be processed (excluding any message currently being processed)\r\n    queue: { message: ProtocolMessage; transport: Transport }[];\r\n  } = { isProcessing: false, queue: [] };\r\n  webSocketSlowTimer: NodeJS.Timeout | null;\r\n  wsCheckResult: boolean | null;\r\n  webSocketGiveUpTimer: NodeJS.Timeout | null;\r\n  abandonedWebSocket: boolean;\r\n  connectCounter: number;\r\n\r\n  constructor(realtime: BaseRealtime, options: NormalisedClientOptions) {\r\n    super(realtime.logger);\r\n    this.realtime = realtime;\r\n    this.initTransports();\r\n    this.options = options;\r\n    const timeouts = options.timeouts;\r\n    /* connectingTimeout: leave webSocketConnectTimeout (~6s) to try the\r\n     * websocket transport, then realtimeRequestTimeout (~10s) to establish\r\n     * the base transport in case that fails */\r\n    const connectingTimeout = timeouts.webSocketConnectTimeout + timeouts.realtimeRequestTimeout;\r\n    this.states = {\r\n      initialized: {\r\n        state: 'initialized',\r\n        terminal: false,\r\n        queueEvents: true,\r\n        sendEvents: false,\r\n        failState: 'disconnected',\r\n      },\r\n      connecting: {\r\n        state: 'connecting',\r\n        terminal: false,\r\n        queueEvents: true,\r\n        sendEvents: false,\r\n        retryDelay: connectingTimeout,\r\n        failState: 'disconnected',\r\n      },\r\n      connected: {\r\n        state: 'connected',\r\n        terminal: false,\r\n        queueEvents: false,\r\n        sendEvents: true,\r\n        failState: 'disconnected',\r\n      },\r\n      disconnected: {\r\n        state: 'disconnected',\r\n        terminal: false,\r\n        queueEvents: true,\r\n        sendEvents: false,\r\n        retryDelay: timeouts.disconnectedRetryTimeout,\r\n        failState: 'disconnected',\r\n      },\r\n      suspended: {\r\n        state: 'suspended',\r\n        terminal: false,\r\n        queueEvents: false,\r\n        sendEvents: false,\r\n        retryDelay: timeouts.suspendedRetryTimeout,\r\n        failState: 'suspended',\r\n      },\r\n      closing: {\r\n        state: 'closing',\r\n        terminal: false,\r\n        queueEvents: false,\r\n        sendEvents: false,\r\n        retryDelay: timeouts.realtimeRequestTimeout,\r\n        failState: 'closed',\r\n      },\r\n      closed: { state: 'closed', terminal: true, queueEvents: false, sendEvents: false, failState: 'closed' },\r\n      failed: { state: 'failed', terminal: true, queueEvents: false, sendEvents: false, failState: 'failed' },\r\n    };\r\n    this.state = this.states.initialized;\r\n    this.errorReason = null;\r\n\r\n    this.queuedMessages = new MessageQueue(this.logger);\r\n    this.msgSerial = 0;\r\n    this.connectionDetails = undefined;\r\n    this.connectionId = undefined;\r\n    this.connectionKey = undefined;\r\n    this.connectionStateTtl = timeouts.connectionStateTtl;\r\n    this.maxIdleInterval = null;\r\n\r\n    this.transports = Utils.intersect(options.transports || Defaults.defaultTransports, this.supportedTransports);\r\n    this.transportPreference = null;\r\n\r\n    if (this.transports.includes(TransportNames.WebSocket)) {\r\n      this.webSocketTransportAvailable = true;\r\n    }\r\n    if (this.transports.includes(TransportNames.XhrPolling)) {\r\n      this.baseTransport = TransportNames.XhrPolling;\r\n    } else if (this.transports.includes(TransportNames.Comet)) {\r\n      this.baseTransport = TransportNames.Comet;\r\n    }\r\n\r\n    this.domains = Defaults.getHosts(options);\r\n    this.activeProtocol = null;\r\n    this.host = null;\r\n    this.lastAutoReconnectAttempt = null;\r\n    this.lastActivity = null;\r\n    this.forceFallbackHost = false;\r\n    this.connectCounter = 0;\r\n    this.wsCheckResult = null;\r\n    this.webSocketSlowTimer = null;\r\n    this.webSocketGiveUpTimer = null;\r\n    this.abandonedWebSocket = false;\r\n\r\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'Realtime.ConnectionManager()', 'started');\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MICRO,\r\n      'Realtime.ConnectionManager()',\r\n      'requested transports = [' + (options.transports || Defaults.defaultTransports) + ']',\r\n    );\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MICRO,\r\n      'Realtime.ConnectionManager()',\r\n      'available transports = [' + this.transports + ']',\r\n    );\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MICRO,\r\n      'Realtime.ConnectionManager()',\r\n      'http domains = [' + this.domains + ']',\r\n    );\r\n\r\n    if (!this.transports.length) {\r\n      const msg = 'no requested transports available';\r\n      Logger.logAction(this.logger, Logger.LOG_ERROR, 'realtime.ConnectionManager()', msg);\r\n      throw new Error(msg);\r\n    }\r\n\r\n    const addEventListener = Platform.Config.addEventListener;\r\n    if (addEventListener) {\r\n      /* intercept close event in browser to persist connection id if requested */\r\n      if (haveSessionStorage() && typeof options.recover === 'function') {\r\n        addEventListener('beforeunload', this.persistConnection.bind(this));\r\n      }\r\n\r\n      if (options.closeOnUnload === true) {\r\n        addEventListener('beforeunload', () => {\r\n          Logger.logAction(\r\n            this.logger,\r\n            Logger.LOG_MAJOR,\r\n            'Realtime.ConnectionManager()',\r\n            'beforeunload event has triggered the connection to close as closeOnUnload is true',\r\n          );\r\n          this.requestState({ state: 'closing' });\r\n        });\r\n      }\r\n\r\n      /* Listen for online and offline events */\r\n      addEventListener('online', () => {\r\n        if (this.state == this.states.disconnected || this.state == this.states.suspended) {\r\n          Logger.logAction(\r\n            this.logger,\r\n            Logger.LOG_MINOR,\r\n            'ConnectionManager caught browser \u2018online\u2019 event',\r\n            'reattempting connection',\r\n          );\r\n          this.requestState({ state: 'connecting' });\r\n        } else if (this.state == this.states.connecting) {\r\n          // RTN20c: if 'online' event recieved while CONNECTING, abandon connection attempt and retry\r\n          this.pendingTransport?.off();\r\n          this.disconnectAllTransports();\r\n\r\n          this.startConnect();\r\n        }\r\n      });\r\n\r\n      addEventListener('offline', () => {\r\n        if (this.state == this.states.connected) {\r\n          Logger.logAction(\r\n            this.logger,\r\n            Logger.LOG_MINOR,\r\n            'ConnectionManager caught browser \u2018offline\u2019 event',\r\n            'disconnecting active transport',\r\n          );\r\n          // Not sufficient to just go to the 'disconnected' state, want to\r\n          // force all transports to reattempt the connection. Will immediately\r\n          // retry.\r\n          this.disconnectAllTransports();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /*********************\r\n   * transport management\r\n   *********************/\r\n\r\n  // Used by tests\r\n  static supportedTransports(additionalImplementations: TransportImplementations) {\r\n    const storage: TransportStorage = { supportedTransports: {} };\r\n    this.initTransports(additionalImplementations, storage);\r\n    return storage.supportedTransports;\r\n  }\r\n\r\n  private static initTransports(additionalImplementations: TransportImplementations, storage: TransportStorage) {\r\n    const implementations = { ...Platform.Transports.bundledImplementations, ...additionalImplementations };\r\n\r\n    [TransportNames.WebSocket, ...Platform.Transports.order].forEach((transportName) => {\r\n      const transport = implementations[transportName];\r\n      if (transport && transport.isAvailable()) {\r\n        storage.supportedTransports[transportName] = transport;\r\n      }\r\n    });\r\n  }\r\n\r\n  initTransports() {\r\n    ConnectionManager.initTransports(this.realtime._additionalTransportImplementations, this);\r\n  }\r\n\r\n  createTransportParams(host: string | null, mode: string): TransportParams {\r\n    return new TransportParams(this.options, host, mode, this.connectionKey);\r\n  }\r\n\r\n  getTransportParams(callback: Function): void {\r\n    const decideMode = (modeCb: Function) => {\r\n      if (this.connectionKey) {\r\n        modeCb('resume');\r\n        return;\r\n      }\r\n\r\n      if (typeof this.options.recover === 'string') {\r\n        modeCb('recover');\r\n        return;\r\n      }\r\n\r\n      const recoverFn = this.options.recover,\r\n        lastSessionData = this.getSessionRecoverData(),\r\n        sessionRecoveryName = this.sessionRecoveryName();\r\n      if (lastSessionData && typeof recoverFn === 'function') {\r\n        Logger.logAction(\r\n          this.logger,\r\n          Logger.LOG_MINOR,\r\n          'ConnectionManager.getTransportParams()',\r\n          'Calling clientOptions-provided recover function with last session data (recovery scope: ' +\r\n            sessionRecoveryName +\r\n            ')',\r\n        );\r\n        recoverFn(lastSessionData, (shouldRecover?: boolean) => {\r\n          if (shouldRecover) {\r\n            this.options.recover = lastSessionData.recoveryKey;\r\n            modeCb('recover');\r\n          } else {\r\n            modeCb('clean');\r\n          }\r\n        });\r\n        return;\r\n      }\r\n      modeCb('clean');\r\n    };\r\n\r\n    decideMode((mode: string) => {\r\n      const transportParams = this.createTransportParams(null, mode);\r\n      if (mode === 'recover') {\r\n        Logger.logAction(\r\n          this.logger,\r\n          Logger.LOG_MINOR,\r\n          'ConnectionManager.getTransportParams()',\r\n          'Transport recovery mode = recover; recoveryKey = ' + this.options.recover,\r\n        );\r\n        const recoveryContext = decodeRecoveryKey(this.options.recover);\r\n        if (recoveryContext) {\r\n          this.msgSerial = recoveryContext.msgSerial;\r\n        }\r\n      } else {\r\n        Logger.logAction(\r\n          this.logger,\r\n          Logger.LOG_MINOR,\r\n          'ConnectionManager.getTransportParams()',\r\n          'Transport params = ' + transportParams.toString(),\r\n        );\r\n      }\r\n      callback(transportParams);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Attempt to connect using a given transport\r\n   * @param transportParams\r\n   * @param candidate, the transport to try\r\n   * @param callback\r\n   */\r\n  tryATransport(transportParams: TransportParams, candidate: TransportName, callback: Function): void {\r\n    Logger.logAction(this.logger, Logger.LOG_MICRO, 'ConnectionManager.tryATransport()', 'trying ' + candidate);\r\n\r\n    this.proposedTransport = Transport.tryConnect(\r\n      this.supportedTransports[candidate]!,\r\n      this,\r\n      this.realtime.auth,\r\n      transportParams,\r\n      (wrappedErr: { error: ErrorInfo; event: string } | null, transport?: Transport) => {\r\n        const state = this.state;\r\n        if (state == this.states.closing || state == this.states.closed || state == this.states.failed) {\r\n          if (transport) {\r\n            Logger.logAction(\r\n              this.logger,\r\n              Logger.LOG_MINOR,\r\n              'ConnectionManager.tryATransport()',\r\n              'connection ' + state.state + ' while we were attempting the transport; closing ' + transport,\r\n            );\r\n            transport.close();\r\n          }\r\n          callback(true);\r\n          return;\r\n        }\r\n\r\n        if (wrappedErr) {\r\n          Logger.logAction(\r\n            this.logger,\r\n            Logger.LOG_MINOR,\r\n            'ConnectionManager.tryATransport()',\r\n            'transport ' + candidate + ' ' + wrappedErr.event + ', err: ' + wrappedErr.error.toString(),\r\n          );\r\n\r\n          /* Comet transport onconnect token errors can be dealt with here.\r\n           * Websocket ones only happen after the transport claims to be viable,\r\n           * so are dealt with as non-onconnect token errors */\r\n          if (\r\n            Auth.isTokenErr(wrappedErr.error) &&\r\n            !(this.errorReason && Auth.isTokenErr(this.errorReason as ErrorInfo))\r\n          ) {\r\n            this.errorReason = wrappedErr.error;\r\n            /* re-get a token and try again */\r\n            Utils.whenPromiseSettles(this.realtime.auth._forceNewToken(null, null), (err: ErrorInfo | null) => {\r\n              if (err) {\r\n                this.actOnErrorFromAuthorize(err);\r\n                return;\r\n              }\r\n              this.tryATransport(transportParams, candidate, callback);\r\n            });\r\n          } else if (wrappedErr.event === 'failed') {\r\n            /* Error that's fatal to the connection */\r\n            this.notifyState({ state: 'failed', error: wrappedErr.error });\r\n            callback(true);\r\n          } else if (wrappedErr.event === 'disconnected') {\r\n            if (!isRetriable(wrappedErr.error)) {\r\n              /* Error received from the server that does not call for trying a fallback host, eg a rate limit */\r\n              this.notifyState({ state: this.states.connecting.failState as string, error: wrappedErr.error });\r\n              callback(true);\r\n            } else {\r\n              /* Error with that transport only; continue trying other fallback hosts */\r\n              callback(false);\r\n            }\r\n          }\r\n          return;\r\n        }\r\n\r\n        Logger.logAction(\r\n          this.logger,\r\n          Logger.LOG_MICRO,\r\n          'ConnectionManager.tryATransport()',\r\n          'viable transport ' + candidate + '; setting pending',\r\n        );\r\n        this.setTransportPending(transport as Transport, transportParams);\r\n        callback(null, transport);\r\n      },\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Called when a transport is indicated to be viable, and the ConnectionManager\r\n   * expects to activate this transport as soon as it is connected.\r\n   * @param transport\r\n   * @param transportParams\r\n   */\r\n  setTransportPending(transport: Transport, transportParams: TransportParams): void {\r\n    const mode = transportParams.mode;\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MINOR,\r\n      'ConnectionManager.setTransportPending()',\r\n      'transport = ' + transport + '; mode = ' + mode,\r\n    );\r\n\r\n    this.pendingTransport = transport;\r\n\r\n    this.cancelWebSocketSlowTimer();\r\n    this.cancelWebSocketGiveUpTimer();\r\n\r\n    transport.once('connected', (error: ErrorInfo, connectionId: string, connectionDetails: Record<string, any>) => {\r\n      this.activateTransport(error, transport, connectionId, connectionDetails);\r\n\r\n      if (mode === 'recover' && this.options.recover) {\r\n        /* After a successful recovery, we unpersist, as a recovery key cannot\r\n         * be used more than once */\r\n        delete this.options.recover;\r\n        this.unpersistConnection();\r\n      }\r\n    });\r\n\r\n    const self = this;\r\n    transport.on(['disconnected', 'closed', 'failed'], function (this: { event: string }, error: ErrorInfo) {\r\n      self.deactivateTransport(transport, this.event, error);\r\n    });\r\n\r\n    this.emit('transport.pending', transport);\r\n  }\r\n\r\n  /**\r\n   * Called when a transport is connected, and the connectionmanager decides that\r\n   * it will now be the active transport. Returns whether or not it activated\r\n   * the transport (if the connection is closing/closed it will choose not to).\r\n   * @param transport the transport instance\r\n   * @param connectionId the id of the new active connection\r\n   * @param connectionDetails the details of the new active connection\r\n   */\r\n  activateTransport(\r\n    error: ErrorInfo,\r\n    transport: Transport,\r\n    connectionId: string,\r\n    connectionDetails: Record<string, any>,\r\n  ): boolean {\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MINOR,\r\n      'ConnectionManager.activateTransport()',\r\n      'transport = ' + transport,\r\n    );\r\n    if (error) {\r\n      Logger.logAction(this.logger, Logger.LOG_ERROR, 'ConnectionManager.activateTransport()', 'error = ' + error);\r\n    }\r\n    if (connectionId) {\r\n      Logger.logAction(\r\n        this.logger,\r\n        Logger.LOG_MICRO,\r\n        'ConnectionManager.activateTransport()',\r\n        'connectionId =  ' + connectionId,\r\n      );\r\n    }\r\n    if (connectionDetails) {\r\n      Logger.logAction(\r\n        this.logger,\r\n        Logger.LOG_MICRO,\r\n        'ConnectionManager.activateTransport()',\r\n        'connectionDetails =  ' + JSON.stringify(connectionDetails),\r\n      );\r\n    }\r\n\r\n    this.persistTransportPreference(transport);\r\n\r\n    /* if the connectionmanager moved to the closing/closed state before this\r\n     * connection event, then we won't activate this transport */\r\n    const existingState = this.state,\r\n      connectedState = this.states.connected.state;\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MINOR,\r\n      'ConnectionManager.activateTransport()',\r\n      'current state = ' + existingState.state,\r\n    );\r\n    if (\r\n      existingState.state == this.states.closing.state ||\r\n      existingState.state == this.states.closed.state ||\r\n      existingState.state == this.states.failed.state\r\n    ) {\r\n      Logger.logAction(\r\n        this.logger,\r\n        Logger.LOG_MINOR,\r\n        'ConnectionManager.activateTransport()',\r\n        'Disconnecting transport and abandoning',\r\n      );\r\n      transport.disconnect();\r\n      return false;\r\n    }\r\n\r\n    delete this.pendingTransport;\r\n\r\n    /* if the transport is not connected then don't activate it */\r\n    if (!transport.isConnected) {\r\n      Logger.logAction(\r\n        this.logger,\r\n        Logger.LOG_MINOR,\r\n        'ConnectionManager.activateTransport()',\r\n        'Declining to activate transport ' + transport + ' since it appears to no longer be connected',\r\n      );\r\n      return false;\r\n    }\r\n\r\n    /* the given transport is connected; this will immediately\r\n     * take over as the active transport */\r\n    const existingActiveProtocol = this.activeProtocol;\r\n    this.activeProtocol = new Protocol(transport);\r\n    this.host = transport.params.host;\r\n\r\n    const connectionKey = connectionDetails.connectionKey;\r\n    if (connectionKey && this.connectionKey != connectionKey) {\r\n      this.setConnection(connectionId, connectionDetails, !!error);\r\n    }\r\n\r\n    /* Rebroadcast any new connectionDetails from the active transport, which\r\n     * can come at any time (eg following a reauth), and emit an RTN24 UPDATE\r\n     * event. (Listener added on nextTick because we're in a transport.on('connected')\r\n     * callback at the moment; if we add it now we'll be adding it to the end\r\n     * of the listeners array and it'll be called immediately) */\r\n    this.onConnectionDetailsUpdate(connectionDetails, transport);\r\n    Platform.Config.nextTick(() => {\r\n      transport.on(\r\n        'connected',\r\n        (connectedErr: ErrorInfo, _connectionId: string, connectionDetails: Record<string, any>) => {\r\n          this.onConnectionDetailsUpdate(connectionDetails, transport);\r\n          this.emit('update', new ConnectionStateChange(connectedState, connectedState, null, connectedErr));\r\n        },\r\n      );\r\n    });\r\n\r\n    /* If previously not connected, notify the state change (including any\r\n     * error). */\r\n    if (existingState.state === this.states.connected.state) {\r\n      if (error) {\r\n        this.errorReason = this.realtime.connection.errorReason = error;\r\n        this.emit('update', new ConnectionStateChange(connectedState, connectedState, null, error));\r\n      }\r\n    } else {\r\n      this.notifyState({ state: 'connected', error: error });\r\n      this.errorReason = this.realtime.connection.errorReason = error || null;\r\n    }\r\n\r\n    /* Send after the connection state update, as Channels hooks into this to\r\n     * resend attaches on a new transport if necessary */\r\n    this.emit('transport.active', transport);\r\n\r\n    /* Gracefully terminate existing protocol */\r\n    if (existingActiveProtocol) {\r\n      if (existingActiveProtocol.messageQueue.count() > 0) {\r\n        /* We could just requeue pending messages on the new transport, but\r\n         * actually this should never happen: transports should only take over\r\n         * from other active transports when upgrading, and upgrading waits for\r\n         * the old transport to be idle. So log an error. */\r\n        Logger.logAction(\r\n          this.logger,\r\n          Logger.LOG_ERROR,\r\n          'ConnectionManager.activateTransport()',\r\n          'Previous active protocol (for transport ' +\r\n            existingActiveProtocol.transport.shortName +\r\n            ', new one is ' +\r\n            transport.shortName +\r\n            ') finishing with ' +\r\n            existingActiveProtocol.messageQueue.count() +\r\n            ' messages still pending',\r\n        );\r\n      }\r\n      if (existingActiveProtocol.transport === transport) {\r\n        const msg =\r\n          'Assumption violated: activating a transport that was also the transport for the previous active protocol; transport = ' +\r\n          transport.shortName +\r\n          '; stack = ' +\r\n          new Error().stack;\r\n        Logger.logAction(this.logger, Logger.LOG_ERROR, 'ConnectionManager.activateTransport()', msg);\r\n      } else {\r\n        existingActiveProtocol.finish();\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Called when a transport is no longer the active transport. This can occur\r\n   * in any transport connection state.\r\n   * @param transport\r\n   */\r\n  deactivateTransport(transport: Transport, state: string, error: ErrorInfo): void {\r\n    const currentProtocol = this.activeProtocol,\r\n      wasActive = currentProtocol && currentProtocol.getTransport() === transport,\r\n      wasPending = transport === this.pendingTransport,\r\n      noTransportsScheduledForActivation = this.noTransportsScheduledForActivation();\r\n\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MINOR,\r\n      'ConnectionManager.deactivateTransport()',\r\n      'transport = ' + transport,\r\n    );\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MINOR,\r\n      'ConnectionManager.deactivateTransport()',\r\n      'state = ' +\r\n        state +\r\n        (wasActive ? '; was active' : wasPending ? '; was pending' : '') +\r\n        (noTransportsScheduledForActivation ? '' : '; another transport is scheduled for activation'),\r\n    );\r\n    if (error && error.message)\r\n      Logger.logAction(\r\n        this.logger,\r\n        Logger.LOG_MICRO,\r\n        'ConnectionManager.deactivateTransport()',\r\n        'reason =  ' + error.message,\r\n      );\r\n\r\n    if (wasActive) {\r\n      Logger.logAction(\r\n        this.logger,\r\n        Logger.LOG_MICRO,\r\n        'ConnectionManager.deactivateTransport()',\r\n        'Getting, clearing, and requeuing ' +\r\n          (this.activeProtocol as Protocol).messageQueue.count() +\r\n          ' pending messages',\r\n      );\r\n      this.queuePendingMessages((currentProtocol as Protocol).getPendingMessages());\r\n      /* Clear any messages we requeue to allow the protocol to become idle.*/\r\n      (currentProtocol as Protocol).clearPendingMessages();\r\n      this.activeProtocol = this.host = null;\r\n    }\r\n\r\n    this.emit('transport.inactive', transport);\r\n\r\n    /* this transport state change is a state change for the connectionmanager if\r\n     * - the transport was the active transport and there are no transports\r\n     *   which are connected and scheduled for activation, just waiting for the\r\n     *   active transport to finish what its doing; or\r\n     * - the transport was the active transport and the error was fatal (so\r\n     *   unhealable by another transport); or\r\n     * - there is no active transport, and this is the last remaining\r\n     *   pending transport (so we were in the connecting state)\r\n     */\r\n    if (\r\n      (wasActive && noTransportsScheduledForActivation) ||\r\n      (wasActive && state === 'failed') ||\r\n      state === 'closed' ||\r\n      (currentProtocol === null && wasPending)\r\n    ) {\r\n      /* If we're disconnected with a 5xx we need to try fallback hosts\r\n       * (RTN14d), but (a) due to how the upgrade sequence works, the\r\n       * host/transport selection sequence only cares about getting to\r\n       * `preconnect` (eg establishing a websocket) getting a `disconnected`\r\n       * protocol message afterwards is too late; and (b) host retry only\r\n       * applies to connectBase unless the stored preference transport doesn't\r\n       * work. We solve this by unpersisting the transport preference and\r\n       * setting an instance variable to force fallback hosts to be used (if\r\n       * any) here. Bit of a kludge, but no real better alternatives without\r\n       * rewriting the entire thing */\r\n      if (state === 'disconnected' && error && (error.statusCode as number) > 500 && this.domains.length > 1) {\r\n        this.unpersistTransportPreference();\r\n        this.forceFallbackHost = true;\r\n        /* and try to connect again to try a fallback host without waiting for the usual 15s disconnectedRetryTimeout */\r\n        this.notifyState({ state: state, error: error, retryImmediately: true });\r\n        return;\r\n      }\r\n\r\n      /* TODO remove below line once realtime sends token errors as DISCONNECTEDs */\r\n      const newConnectionState = state === 'failed' && Auth.isTokenErr(error) ? 'disconnected' : state;\r\n      this.notifyState({ state: newConnectionState, error: error });\r\n      return;\r\n    }\r\n  }\r\n\r\n  /* Helper that returns true if there are no transports which are pending,\r\n   * have been connected, and are just waiting for onceNoPending to fire before\r\n   * being activated */\r\n  noTransportsScheduledForActivation(): boolean {\r\n    return !this.pendingTransport || !this.pendingTransport.isConnected;\r\n  }\r\n\r\n  setConnection(connectionId: string, connectionDetails: Record<string, any>, hasConnectionError?: boolean): void {\r\n    /* if connectionKey changes but connectionId stays the same, then just a\r\n     * transport change on the same connection. If connectionId changes, we're\r\n     * on a new connection, with implications for msgSerial and channel state */\r\n    /* If no previous connectionId, don't reset the msgSerial as it may have\r\n     * been set by recover data (unless the recover failed) */\r\n    const prevConnId = this.connectionId,\r\n      connIdChanged = prevConnId && prevConnId !== connectionId,\r\n      recoverFailure = !prevConnId && hasConnectionError;\r\n    if (connIdChanged || recoverFailure) {\r\n      Logger.logAction(this.logger, Logger.LOG_MINOR, 'ConnectionManager.setConnection()', 'Resetting msgSerial');\r\n      this.msgSerial = 0;\r\n      // RTN19a2: In the event of a new connectionId, previous msgSerials are\r\n      // meaningless.\r\n      this.queuedMessages.resetSendAttempted();\r\n    }\r\n    if (this.connectionId !== connectionId) {\r\n      Logger.logAction(\r\n        this.logger,\r\n        Logger.LOG_MINOR,\r\n        'ConnectionManager.setConnection()',\r\n        'New connectionId; reattaching any attached channels',\r\n      );\r\n    }\r\n    this.realtime.connection.id = this.connectionId = connectionId;\r\n    this.realtime.connection.key = this.connectionKey = connectionDetails.connectionKey;\r\n  }\r\n\r\n  clearConnection(): void {\r\n    this.realtime.connection.id = this.connectionId = undefined;\r\n    this.realtime.connection.key = this.connectionKey = undefined;\r\n    this.msgSerial = 0;\r\n    this.unpersistConnection();\r\n  }\r\n\r\n  createRecoveryKey(): string | null {\r\n    // RTN16g2.\r\n    if (!this.connectionKey) {\r\n      return null;\r\n    }\r\n\r\n    return JSON.stringify({\r\n      connectionKey: this.connectionKey,\r\n      msgSerial: this.msgSerial,\r\n      channelSerials: this.realtime.channels.channelSerials(),\r\n    });\r\n  }\r\n\r\n  checkConnectionStateFreshness(): void {\r\n    if (!this.lastActivity || !this.connectionId) {\r\n      return;\r\n    }\r\n\r\n    const sinceLast = Date.now() - this.lastActivity;\r\n    if (sinceLast > this.connectionStateTtl + (this.maxIdleInterval as number)) {\r\n      Logger.logAction(\r\n        this.logger,\r\n        Logger.LOG_MINOR,\r\n        'ConnectionManager.checkConnectionStateFreshness()',\r\n        'Last known activity from realtime was ' + sinceLast + 'ms ago; discarding connection state',\r\n      );\r\n      this.clearConnection();\r\n      this.states.connecting.failState = 'suspended';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the connectionmanager wants to persist transport\r\n   * state for later recovery. Only applicable in the browser context.\r\n   */\r\n  persistConnection(): void {\r\n    if (haveSessionStorage()) {\r\n      const recoveryKey = this.createRecoveryKey();\r\n      if (recoveryKey) {\r\n        this.setSessionRecoverData({\r\n          recoveryKey: recoveryKey,\r\n          disconnectedAt: Date.now(),\r\n          location: globalObject.location,\r\n          clientId: this.realtime.auth.clientId,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the connectionmanager wants to persist transport\r\n   * state for later recovery. Only applicable in the browser context.\r\n   */\r\n  unpersistConnection(): void {\r\n    this.clearSessionRecoverData();\r\n  }\r\n\r\n  getActiveTransportFormat(): Utils.Format | undefined {\r\n    return this.activeProtocol?.getTransport().format;\r\n  }\r\n\r\n  /*********************\r\n   * state management\r\n   *********************/\r\n\r\n  getError(): IPartialErrorInfo | string {\r\n    if (this.errorReason) {\r\n      // create new PartialErrorInfo so it has the correct stack trace\r\n      // which points to the place which caused us to return this error.\r\n      const newError = PartialErrorInfo.fromValues(this.errorReason);\r\n      newError.cause = this.errorReason;\r\n      return newError;\r\n    }\r\n\r\n    return this.getStateError();\r\n  }\r\n\r\n  getStateError(): ErrorInfo {\r\n    return (ConnectionErrors as Record<string, () => ErrorInfo>)[this.state.state]?.();\r\n  }\r\n\r\n  activeState(): boolean | void {\r\n    return this.state.queueEvents || this.state.sendEvents;\r\n  }\r\n\r\n  enactStateChange(stateChange: ConnectionStateChange): void {\r\n    const action = 'Connection state';\r\n    const message = stateChange.current + (stateChange.reason ? '; reason: ' + stateChange.reason : '');\r\n    if (stateChange.current === 'failed') {\r\n      Logger.logAction(this.logger, Logger.LOG_ERROR, action, message);\r\n    } else {\r\n      Logger.logAction(this.logger, Logger.LOG_MAJOR, action, message);\r\n    }\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MINOR,\r\n      'ConnectionManager.enactStateChange',\r\n      'setting new state: ' +\r\n        stateChange.current +\r\n        '; reason = ' +\r\n        (stateChange.reason && (stateChange.reason as ErrorInfo).message),\r\n    );\r\n    const newState = (this.state = this.states[stateChange.current as string]);\r\n    if (stateChange.reason) {\r\n      this.errorReason = stateChange.reason;\r\n      // TODO remove this type assertion after fixing https://github.com/ably/ably-js/issues/1405\r\n      this.realtime.connection.errorReason = stateChange.reason as ErrorInfo;\r\n    }\r\n    if (newState.terminal || newState.state === 'suspended') {\r\n      /* suspended is nonterminal, but once in the suspended state, realtime\r\n       * will have discarded our connection state, so futher connection\r\n       * attempts should start from scratch */\r\n      this.clearConnection();\r\n    }\r\n    this.emit('connectionstate', stateChange);\r\n  }\r\n\r\n  /****************************************\r\n   * ConnectionManager connection lifecycle\r\n   ****************************************/\r\n\r\n  startTransitionTimer(transitionState: ConnectionState): void {\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MINOR,\r\n      'ConnectionManager.startTransitionTimer()',\r\n      'transitionState: ' + transitionState.state,\r\n    );\r\n\r\n    if (this.transitionTimer) {\r\n      Logger.logAction(\r\n        this.logger,\r\n        Logger.LOG_MINOR,\r\n        'ConnectionManager.startTransitionTimer()',\r\n        'clearing already-running timer',\r\n      );\r\n      clearTimeout(this.transitionTimer as number);\r\n    }\r\n\r\n    this.transitionTimer = setTimeout(() => {\r\n      if (this.transitionTimer) {\r\n        this.transitionTimer = null;\r\n        Logger.logAction(\r\n          this.logger,\r\n          Logger.LOG_MINOR,\r\n          'ConnectionManager ' + transitionState.state + ' timer expired',\r\n          'requesting new state: ' + transitionState.failState,\r\n        );\r\n        this.notifyState({ state: transitionState.failState as string });\r\n      }\r\n    }, transitionState.retryDelay);\r\n  }\r\n\r\n  cancelTransitionTimer(): void {\r\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'ConnectionManager.cancelTransitionTimer()', '');\r\n    if (this.transitionTimer) {\r\n      clearTimeout(this.transitionTimer as number);\r\n      this.transitionTimer = null;\r\n    }\r\n  }\r\n\r\n  startSuspendTimer(): void {\r\n    if (this.suspendTimer) return;\r\n    this.suspendTimer = setTimeout(() => {\r\n      if (this.suspendTimer) {\r\n        this.suspendTimer = null;\r\n        Logger.logAction(\r\n          this.logger,\r\n          Logger.LOG_MINOR,\r\n          'ConnectionManager suspend timer expired',\r\n          'requesting new state: suspended',\r\n        );\r\n        this.states.connecting.failState = 'suspended';\r\n        this.notifyState({ state: 'suspended' });\r\n      }\r\n    }, this.connectionStateTtl);\r\n  }\r\n\r\n  checkSuspendTimer(state: string): void {\r\n    if (state !== 'disconnected' && state !== 'suspended' && state !== 'connecting') this.cancelSuspendTimer();\r\n  }\r\n\r\n  cancelSuspendTimer(): void {\r\n    this.states.connecting.failState = 'disconnected';\r\n    if (this.suspendTimer) {\r\n      clearTimeout(this.suspendTimer as number);\r\n      this.suspendTimer = null;\r\n    }\r\n  }\r\n\r\n  startRetryTimer(interval: number): void {\r\n    this.retryTimer = setTimeout(() => {\r\n      Logger.logAction(this.logger, Logger.LOG_MINOR, 'ConnectionManager retry timer expired', 'retrying');\r\n      this.retryTimer = null;\r\n      this.requestState({ state: 'connecting' });\r\n    }, interval);\r\n  }\r\n\r\n  cancelRetryTimer(): void {\r\n    if (this.retryTimer) {\r\n      clearTimeout(this.retryTimer as NodeJS.Timeout);\r\n      this.retryTimer = null;\r\n    }\r\n  }\r\n\r\n  startWebSocketSlowTimer() {\r\n    this.webSocketSlowTimer = setTimeout(() => {\r\n      Logger.logAction(\r\n        this.logger,\r\n        Logger.LOG_MINOR,\r\n        'ConnectionManager WebSocket slow timer',\r\n        'checking connectivity',\r\n      );\r\n      this.checkWsConnectivity()\r\n        .then(() => {\r\n          Logger.logAction(\r\n            this.logger,\r\n            Logger.LOG_MINOR,\r\n            'ConnectionManager WebSocket slow timer',\r\n            'ws connectivity check succeeded',\r\n          );\r\n          this.wsCheckResult = true;\r\n        })\r\n        .catch(() => {\r\n          Logger.logAction(\r\n            this.logger,\r\n            Logger.LOG_MAJOR,\r\n            'ConnectionManager WebSocket slow timer',\r\n            'ws connectivity check failed',\r\n          );\r\n          this.wsCheckResult = false;\r\n        });\r\n      if (this.realtime.http.checkConnectivity) {\r\n        Utils.whenPromiseSettles(this.realtime.http.checkConnectivity(), (err, connectivity) => {\r\n          if (err || !connectivity) {\r\n            Logger.logAction(\r\n              this.logger,\r\n              Logger.LOG_MAJOR,\r\n              'ConnectionManager WebSocket slow timer',\r\n              'http connectivity check failed',\r\n            );\r\n            this.cancelWebSocketGiveUpTimer();\r\n            this.notifyState({\r\n              state: 'disconnected',\r\n              error: new ErrorInfo('Unable to connect (network unreachable)', 80003, 404),\r\n            });\r\n          } else {\r\n            Logger.logAction(\r\n              this.logger,\r\n              Logger.LOG_MINOR,\r\n              'ConnectionManager WebSocket slow timer',\r\n              'http connectivity check succeeded',\r\n            );\r\n          }\r\n        });\r\n      }\r\n    }, this.options.timeouts.webSocketSlowTimeout);\r\n  }\r\n\r\n  cancelWebSocketSlowTimer() {\r\n    if (this.webSocketSlowTimer) {\r\n      clearTimeout(this.webSocketSlowTimer);\r\n      this.webSocketSlowTimer = null;\r\n    }\r\n  }\r\n\r\n  startWebSocketGiveUpTimer(transportParams: TransportParams) {\r\n    this.webSocketGiveUpTimer = setTimeout(() => {\r\n      if (!this.wsCheckResult) {\r\n        Logger.logAction(\r\n          this.logger,\r\n          Logger.LOG_MINOR,\r\n          'ConnectionManager WebSocket give up timer',\r\n          'websocket connection took more than 10s; ' + (this.baseTransport ? 'trying base transport' : ''),\r\n        );\r\n        if (this.baseTransport) {\r\n          this.abandonedWebSocket = true;\r\n          this.proposedTransport?.dispose();\r\n          this.pendingTransport?.dispose();\r\n          this.connectBase(transportParams, ++this.connectCounter);\r\n        } else {\r\n          // if we don't have a base transport to fallback to, just let the websocket connection attempt time out\r\n          Logger.logAction(\r\n            this.logger,\r\n            Logger.LOG_MAJOR,\r\n            'ConnectionManager WebSocket give up timer',\r\n            'websocket connectivity appears to be unavailable but no other transports to try',\r\n          );\r\n        }\r\n      }\r\n    }, this.options.timeouts.webSocketConnectTimeout);\r\n  }\r\n\r\n  cancelWebSocketGiveUpTimer() {\r\n    if (this.webSocketGiveUpTimer) {\r\n      clearTimeout(this.webSocketGiveUpTimer);\r\n      this.webSocketGiveUpTimer = null;\r\n    }\r\n  }\r\n\r\n  notifyState(indicated: ConnectionState): void {\r\n    const state = indicated.state;\r\n\r\n    /* We retry immediately if:\r\n     * - something disconnects us while we're connected, or\r\n     * - a viable (but not yet active) transport fails due to a token error (so\r\n     *   this.errorReason will be set, and startConnect will do a forced\r\n     *   authorize). If this.errorReason is already set (to a token error),\r\n     *   then there has been at least one previous attempt to connect that also\r\n     *   failed for a token error, so by RTN14b we go to DISCONNECTED and wait\r\n     *   before trying again */\r\n    const retryImmediately =\r\n      state === 'disconnected' &&\r\n      (this.state === this.states.connected ||\r\n        indicated.retryImmediately ||\r\n        (this.state === this.states.connecting &&\r\n          indicated.error &&\r\n          Auth.isTokenErr(indicated.error) &&\r\n          !(this.errorReason && Auth.isTokenErr(this.errorReason as ErrorInfo))));\r\n\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MINOR,\r\n      'ConnectionManager.notifyState()',\r\n      'new state: ' + state + (retryImmediately ? '; will retry connection immediately' : ''),\r\n    );\r\n    /* do nothing if we're already in the indicated state */\r\n    if (state == this.state.state) return;\r\n\r\n    /* kill timers (possibly excepting suspend timer depending on the notified\r\n     * state), as these are superseded by this notification */\r\n    this.cancelTransitionTimer();\r\n    this.cancelRetryTimer();\r\n    this.cancelWebSocketSlowTimer();\r\n    this.cancelWebSocketGiveUpTimer();\r\n    this.checkSuspendTimer(indicated.state);\r\n\r\n    if (state === 'suspended' || state === 'connected') {\r\n      this.disconnectedRetryCount = 0;\r\n    }\r\n\r\n    /* do nothing if we're unable to move from the current state */\r\n    if (this.state.terminal) return;\r\n\r\n    /* process new state */\r\n    const newState = this.states[indicated.state];\r\n\r\n    let retryDelay = newState.retryDelay;\r\n    if (newState.state === 'disconnected') {\r\n      this.disconnectedRetryCount++;\r\n      retryDelay = Utils.getRetryTime(newState.retryDelay as number, this.disconnectedRetryCount);\r\n    }\r\n\r\n    const change = new ConnectionStateChange(\r\n      this.state.state,\r\n      newState.state,\r\n      retryDelay,\r\n      indicated.error || (ConnectionErrors as Partial<Record<string, () => ErrorInfo>>)[newState.state]?.(),\r\n    );\r\n\r\n    if (retryImmediately) {\r\n      const autoReconnect = () => {\r\n        if (this.state === this.states.disconnected) {\r\n          this.lastAutoReconnectAttempt = Date.now();\r\n          this.requestState({ state: 'connecting' });\r\n        }\r\n      };\r\n      const sinceLast = this.lastAutoReconnectAttempt && Date.now() - this.lastAutoReconnectAttempt + 1;\r\n      if (sinceLast && sinceLast < 1000) {\r\n        Logger.logAction(\r\n          this.logger,\r\n          Logger.LOG_MICRO,\r\n          'ConnectionManager.notifyState()',\r\n          'Last reconnect attempt was only ' +\r\n            sinceLast +\r\n            'ms ago, waiting another ' +\r\n            (1000 - sinceLast) +\r\n            'ms before trying again',\r\n        );\r\n        setTimeout(autoReconnect, 1000 - sinceLast);\r\n      } else {\r\n        Platform.Config.nextTick(autoReconnect);\r\n      }\r\n    } else if (state === 'disconnected' || state === 'suspended') {\r\n      this.startRetryTimer(retryDelay as number);\r\n    }\r\n\r\n    /* If going into disconnect/suspended (and not retrying immediately), or a\r\n     * terminal state, ensure there are no orphaned transports hanging around. */\r\n    if ((state === 'disconnected' && !retryImmediately) || state === 'suspended' || newState.terminal) {\r\n      /* Wait till the next tick so the connection state change is enacted,\r\n       * so aborting transports doesn't trigger redundant state changes */\r\n      Platform.Config.nextTick(() => {\r\n        this.disconnectAllTransports();\r\n      });\r\n    }\r\n\r\n    if (state == 'connected' && !this.activeProtocol) {\r\n      Logger.logAction(\r\n        this.logger,\r\n        Logger.LOG_ERROR,\r\n        'ConnectionManager.notifyState()',\r\n        'Broken invariant: attempted to go into connected state, but there is no active protocol',\r\n      );\r\n    }\r\n\r\n    /* implement the change and notify */\r\n    this.enactStateChange(change);\r\n    if (this.state.sendEvents) {\r\n      this.sendQueuedMessages();\r\n    } else if (!this.state.queueEvents) {\r\n      this.realtime.channels.propogateConnectionInterruption(state, change.reason);\r\n      this.failQueuedMessages(change.reason as ErrorInfo); // RTN7c\r\n    }\r\n  }\r\n\r\n  requestState(request: any): void {\r\n    const state = request.state;\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MINOR,\r\n      'ConnectionManager.requestState()',\r\n      'requested state: ' + state + '; current state: ' + this.state.state,\r\n    );\r\n    if (state == this.state.state) return; /* silently do nothing */\r\n\r\n    /* kill running timers, as this request supersedes them */\r\n    this.cancelWebSocketSlowTimer();\r\n    this.cancelWebSocketGiveUpTimer();\r\n    this.cancelTransitionTimer();\r\n    this.cancelRetryTimer();\r\n    /* for suspend timer check rather than cancel -- eg requesting a connecting\r\n     * state should not reset the suspend timer */\r\n    this.checkSuspendTimer(state);\r\n\r\n    if (state == 'connecting' && this.state.state == 'connected') return;\r\n    if (state == 'closing' && this.state.state == 'closed') return;\r\n\r\n    const newState = this.states[state],\r\n      change = new ConnectionStateChange(\r\n        this.state.state,\r\n        newState.state,\r\n        null,\r\n        request.error || (ConnectionErrors as Partial<Record<string, () => ErrorInfo>>)[newState.state]?.(),\r\n      );\r\n\r\n    this.enactStateChange(change);\r\n\r\n    if (state == 'connecting') {\r\n      Platform.Config.nextTick(() => {\r\n        this.startConnect();\r\n      });\r\n    }\r\n    if (state == 'closing') {\r\n      this.closeImpl();\r\n    }\r\n  }\r\n\r\n  startConnect(): void {\r\n    if (this.state !== this.states.connecting) {\r\n      Logger.logAction(\r\n        this.logger,\r\n        Logger.LOG_MINOR,\r\n        'ConnectionManager.startConnect()',\r\n        'Must be in connecting state to connect, but was ' + this.state.state,\r\n      );\r\n      return;\r\n    }\r\n\r\n    const auth = this.realtime.auth;\r\n\r\n    /* The point of the connectCounter mechanism is to ensure that the\r\n     * connection procedure can be cancelled. We want disconnectAllTransports\r\n     * to be able to stop any in-progress connection, even before it gets to\r\n     * the stage of having a pending (or even a proposed) transport that it can\r\n     * dispose() of. So we check that it's still current after any async stage,\r\n     * up until the stage that is synchronous with instantiating a transport */\r\n    const connectCount = ++this.connectCounter;\r\n\r\n    const connect = () => {\r\n      this.checkConnectionStateFreshness();\r\n      this.getTransportParams((transportParams: TransportParams) => {\r\n        if (transportParams.mode === 'recover' && transportParams.options.recover) {\r\n          const recoveryContext = decodeRecoveryKey(transportParams.options.recover);\r\n          if (recoveryContext) {\r\n            this.realtime.channels.recoverChannels(recoveryContext.channelSerials);\r\n          }\r\n        }\r\n\r\n        if (connectCount !== this.connectCounter) {\r\n          return;\r\n        }\r\n        this.connectImpl(transportParams, connectCount);\r\n      });\r\n    };\r\n\r\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'ConnectionManager.startConnect()', 'starting connection');\r\n    this.startSuspendTimer();\r\n    this.startTransitionTimer(this.states.connecting);\r\n\r\n    if (auth.method === 'basic') {\r\n      connect();\r\n    } else {\r\n      const authCb = (err: ErrorInfo | null) => {\r\n        if (connectCount !== this.connectCounter) {\r\n          return;\r\n        }\r\n        if (err) {\r\n          this.actOnErrorFromAuthorize(err);\r\n        } else {\r\n          connect();\r\n        }\r\n      };\r\n      if (this.errorReason && Auth.isTokenErr(this.errorReason as ErrorInfo)) {\r\n        /* Force a refetch of a new token */\r\n        Utils.whenPromiseSettles(auth._forceNewToken(null, null), authCb);\r\n      } else {\r\n        Utils.whenPromiseSettles(auth._ensureValidAuthCredentials(false), authCb);\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n   * there are, at most, two transports available with which a connection may\r\n   * be attempted: web_socket and/or a base transport (xhr_polling in browsers,\r\n   * comet in nodejs). web_socket is always preferred, and the base transport is\r\n   * only used in case web_socket connectivity appears to be unavailable.\r\n   *\r\n   * connectImpl begins the transport selection process by checking which transports\r\n   * are available, and if there is a cached preference. It then defers to the\r\n   * transport-specific connect methods: connectWs and connectBase.\r\n   *\r\n   * It is also responsible for invalidating the cache in the case that a base\r\n   * transport preference is stored but web socket connectivity is now available.\r\n   *\r\n   * handling of the case where we need to failover from web_socket to the base\r\n   * transport is implemented in the connectWs method.\r\n   */\r\n  connectImpl(transportParams: TransportParams, connectCount: number): void {\r\n    const state = this.state.state;\r\n    if (state !== this.states.connecting.state) {\r\n      /* Only keep trying as long as in the 'connecting' state (or 'connected'\r\n       * for upgrading). Any operation can put us into 'disconnected' to cancel\r\n       * connection attempts and wait before retrying, or 'failed' to fail. */\r\n      Logger.logAction(\r\n        this.logger,\r\n\r\n        Logger.LOG_MINOR,\r\n        'ConnectionManager.connectImpl()',\r\n        'Must be in connecting state to connect, but was ' + state,\r\n      );\r\n      return;\r\n    }\r\n\r\n    const transportPreference = this.getTransportPreference();\r\n\r\n    // If transport preference is for a non-ws transport but websocket is now available, unpersist the preference for next time\r\n    if (transportPreference && transportPreference === this.baseTransport && this.webSocketTransportAvailable) {\r\n      this.checkWsConnectivity()\r\n        .then(() => {\r\n          this.unpersistTransportPreference();\r\n          if (this.state === this.states.connecting) {\r\n            Logger.logAction(\r\n              this.logger,\r\n\r\n              Logger.LOG_MINOR,\r\n              'ConnectionManager.connectImpl():',\r\n              'web socket connectivity available, cancelling connection attempt with ' + this.baseTransport,\r\n            );\r\n            this.disconnectAllTransports();\r\n            this.connectWs(transportParams, ++this.connectCounter);\r\n          }\r\n        })\r\n        .catch(noop);\r\n    }\r\n\r\n    if (\r\n      (transportPreference && transportPreference === this.baseTransport) ||\r\n      (this.baseTransport && !this.webSocketTransportAvailable)\r\n    ) {\r\n      this.connectBase(transportParams, connectCount);\r\n    } else {\r\n      this.connectWs(transportParams, connectCount);\r\n    }\r\n  }\r\n\r\n  /*\r\n   * connectWs starts two timers to monitor the success of a web_socket connection attempt:\r\n   * - webSocketSlowTimer: if this timer fires before the connection succeeds,\r\n   *   cm will simultaneously check websocket and http/xhr connectivity. if the http\r\n   *   connectivity check fails, we give up the connection sequence entirely and\r\n   *   transition to disconnected. if the websocket connectivity check fails then\r\n   *   we assume no ws connectivity and failover to base transport. in the case that\r\n   *   the checks succeed, we continue with websocket and wait for it to try fallback hosts\r\n   *   and, if unsuccessful, ultimately transition to disconnected.\r\n   * - webSocketGiveUpTimer: if this timer fires, and the preceding websocket\r\n   *   connectivity check is still pending then we assume that there is an issue\r\n   *   with the transport and fallback to base transport.\r\n   */\r\n  connectWs(transportParams: TransportParams, connectCount: number) {\r\n    Logger.logAction(this.logger, Logger.LOG_MICRO, 'ConnectionManager.connectWs()');\r\n    this.wsCheckResult = null;\r\n    this.abandonedWebSocket = false;\r\n    this.startWebSocketSlowTimer();\r\n    this.startWebSocketGiveUpTimer(transportParams);\r\n\r\n    this.tryTransportWithFallbacks('web_socket', transportParams, true, connectCount, () => {\r\n      return this.wsCheckResult !== false && !this.abandonedWebSocket;\r\n    });\r\n  }\r\n\r\n  connectBase(transportParams: TransportParams, connectCount: number) {\r\n    Logger.logAction(this.logger, Logger.LOG_MICRO, 'ConnectionManager.connectBase()');\r\n    if (this.baseTransport) {\r\n      this.tryTransportWithFallbacks(this.baseTransport, transportParams, false, connectCount, () => true);\r\n    } else {\r\n      this.notifyState({\r\n        state: 'disconnected',\r\n        error: new ErrorInfo('No transports left to try', 80000, 404),\r\n      });\r\n    }\r\n  }\r\n\r\n  tryTransportWithFallbacks(\r\n    transportName: TransportName,\r\n    transportParams: TransportParams,\r\n    ws: boolean,\r\n    connectCount: number,\r\n    shouldContinue: () => boolean,\r\n  ): void {\r\n    Logger.logAction(\r\n      this.logger,\r\n\r\n      Logger.LOG_MICRO,\r\n      'ConnectionManager.tryTransportWithFallbacks()',\r\n      transportName,\r\n    );\r\n    const giveUp = (err: IPartialErrorInfo) => {\r\n      this.notifyState({ state: this.states.connecting.failState as string, error: err });\r\n    };\r\n\r\n    const candidateHosts = this.domains.slice();\r\n\r\n    const hostAttemptCb = (fatal: boolean, transport: Transport) => {\r\n      if (connectCount !== this.connectCounter) {\r\n        return;\r\n      }\r\n      if (!shouldContinue()) {\r\n        if (transport) {\r\n          transport.dispose();\r\n        }\r\n        return;\r\n      }\r\n      if (!transport && !fatal) {\r\n        tryFallbackHosts();\r\n      }\r\n    };\r\n\r\n    /* first try to establish a connection with the priority host with http transport */\r\n    const host = candidateHosts.shift();\r\n    if (!host) {\r\n      giveUp(new ErrorInfo('Unable to connect (no available host)', 80003, 404));\r\n      return;\r\n    }\r\n    transportParams.host = host;\r\n\r\n    /* this is what we'll be doing if the attempt for the main host fails */\r\n    const tryFallbackHosts = () => {\r\n      /* if there aren't any fallback hosts, fail */\r\n      if (!candidateHosts.length) {\r\n        giveUp(new ErrorInfo('Unable to connect (and no more fallback hosts to try)', 80003, 404));\r\n        return;\r\n      }\r\n      /* before trying any fallback (or any remaining fallback) we decide if\r\n       * there is a problem with the ably host, or there is a general connectivity\r\n       * problem */\r\n      if (!this.realtime.http.checkConnectivity) {\r\n        giveUp(new PartialErrorInfo('Internal error: Http.checkConnectivity not set', null, 500));\r\n        return;\r\n      }\r\n      Utils.whenPromiseSettles(\r\n        this.realtime.http.checkConnectivity(),\r\n        (err?: ErrorInfo | null, connectivity?: boolean) => {\r\n          if (connectCount !== this.connectCounter) {\r\n            return;\r\n          }\r\n          if (!shouldContinue()) {\r\n            return;\r\n          }\r\n          /* we know err won't happen but handle it here anyway */\r\n          if (err) {\r\n            giveUp(err);\r\n            return;\r\n          }\r\n          if (!connectivity) {\r\n            /* the internet isn't reachable, so don't try the fallback hosts */\r\n            giveUp(new ErrorInfo('Unable to connect (network unreachable)', 80003, 404));\r\n            return;\r\n          }\r\n          /* the network is there, so there's a problem with the main host, or\r\n           * its dns. Try the fallback hosts. We could try them simultaneously but\r\n           * that would potentially cause a huge spike in load on the load balancer */\r\n          transportParams.host = Utils.arrPopRandomElement(candidateHosts);\r\n          this.tryATransport(transportParams, transportName, hostAttemptCb);\r\n        },\r\n      );\r\n    };\r\n\r\n    if (this.forceFallbackHost && candidateHosts.length) {\r\n      this.forceFallbackHost = false;\r\n      tryFallbackHosts();\r\n      return;\r\n    }\r\n\r\n    this.tryATransport(transportParams, transportName, hostAttemptCb);\r\n  }\r\n\r\n  closeImpl(): void {\r\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'ConnectionManager.closeImpl()', 'closing connection');\r\n    this.cancelSuspendTimer();\r\n    this.startTransitionTimer(this.states.closing);\r\n\r\n    if (this.pendingTransport) {\r\n      Logger.logAction(\r\n        this.logger,\r\n\r\n        Logger.LOG_MICRO,\r\n        'ConnectionManager.closeImpl()',\r\n        'Closing pending transport: ' + this.pendingTransport,\r\n      );\r\n      this.pendingTransport.close();\r\n    }\r\n\r\n    if (this.activeProtocol) {\r\n      Logger.logAction(\r\n        this.logger,\r\n\r\n        Logger.LOG_MICRO,\r\n        'ConnectionManager.closeImpl()',\r\n        'Closing active transport: ' + this.activeProtocol.getTransport(),\r\n      );\r\n      this.activeProtocol.getTransport().close();\r\n    }\r\n\r\n    /* If there was an active transport, this will probably be\r\n     * preempted by the notifyState call in deactivateTransport */\r\n    this.notifyState({ state: 'closed' });\r\n  }\r\n\r\n  onAuthUpdated(tokenDetails: API.TokenDetails, callback: Function): void {\r\n    switch (this.state.state) {\r\n      case 'connected': {\r\n        Logger.logAction(\r\n          this.logger,\r\n\r\n          Logger.LOG_MICRO,\r\n          'ConnectionManager.onAuthUpdated()',\r\n          'Sending AUTH message on active transport',\r\n        );\r\n\r\n        /* Do any transport-specific new-token action */\r\n        const activeTransport = this.activeProtocol?.getTransport();\r\n        if (activeTransport && activeTransport.onAuthUpdated) {\r\n          activeTransport.onAuthUpdated(tokenDetails);\r\n        }\r\n\r\n        const authMsg = protocolMessageFromValues({\r\n          action: actions.AUTH,\r\n          auth: {\r\n            accessToken: tokenDetails.token,\r\n          },\r\n        });\r\n        this.send(authMsg);\r\n\r\n        /* The answer will come back as either a connectiondetails event\r\n         * (realtime sends a CONNECTED to acknowledge the reauth) or a\r\n         * statechange to failed */\r\n        const successListener = () => {\r\n          this.off(failureListener);\r\n          callback(null, tokenDetails);\r\n        };\r\n        const failureListener = (stateChange: ConnectionStateChange) => {\r\n          if (stateChange.current === 'failed') {\r\n            this.off(successListener);\r\n            this.off(failureListener);\r\n            callback(stateChange.reason || this.getStateError());\r\n          }\r\n        };\r\n        this.once('connectiondetails', successListener);\r\n        this.on('connectionstate', failureListener);\r\n        break;\r\n      }\r\n\r\n      case 'connecting':\r\n        Logger.logAction(\r\n          this.logger,\r\n\r\n          Logger.LOG_MICRO,\r\n          'ConnectionManager.onAuthUpdated()',\r\n          'Aborting current connection attempts in order to start again with the new auth details',\r\n        );\r\n        this.disconnectAllTransports();\r\n      /* fallthrough to add statechange listener */\r\n\r\n      default: {\r\n        Logger.logAction(\r\n          this.logger,\r\n\r\n          Logger.LOG_MICRO,\r\n          'ConnectionManager.onAuthUpdated()',\r\n          'Connection state is ' + this.state.state + '; waiting until either connected or failed',\r\n        );\r\n        const listener = (stateChange: ConnectionStateChange) => {\r\n          switch (stateChange.current) {\r\n            case 'connected':\r\n              this.off(listener);\r\n              callback(null, tokenDetails);\r\n              break;\r\n            case 'failed':\r\n            case 'closed':\r\n            case 'suspended':\r\n              this.off(listener);\r\n              callback(stateChange.reason || this.getStateError());\r\n              break;\r\n            default:\r\n              /* ignore till we get either connected or failed */\r\n              break;\r\n          }\r\n        };\r\n        this.on('connectionstate', listener);\r\n        if (this.state.state === 'connecting') {\r\n          /* can happen if in the connecting state but no transport was pending\r\n           * yet, so disconnectAllTransports did not trigger a disconnected state */\r\n          this.startConnect();\r\n        } else {\r\n          this.requestState({ state: 'connecting' });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  disconnectAllTransports(): void {\r\n    Logger.logAction(\r\n      this.logger,\r\n\r\n      Logger.LOG_MINOR,\r\n      'ConnectionManager.disconnectAllTransports()',\r\n      'Disconnecting all transports',\r\n    );\r\n\r\n    /* This will prevent any connection procedure in an async part of one of its early stages from continuing */\r\n    this.connectCounter++;\r\n\r\n    if (this.pendingTransport) {\r\n      Logger.logAction(\r\n        this.logger,\r\n\r\n        Logger.LOG_MICRO,\r\n        'ConnectionManager.disconnectAllTransports()',\r\n        'Disconnecting pending transport: ' + this.pendingTransport,\r\n      );\r\n      this.pendingTransport.disconnect();\r\n    }\r\n    delete this.pendingTransport;\r\n\r\n    if (this.proposedTransport) {\r\n      Logger.logAction(\r\n        this.logger,\r\n\r\n        Logger.LOG_MICRO,\r\n        'ConnectionManager.disconnectAllTransports()',\r\n        'Disconnecting proposed transport: ' + this.pendingTransport,\r\n      );\r\n      this.proposedTransport.disconnect();\r\n    }\r\n    delete this.pendingTransport;\r\n\r\n    if (this.activeProtocol) {\r\n      Logger.logAction(\r\n        this.logger,\r\n\r\n        Logger.LOG_MICRO,\r\n        'ConnectionManager.disconnectAllTransports()',\r\n        'Disconnecting active transport: ' + this.activeProtocol.getTransport(),\r\n      );\r\n      this.activeProtocol.getTransport().disconnect();\r\n    }\r\n    /* No need to notify state disconnected; disconnecting the active transport\r\n     * will have that effect */\r\n  }\r\n\r\n  /******************\r\n   * event queueing\r\n   ******************/\r\n\r\n  send(msg: ProtocolMessage, queueEvent?: boolean, callback?: ErrCallback): void {\r\n    callback = callback || noop;\r\n    const state = this.state;\r\n\r\n    if (state.sendEvents) {\r\n      Logger.logAction(this.logger, Logger.LOG_MICRO, 'ConnectionManager.send()', 'sending event');\r\n      this.sendImpl(new PendingMessage(msg, callback));\r\n      return;\r\n    }\r\n    const shouldQueue = queueEvent && state.queueEvents;\r\n    if (!shouldQueue) {\r\n      const err = 'rejecting event, queueEvent was ' + queueEvent + ', state was ' + state.state;\r\n      Logger.logAction(this.logger, Logger.LOG_MICRO, 'ConnectionManager.send()', err);\r\n      callback(this.errorReason || new ErrorInfo(err, 90000, 400));\r\n      return;\r\n    }\r\n    if (this.logger.shouldLog(Logger.LOG_MICRO)) {\r\n      Logger.logAction(\r\n        this.logger,\r\n\r\n        Logger.LOG_MICRO,\r\n        'ConnectionManager.send()',\r\n        'queueing msg; ' +\r\n          stringifyProtocolMessage(\r\n            msg,\r\n            this.realtime._RealtimePresence,\r\n            this.realtime._Annotations,\r\n            this.realtime._objectsPlugin,\r\n          ),\r\n      );\r\n    }\r\n    this.queue(msg, callback);\r\n  }\r\n\r\n  sendImpl(pendingMessage: PendingMessage): void {\r\n    const msg = pendingMessage.message;\r\n    /* If have already attempted to send this, resend with the same msgSerial,\r\n     * so Ably can dedup if the previous send succeeded */\r\n    if (pendingMessage.ackRequired && !pendingMessage.sendAttempted) {\r\n      msg.msgSerial = this.msgSerial++;\r\n    }\r\n    try {\r\n      (this.activeProtocol as Protocol).send(pendingMessage);\r\n    } catch (e) {\r\n      Logger.logAction(\r\n        this.logger,\r\n\r\n        Logger.LOG_ERROR,\r\n        'ConnectionManager.sendImpl()',\r\n        'Unexpected exception in transport.send(): ' + (e as Error).stack,\r\n      );\r\n    }\r\n  }\r\n\r\n  queue(msg: ProtocolMessage, callback: ErrCallback): void {\r\n    Logger.logAction(this.logger, Logger.LOG_MICRO, 'ConnectionManager.queue()', 'queueing event');\r\n    const lastQueued = this.queuedMessages.last();\r\n    const maxSize = this.options.maxMessageSize;\r\n    /* If have already attempted to send a message, don't merge more messages\r\n     * into it, as if the previous send actually succeeded and realtime ignores\r\n     * the dup, they'll be lost */\r\n    if (lastQueued && !lastQueued.sendAttempted && bundleWith(lastQueued.message, msg, maxSize)) {\r\n      if (!lastQueued.merged) {\r\n        lastQueued.callback = Multicaster.create(this.logger, [lastQueued.callback]);\r\n        lastQueued.merged = true;\r\n      }\r\n      (lastQueued.callback as MulticasterInstance<void>).push(callback);\r\n    } else {\r\n      this.queuedMessages.push(new PendingMessage(msg, callback));\r\n    }\r\n  }\r\n\r\n  sendQueuedMessages(): void {\r\n    Logger.logAction(\r\n      this.logger,\r\n\r\n      Logger.LOG_MICRO,\r\n      'ConnectionManager.sendQueuedMessages()',\r\n      'sending ' + this.queuedMessages.count() + ' queued messages',\r\n    );\r\n    let pendingMessage;\r\n    while ((pendingMessage = this.queuedMessages.shift())) this.sendImpl(pendingMessage);\r\n  }\r\n\r\n  queuePendingMessages(pendingMessages: Array<PendingMessage>): void {\r\n    if (pendingMessages && pendingMessages.length) {\r\n      Logger.logAction(\r\n        this.logger,\r\n\r\n        Logger.LOG_MICRO,\r\n        'ConnectionManager.queuePendingMessages()',\r\n        'queueing ' + pendingMessages.length + ' pending messages',\r\n      );\r\n      this.queuedMessages.prepend(pendingMessages);\r\n    }\r\n  }\r\n\r\n  failQueuedMessages(err: ErrorInfo): void {\r\n    const numQueued = this.queuedMessages.count();\r\n    if (numQueued > 0) {\r\n      Logger.logAction(\r\n        this.logger,\r\n\r\n        Logger.LOG_ERROR,\r\n        'ConnectionManager.failQueuedMessages()',\r\n        'failing ' + numQueued + ' queued messages, err = ' + Utils.inspectError(err),\r\n      );\r\n      this.queuedMessages.completeAllMessages(err);\r\n    }\r\n  }\r\n\r\n  onChannelMessage(message: ProtocolMessage, transport: Transport): void {\r\n    this.pendingChannelMessagesState.queue.push({ message, transport });\r\n\r\n    if (!this.pendingChannelMessagesState.isProcessing) {\r\n      this.processNextPendingChannelMessage();\r\n    }\r\n  }\r\n\r\n  private processNextPendingChannelMessage() {\r\n    if (this.pendingChannelMessagesState.queue.length > 0) {\r\n      this.pendingChannelMessagesState.isProcessing = true;\r\n\r\n      const pendingChannelMessage = this.pendingChannelMessagesState.queue.shift()!;\r\n      this.processChannelMessage(pendingChannelMessage.message)\r\n        .catch((err) => {\r\n          Logger.logAction(\r\n            this.logger,\r\n\r\n            Logger.LOG_ERROR,\r\n            'ConnectionManager.processNextPendingChannelMessage() received error ',\r\n            err,\r\n          );\r\n        })\r\n        .finally(() => {\r\n          this.pendingChannelMessagesState.isProcessing = false;\r\n          this.processNextPendingChannelMessage();\r\n        });\r\n    }\r\n  }\r\n\r\n  private async processChannelMessage(message: ProtocolMessage) {\r\n    await this.realtime.channels.processChannelMessage(message);\r\n  }\r\n\r\n  async ping(): Promise<number> {\r\n    if (this.state.state !== 'connected') {\r\n      throw new ErrorInfo('Unable to ping service; not connected', 40000, 400);\r\n    }\r\n\r\n    const transport = this.activeProtocol?.getTransport();\r\n    if (!transport) {\r\n      throw this.getStateError();\r\n    }\r\n\r\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'ConnectionManager.ping()', 'transport = ' + transport);\r\n\r\n    const pingStart = Date.now();\r\n    const id = Utils.cheapRandStr();\r\n\r\n    return Utils.withTimeoutAsync<number>(\r\n      new Promise((resolve) => {\r\n        const onHeartbeat = (responseId: string) => {\r\n          if (responseId === id) {\r\n            transport.off('heartbeat', onHeartbeat);\r\n            resolve(Date.now() - pingStart);\r\n          }\r\n        };\r\n        transport.on('heartbeat', onHeartbeat);\r\n        transport.ping(id);\r\n      }),\r\n      this.options.timeouts.realtimeRequestTimeout,\r\n      'Timeout waiting for heartbeat response',\r\n    );\r\n  }\r\n\r\n  abort(error: ErrorInfo): void {\r\n    (this.activeProtocol as Protocol).getTransport().fail(error);\r\n  }\r\n\r\n  getTransportPreference(): TransportName {\r\n    return this.transportPreference || (haveWebStorage() && Platform.WebStorage?.get?.(transportPreferenceName));\r\n  }\r\n\r\n  persistTransportPreference(transport: Transport): void {\r\n    this.transportPreference = transport.shortName;\r\n    if (haveWebStorage()) {\r\n      Platform.WebStorage?.set?.(transportPreferenceName, transport.shortName);\r\n    }\r\n  }\r\n\r\n  unpersistTransportPreference(): void {\r\n    this.transportPreference = null;\r\n    if (haveWebStorage()) {\r\n      Platform.WebStorage?.remove?.(transportPreferenceName);\r\n    }\r\n  }\r\n\r\n  /* This method is only used during connection attempts, so implements RSA4c1, RSA4c2,\r\n   * and RSA4d. It is generally not invoked for serverside-triggered reauths or manual\r\n   * reauths, so RSA4c3 does not apply, except (per per RSA4d1) in the case that the auth\r\n   * server returns 403. */\r\n  actOnErrorFromAuthorize(err: ErrorInfo): void {\r\n    if (err.code === 40171) {\r\n      /* No way to reauth */\r\n      this.notifyState({ state: 'failed', error: err });\r\n    } else if (err.code === 40102) {\r\n      this.notifyState({ state: 'failed', error: err });\r\n    } else if (err.statusCode === HttpStatusCodes.Forbidden) {\r\n      const msg = 'Client configured authentication provider returned 403; failing the connection';\r\n      Logger.logAction(this.logger, Logger.LOG_ERROR, 'ConnectionManager.actOnErrorFromAuthorize()', msg);\r\n      this.notifyState({ state: 'failed', error: new ErrorInfo(msg, 80019, 403, err) });\r\n    } else {\r\n      const msg = 'Client configured authentication provider request failed';\r\n      Logger.logAction(this.logger, Logger.LOG_MINOR, 'ConnectionManager.actOnErrorFromAuthorize', msg);\r\n      this.notifyState({ state: this.state.failState as string, error: new ErrorInfo(msg, 80019, 401, err) });\r\n    }\r\n  }\r\n\r\n  onConnectionDetailsUpdate(connectionDetails: Record<string, any>, transport: Transport): void {\r\n    if (!connectionDetails) {\r\n      return;\r\n    }\r\n    this.connectionDetails = connectionDetails;\r\n    if (connectionDetails.maxMessageSize) {\r\n      this.options.maxMessageSize = connectionDetails.maxMessageSize;\r\n    }\r\n    const clientId = connectionDetails.clientId;\r\n    if (clientId) {\r\n      const err = this.realtime.auth._uncheckedSetClientId(clientId);\r\n      if (err) {\r\n        Logger.logAction(this.logger, Logger.LOG_ERROR, 'ConnectionManager.onConnectionDetailsUpdate()', err.message);\r\n        /* Errors setting the clientId are fatal to the connection */\r\n        transport.fail(err);\r\n        return;\r\n      }\r\n    }\r\n    const connectionStateTtl = connectionDetails.connectionStateTtl;\r\n    if (connectionStateTtl) {\r\n      this.connectionStateTtl = connectionStateTtl;\r\n    }\r\n    this.maxIdleInterval = connectionDetails.maxIdleInterval;\r\n    this.emit('connectiondetails', connectionDetails);\r\n  }\r\n\r\n  checkWsConnectivity() {\r\n    const wsConnectivityCheckUrl = this.options.wsConnectivityCheckUrl || Defaults.wsConnectivityCheckUrl;\r\n    const ws = new Platform.Config.WebSocket(wsConnectivityCheckUrl);\r\n    return new Promise<void>((resolve, reject) => {\r\n      let finished = false;\r\n      ws.onopen = () => {\r\n        if (!finished) {\r\n          finished = true;\r\n          resolve();\r\n          ws.close();\r\n        }\r\n      };\r\n\r\n      ws.onclose = ws.onerror = () => {\r\n        if (!finished) {\r\n          finished = true;\r\n          reject();\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  sessionRecoveryName() {\r\n    return this.options.recoveryKeyStorageName || 'ably-connection-recovery';\r\n  }\r\n\r\n  getSessionRecoverData() {\r\n    return haveSessionStorage() && Platform.WebStorage?.getSession?.(this.sessionRecoveryName());\r\n  }\r\n  setSessionRecoverData(value: any) {\r\n    return haveSessionStorage() && Platform.WebStorage?.setSession?.(this.sessionRecoveryName(), value);\r\n  }\r\n  clearSessionRecoverData() {\r\n    return haveSessionStorage() && Platform.WebStorage?.removeSession?.(this.sessionRecoveryName());\r\n  }\r\n}\r\n\r\nexport default ConnectionManager;\r\n\r\nexport interface TransportStorage {\r\n  supportedTransports: Partial<Record<TransportName, TransportCtor>>;\r\n}\r\n", "import EventEmitter from '../util/eventemitter';\nimport ConnectionManager from '../transport/connectionmanager';\nimport Logger from '../util/logger';\nimport ConnectionStateChange from './connectionstatechange';\nimport ErrorInfo from '../types/errorinfo';\nimport { NormalisedClientOptions } from '../../types/ClientOptions';\nimport BaseRealtime from './baserealtime';\nimport Platform from 'common/platform';\n\nclass Connection extends EventEmitter {\n  ably: BaseRealtime;\n  connectionManager: ConnectionManager;\n  state: string;\n  key?: string;\n  id?: string;\n  errorReason: ErrorInfo | null;\n\n  constructor(ably: BaseRealtime, options: NormalisedClientOptions) {\n    super(ably.logger);\n    this.ably = ably;\n    this.connectionManager = new ConnectionManager(ably, options);\n    this.state = this.connectionManager.state.state;\n    this.key = undefined;\n    this.id = undefined;\n    this.errorReason = null;\n\n    this.connectionManager.on('connectionstate', (stateChange: ConnectionStateChange) => {\n      const state = (this.state = stateChange.current as string);\n      Platform.Config.nextTick(() => {\n        this.emit(state, stateChange);\n      });\n    });\n    this.connectionManager.on('update', (stateChange: ConnectionStateChange) => {\n      Platform.Config.nextTick(() => {\n        this.emit('update', stateChange);\n      });\n    });\n  }\n\n  whenState = ((state: string) => {\n    return EventEmitter.prototype.whenState.call(this, state, this.state);\n  }) as any;\n\n  connect(): void {\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'Connection.connect()', '');\n    this.connectionManager.requestState({ state: 'connecting' });\n  }\n\n  async ping(): Promise<number> {\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'Connection.ping()', '');\n    return this.connectionManager.ping();\n  }\n\n  close(): void {\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'Connection.close()', 'connectionKey = ' + this.key);\n    this.connectionManager.requestState({ state: 'closing' });\n  }\n\n  get recoveryKey(): string | null {\n    this.logger.deprecationWarning(\n      'The `Connection.recoveryKey` attribute has been replaced by the `Connection.createRecoveryKey()` method. Replace your usage of `recoveryKey` with the return value of `createRecoveryKey()`. `recoveryKey` will be removed in a future version.',\n    );\n    return this.createRecoveryKey();\n  }\n\n  createRecoveryKey(): string | null {\n    return this.connectionManager.createRecoveryKey();\n  }\n}\n\nexport default Connection;\n", "import * as Utils from '../util/utils';\nimport BaseClient from './baseclient';\nimport EventEmitter from '../util/eventemitter';\nimport Logger from '../util/logger';\nimport Connection from './connection';\nimport RealtimeChannel from './realtimechannel';\nimport ErrorInfo from '../types/errorinfo';\nimport ProtocolMessage from '../types/protocolmessage';\nimport { ChannelOptions } from '../../types/channel';\nimport ClientOptions from '../../types/ClientOptions';\nimport * as API from '../../../../ably';\nimport { ModularPlugins, RealtimePresencePlugin } from './modularplugins';\nimport { TransportNames } from 'common/constants/TransportName';\nimport { TransportImplementations } from 'common/platform';\nimport Defaults from '../util/defaults';\nimport type * as ObjectsPlugin from 'plugins/objects';\n\n/**\n `BaseRealtime` is an export of the tree-shakable version of the SDK, and acts as the base class for the `DefaultRealtime` class exported by the non tree-shakable version.\n */\nclass BaseRealtime extends BaseClient {\n  readonly _RealtimePresence: RealtimePresencePlugin | null;\n  readonly _objectsPlugin: typeof ObjectsPlugin | null;\n  // Extra transport implementations available to this client, in addition to those in Platform.Transports.bundledImplementations\n  readonly _additionalTransportImplementations: TransportImplementations;\n  _channels: any;\n  connection: Connection;\n\n  // internal API to make EventEmitter usable in other SDKs\n  static readonly EventEmitter = EventEmitter;\n\n  /*\n   * The public typings declare that this only accepts an object, but since we want to emit a good error message in the case where a non-TypeScript user does one of these things:\n   *\n   * 1. passes a string (which is quite likely if they\u2019re e.g. migrating from the default variant to the modular variant)\n   * 2. passes no argument at all\n   *\n   * tell the compiler that these cases are possible so that it forces us to handle them.\n   */\n  constructor(options?: ClientOptions | string) {\n    super(Defaults.objectifyOptions(options, false, 'BaseRealtime', Logger.defaultLogger));\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'Realtime()', '');\n\n    // currently we cannot support using Ably.Realtime instances in Vercel Edge runtime.\n    // this error can be removed after fixing https://github.com/ably/ably-js/issues/1731,\n    // and https://github.com/ably/ably-js/issues/1732\n    // @ts-ignore\n    if (typeof EdgeRuntime === 'string') {\n      throw new ErrorInfo(\n        `Ably.Realtime instance cannot be used in Vercel Edge runtime.` +\n          ` If you are running Vercel Edge functions, please replace your` +\n          ` \"new Ably.Realtime()\" with \"new Ably.Rest()\" and use Ably Rest API` +\n          ` instead of the Realtime API. If you are server-rendering your application` +\n          ` in the Vercel Edge runtime, please use the condition \"if (typeof EdgeRuntime === 'string')\"` +\n          ` to prevent instantiating Ably.Realtime instance during SSR in the Vercel Edge runtime.`,\n        40000,\n        400,\n      );\n    }\n\n    this._additionalTransportImplementations = BaseRealtime.transportImplementationsFromPlugins(this.options.plugins);\n    this._RealtimePresence = this.options.plugins?.RealtimePresence ?? null;\n    this._objectsPlugin = this.options.plugins?.Objects ?? null;\n    this.connection = new Connection(this, this.options);\n    this._channels = new Channels(this);\n    if (this.options.autoConnect !== false) this.connect();\n  }\n\n  private static transportImplementationsFromPlugins(plugins?: ModularPlugins) {\n    const transports: TransportImplementations = {};\n\n    if (plugins?.WebSocketTransport) {\n      transports[TransportNames.WebSocket] = plugins.WebSocketTransport;\n    }\n    if (plugins?.XHRPolling) {\n      transports[TransportNames.XhrPolling] = plugins.XHRPolling;\n    }\n\n    return transports;\n  }\n\n  get channels() {\n    return this._channels;\n  }\n\n  connect(): void {\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'Realtime.connect()', '');\n    this.connection.connect();\n  }\n\n  close(): void {\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'Realtime.close()', '');\n    this.connection.close();\n  }\n}\n\nclass Channels extends EventEmitter {\n  realtime: BaseRealtime;\n  // RSN2\n  all: Record<string, RealtimeChannel>;\n\n  constructor(realtime: BaseRealtime) {\n    super(realtime.logger);\n    this.realtime = realtime;\n    this.all = Object.create(null);\n    realtime.connection.connectionManager.on('transport.active', () => {\n      this.onTransportActive();\n    });\n  }\n\n  channelSerials(): { [name: string]: string } {\n    let serials: { [name: string]: string } = {};\n    for (const name of Utils.keysArray(this.all, true)) {\n      const channel = this.all[name];\n      if (channel.properties.channelSerial) {\n        serials[name] = channel.properties.channelSerial;\n      }\n    }\n    return serials;\n  }\n\n  // recoverChannels gets the given channels and sets their channel serials.\n  recoverChannels(channelSerials: { [name: string]: string }) {\n    for (const name of Utils.keysArray(channelSerials, true)) {\n      const channel = this.get(name);\n      channel.properties.channelSerial = channelSerials[name];\n    }\n  }\n\n  // Access to this method is synchronised by ConnectionManager#processChannelMessage.\n  async processChannelMessage(msg: ProtocolMessage) {\n    const channelName = msg.channel;\n    if (channelName === undefined) {\n      Logger.logAction(\n        this.logger,\n        Logger.LOG_ERROR,\n        'Channels.processChannelMessage()',\n        'received event unspecified channel, action = ' + msg.action,\n      );\n      return;\n    }\n    const channel = this.all[channelName];\n    if (!channel) {\n      Logger.logAction(\n        this.logger,\n        Logger.LOG_ERROR,\n        'Channels.processChannelMessage()',\n        'received event for non-existent channel: ' + channelName,\n      );\n      return;\n    }\n    await channel.processMessage(msg);\n  }\n\n  /* called when a transport becomes connected; reattempt attach/detach\n   * for channels that are attaching or detaching. */\n  onTransportActive() {\n    for (const channelName in this.all) {\n      const channel = this.all[channelName];\n      if (channel.state === 'attaching' || channel.state === 'detaching') {\n        channel.checkPendingState();\n      } else if (channel.state === 'suspended') {\n        channel._attach(false, null);\n      } else if (channel.state === 'attached') {\n        // Note explicity request the state, channel.attach() would do nothing\n        // as its already attached.\n        channel.requestState('attaching');\n      }\n    }\n  }\n\n  /* Connection interruptions (ie when the connection will no longer queue\n   * events) imply connection state changes for any channel which is either\n   * attached, pending, or will attempt to become attached in the future */\n  propogateConnectionInterruption(connectionState: string, reason: ErrorInfo) {\n    const connectionStateToChannelState: Record<string, API.ChannelState> = {\n      closing: 'detached',\n      closed: 'detached',\n      failed: 'failed',\n      suspended: 'suspended',\n    };\n    const fromChannelStates = ['attaching', 'attached', 'detaching', 'suspended'];\n    const toChannelState = connectionStateToChannelState[connectionState];\n\n    for (const channelId in this.all) {\n      const channel = this.all[channelId];\n      if (fromChannelStates.includes(channel.state)) {\n        channel.notifyState(toChannelState, reason);\n      }\n    }\n  }\n\n  get(name: string, channelOptions?: ChannelOptions) {\n    name = String(name);\n    let channel = this.all[name];\n    if (!channel) {\n      channel = this.all[name] = new RealtimeChannel(this.realtime, name, channelOptions);\n    } else if (channelOptions) {\n      if (channel._shouldReattachToSetOptions(channelOptions, channel.channelOptions)) {\n        throw new ErrorInfo(\n          'Channels.get() cannot be used to set channel options that would cause the channel to reattach. Please, use RealtimeChannel.setOptions() instead.',\n          40000,\n          400,\n        );\n      }\n      channel.setOptions(channelOptions);\n    }\n    return channel;\n  }\n\n  getDerived(name: string, deriveOptions: API.DeriveOptions, channelOptions?: ChannelOptions) {\n    if (deriveOptions.filter) {\n      const filter = Utils.toBase64(deriveOptions.filter);\n      const match = Utils.matchDerivedChannel(name);\n      name = `[filter=${filter}${match.qualifierParam}]${match.channelName}`;\n    }\n    return this.get(name, channelOptions);\n  }\n\n  /* Included to support certain niche use-cases; most users should ignore this.\n   * Please do not use this unless you know what you're doing */\n  release(name: string) {\n    name = String(name);\n    const channel = this.all[name];\n    if (!channel) {\n      return;\n    }\n    const releaseErr = channel.getReleaseErr();\n    if (releaseErr) {\n      throw releaseErr;\n    }\n    delete this.all[name];\n  }\n}\n\nexport default BaseRealtime;\n", "import * as Utils from '../util/utils';\nimport EventEmitter from '../util/eventemitter';\nimport Logger from '../util/logger';\nimport PresenceMessage from '../types/presencemessage';\n\nimport type RealtimePresence from './realtimepresence';\n\ntype compFn = (item: PresenceMessage, existing: PresenceMessage) => boolean;\n\nexport interface RealtimePresenceParams {\n  waitForSync?: boolean;\n  clientId?: string;\n  connectionId?: string;\n}\n\nfunction newerThan(item: PresenceMessage, existing: PresenceMessage): boolean {\n  /* RTP2b1: if either is synthesised, compare by timestamp */\n  if (item.isSynthesized() || existing.isSynthesized()) {\n    // RTP2b1a: if equal, prefer the newly-arrived one\n    return (item.timestamp as number) >= (existing.timestamp as number);\n  }\n\n  /* RTP2b2 */\n  const itemOrderings = item.parseId(),\n    existingOrderings = existing.parseId();\n  if (itemOrderings.msgSerial === existingOrderings.msgSerial) {\n    return itemOrderings.index > existingOrderings.index;\n  } else {\n    return itemOrderings.msgSerial > existingOrderings.msgSerial;\n  }\n}\n\nexport class PresenceMap extends EventEmitter {\n  map: Record<string, PresenceMessage>;\n  residualMembers: Record<string, PresenceMessage> | null;\n  syncInProgress: boolean;\n  presence: RealtimePresence;\n  memberKey: (item: PresenceMessage) => string;\n  newerThan: compFn;\n\n  constructor(presence: RealtimePresence, memberKey: (item: PresenceMessage) => string, newer: compFn = newerThan) {\n    super(presence.logger);\n    this.presence = presence;\n    this.map = Object.create(null);\n    this.syncInProgress = false;\n    this.residualMembers = null;\n    this.memberKey = memberKey;\n    this.newerThan = newer;\n  }\n\n  get(key: string) {\n    return this.map[key];\n  }\n\n  getClient(clientId: string) {\n    const map = this.map,\n      result = [];\n    for (const key in map) {\n      const item = map[key];\n      if (item.clientId == clientId && item.action != 'absent') result.push(item);\n    }\n    return result;\n  }\n\n  list(params: RealtimePresenceParams) {\n    const map = this.map,\n      clientId = params && params.clientId,\n      connectionId = params && params.connectionId,\n      result = [];\n\n    for (const key in map) {\n      const item = map[key];\n      if (item.action === 'absent') continue;\n      if (clientId && clientId != item.clientId) continue;\n      if (connectionId && connectionId != item.connectionId) continue;\n      result.push(item);\n    }\n    return result;\n  }\n\n  put(item: PresenceMessage) {\n    if (item.action === 'enter' || item.action === 'update') {\n      item = PresenceMessage.fromValues(item);\n      item.action = 'present';\n    }\n    const map = this.map,\n      key = this.memberKey(item);\n    /* we've seen this member, so do not remove it at the end of sync */\n    if (this.residualMembers) delete this.residualMembers[key];\n\n    /* compare the timestamp of the new item with any existing member (or ABSENT witness) */\n    const existingItem = map[key];\n    if (existingItem && !this.newerThan(item, existingItem)) {\n      return false;\n    }\n    map[key] = item;\n    return true;\n  }\n\n  values() {\n    const map = this.map,\n      result = [];\n    for (const key in map) {\n      const item = map[key];\n      if (item.action != 'absent') result.push(item);\n    }\n    return result;\n  }\n\n  remove(item: PresenceMessage) {\n    const map = this.map,\n      key = this.memberKey(item);\n    const existingItem = map[key];\n\n    if (existingItem && !this.newerThan(item, existingItem)) {\n      return false;\n    }\n\n    /* RTP2f */\n    if (this.syncInProgress) {\n      item = PresenceMessage.fromValues(item);\n      item.action = 'absent';\n      map[key] = item;\n    } else {\n      delete map[key];\n    }\n\n    return !!existingItem;\n  }\n\n  startSync() {\n    const map = this.map,\n      syncInProgress = this.syncInProgress;\n    Logger.logAction(\n      this.logger,\n      Logger.LOG_MINOR,\n      'PresenceMap.startSync()',\n      'channel = ' + this.presence.channel.name + '; syncInProgress = ' + syncInProgress,\n    );\n    /* we might be called multiple times while a sync is in progress */\n    if (!this.syncInProgress) {\n      this.residualMembers = Utils.copy(map);\n      this.setInProgress(true);\n    }\n  }\n\n  endSync() {\n    const map = this.map,\n      syncInProgress = this.syncInProgress;\n    Logger.logAction(\n      this.logger,\n      Logger.LOG_MINOR,\n      'PresenceMap.endSync()',\n      'channel = ' + this.presence.channel.name + '; syncInProgress = ' + syncInProgress,\n    );\n    if (syncInProgress) {\n      /* we can now strip out the ABSENT members, as we have\n       * received all of the out-of-order sync messages */\n      for (const memberKey in map) {\n        const entry = map[memberKey];\n        if (entry.action === 'absent') {\n          delete map[memberKey];\n        }\n      }\n      /* any members that were present at the start of the sync,\n       * and have not been seen in sync, can be removed, and leave events emitted */\n      this.presence._synthesizeLeaves(Utils.valuesArray(this.residualMembers as Record<string, PresenceMessage>));\n      for (const memberKey in this.residualMembers) {\n        delete map[memberKey];\n      }\n      this.residualMembers = null;\n\n      /* finish, notifying any waiters */\n      this.setInProgress(false);\n    }\n    this.emit('sync');\n  }\n\n  waitSync(callback: () => void) {\n    const syncInProgress = this.syncInProgress;\n    Logger.logAction(\n      this.logger,\n      Logger.LOG_MINOR,\n      'PresenceMap.waitSync()',\n      'channel = ' + this.presence.channel.name + '; syncInProgress = ' + syncInProgress,\n    );\n    if (!syncInProgress) {\n      callback();\n      return;\n    }\n    this.once('sync', callback);\n  }\n\n  clear() {\n    this.map = {};\n    this.setInProgress(false);\n    this.residualMembers = null;\n  }\n\n  setInProgress(inProgress: boolean) {\n    Logger.logAction(this.logger, Logger.LOG_MICRO, 'PresenceMap.setInProgress()', 'inProgress = ' + inProgress);\n    this.syncInProgress = inProgress;\n    this.presence.syncComplete = !inProgress;\n  }\n}\n", "import * as Utils from '../util/utils';\nimport EventEmitter from '../util/eventemitter';\nimport Logger from '../util/logger';\nimport PresenceMessage, { WirePresenceMessage } from '../types/presencemessage';\nimport type { CipherOptions } from '../types/basemessage';\nimport ErrorInfo, { PartialErrorInfo } from '../types/errorinfo';\nimport RealtimeChannel from './realtimechannel';\nimport Multicaster from '../util/multicaster';\nimport ChannelStateChange from './channelstatechange';\nimport { ErrCallback } from '../../types/utils';\nimport { PaginatedResult } from './paginatedresource';\nimport { PresenceMap, RealtimePresenceParams } from './presencemap';\n\ninterface RealtimeHistoryParams {\n  start?: number;\n  end?: number;\n  direction?: string;\n  limit?: number;\n  untilAttach?: boolean;\n  from_serial?: string | null;\n}\n\nfunction getClientId(realtimePresence: RealtimePresence) {\n  return realtimePresence.channel.client.auth.clientId;\n}\n\nfunction isAnonymousOrWildcard(realtimePresence: RealtimePresence) {\n  const realtime = realtimePresence.channel.client;\n  /* If not currently connected, we can't assume that we're an anonymous\n   * client, as realtime may inform us of our clientId in the CONNECTED\n   * message. So assume we're not anonymous and leave it to realtime to\n   * return an error if we are */\n  const clientId = realtime.auth.clientId;\n  return (!clientId || clientId === '*') && realtime.connection.state === 'connected';\n}\n\n/* Callback is called only in the event of an error */\nfunction waitAttached(channel: RealtimeChannel, callback: ErrCallback, action: () => void) {\n  switch (channel.state) {\n    case 'attached':\n    case 'suspended':\n      action();\n      break;\n    case 'initialized':\n    case 'detached':\n    case 'detaching':\n    case 'attaching':\n      Utils.whenPromiseSettles(channel.attach(), function (err: Error | null) {\n        if (err) callback(err);\n        else action();\n      });\n      break;\n    default:\n      callback(ErrorInfo.fromValues(channel.invalidStateError()));\n  }\n}\n\nclass RealtimePresence extends EventEmitter {\n  channel: RealtimeChannel;\n  pendingPresence: { presence: WirePresenceMessage; callback: ErrCallback }[];\n  syncComplete: boolean;\n  members: PresenceMap;\n  _myMembers: PresenceMap;\n  subscriptions: EventEmitter;\n  name?: string;\n\n  constructor(channel: RealtimeChannel) {\n    super(channel.logger);\n    this.channel = channel;\n    this.syncComplete = false;\n    this.members = new PresenceMap(this, (item) => item.clientId + ':' + item.connectionId);\n    // RTP17h: Store own members by clientId only.\n    this._myMembers = new PresenceMap(this, (item) => item.clientId!);\n    this.subscriptions = new EventEmitter(this.logger);\n    this.pendingPresence = [];\n  }\n\n  async enter(data: unknown): Promise<void> {\n    if (isAnonymousOrWildcard(this)) {\n      throw new ErrorInfo('clientId must be specified to enter a presence channel', 40012, 400);\n    }\n    return this._enterOrUpdateClient(undefined, undefined, data, 'enter');\n  }\n\n  async update(data: unknown): Promise<void> {\n    if (isAnonymousOrWildcard(this)) {\n      throw new ErrorInfo('clientId must be specified to update presence data', 40012, 400);\n    }\n    return this._enterOrUpdateClient(undefined, undefined, data, 'update');\n  }\n\n  async enterClient(clientId: string, data: unknown): Promise<void> {\n    return this._enterOrUpdateClient(undefined, clientId, data, 'enter');\n  }\n\n  async updateClient(clientId: string, data: unknown): Promise<void> {\n    return this._enterOrUpdateClient(undefined, clientId, data, 'update');\n  }\n\n  async _enterOrUpdateClient(\n    id: string | undefined,\n    clientId: string | undefined,\n    data: unknown,\n    action: string,\n  ): Promise<void> {\n    const channel = this.channel;\n    if (!channel.connectionManager.activeState()) {\n      throw channel.connectionManager.getError();\n    }\n\n    Logger.logAction(\n      this.logger,\n      Logger.LOG_MICRO,\n      'RealtimePresence.' + action + 'Client()',\n      'channel = ' + channel.name + ', id = ' + id + ', client = ' + (clientId || '(implicit) ' + getClientId(this)),\n    );\n\n    const presence = PresenceMessage.fromData(data);\n    presence.action = action;\n    if (id) {\n      presence.id = id;\n    }\n    if (clientId) {\n      presence.clientId = clientId;\n    }\n    const wirePresMsg = await presence.encode(channel.channelOptions as CipherOptions);\n\n    switch (channel.state) {\n      case 'attached':\n        return channel.sendPresence([wirePresMsg]);\n      case 'initialized':\n      case 'detached':\n        channel.attach();\n      // eslint-disable-next-line no-fallthrough\n      case 'attaching':\n        return new Promise((resolve, reject) => {\n          this.pendingPresence.push({\n            presence: wirePresMsg,\n            callback: (err) => (err ? reject(err) : resolve()),\n          });\n        });\n      default: {\n        const err = new PartialErrorInfo(\n          'Unable to ' + action + ' presence channel while in ' + channel.state + ' state',\n          90001,\n        );\n        err.code = 90001;\n        throw err;\n      }\n    }\n  }\n\n  async leave(data: unknown): Promise<void> {\n    if (isAnonymousOrWildcard(this)) {\n      throw new ErrorInfo('clientId must have been specified to enter or leave a presence channel', 40012, 400);\n    }\n    return this.leaveClient(undefined, data);\n  }\n\n  async leaveClient(clientId?: string, data?: unknown): Promise<void> {\n    const channel = this.channel;\n    if (!channel.connectionManager.activeState()) {\n      throw channel.connectionManager.getError();\n    }\n\n    Logger.logAction(\n      this.logger,\n      Logger.LOG_MICRO,\n      'RealtimePresence.leaveClient()',\n      'leaving; channel = ' + this.channel.name + ', client = ' + clientId,\n    );\n    const presence = PresenceMessage.fromData(data);\n    presence.action = 'leave';\n    if (clientId) {\n      presence.clientId = clientId;\n    }\n    const wirePresMsg = await presence.encode(channel.channelOptions as CipherOptions);\n\n    switch (channel.state) {\n      case 'attached':\n        return channel.sendPresence([wirePresMsg]);\n      case 'attaching':\n        return new Promise((resolve, reject) => {\n          this.pendingPresence.push({\n            presence: wirePresMsg,\n            callback: (err) => (err ? reject(err) : resolve()),\n          });\n        });\n      case 'initialized':\n      case 'failed': {\n        /* we're not attached; therefore we let any entered status\n         * timeout by itself instead of attaching just in order to leave */\n        throw new PartialErrorInfo('Unable to leave presence channel (incompatible state)', 90001);\n      }\n      default:\n        throw channel.invalidStateError();\n    }\n  }\n\n  async get(params?: RealtimePresenceParams): Promise<PresenceMessage[]> {\n    const waitForSync = !params || ('waitForSync' in params ? params.waitForSync : true);\n\n    return new Promise((resolve, reject) => {\n      function returnMembers(members: PresenceMap) {\n        resolve(params ? members.list(params) : members.values());\n      }\n\n      /* Special-case the suspended state: can still get (stale) presence set if waitForSync is false */\n      if (this.channel.state === 'suspended') {\n        if (waitForSync) {\n          reject(\n            ErrorInfo.fromValues({\n              statusCode: 400,\n              code: 91005,\n              message: 'Presence state is out of sync due to channel being in the SUSPENDED state',\n            }),\n          );\n        } else {\n          returnMembers(this.members);\n        }\n        return;\n      }\n\n      waitAttached(\n        this.channel,\n        (err) => reject(err),\n        () => {\n          const members = this.members;\n          if (waitForSync) {\n            members.waitSync(function () {\n              returnMembers(members);\n            });\n          } else {\n            returnMembers(members);\n          }\n        },\n      );\n    });\n  }\n\n  async history(params: RealtimeHistoryParams | null): Promise<PaginatedResult<PresenceMessage>> {\n    Logger.logAction(this.logger, Logger.LOG_MICRO, 'RealtimePresence.history()', 'channel = ' + this.name);\n    // We fetch this first so that any plugin-not-provided error takes priority over other errors\n    const restMixin = this.channel.client.rest.presenceMixin;\n\n    if (params && params.untilAttach) {\n      if (this.channel.state === 'attached') {\n        delete params.untilAttach;\n        params.from_serial = this.channel.properties.attachSerial;\n      } else {\n        throw new ErrorInfo(\n          'option untilAttach requires the channel to be attached, was: ' + this.channel.state,\n          40000,\n          400,\n        );\n      }\n    }\n\n    return restMixin.history(this, params);\n  }\n\n  setPresence(presenceSet: PresenceMessage[], isSync: boolean, syncChannelSerial?: string): void {\n    Logger.logAction(\n      this.logger,\n      Logger.LOG_MICRO,\n      'RealtimePresence.setPresence()',\n      'received presence for ' + presenceSet.length + ' participants; syncChannelSerial = ' + syncChannelSerial,\n    );\n    let syncCursor, match;\n    const members = this.members,\n      myMembers = this._myMembers,\n      broadcastMessages = [],\n      connId = this.channel.connectionManager.connectionId;\n\n    if (isSync) {\n      this.members.startSync();\n      if (syncChannelSerial && (match = syncChannelSerial.match(/^[\\w-]+:(.*)$/))) {\n        syncCursor = match[1];\n      }\n    }\n\n    for (let presence of presenceSet) {\n      switch (presence.action) {\n        case 'leave':\n          if (members.remove(presence)) {\n            broadcastMessages.push(presence);\n          }\n          if (presence.connectionId === connId && !presence.isSynthesized()) {\n            myMembers.remove(presence);\n          }\n          break;\n        case 'enter':\n        case 'present':\n        case 'update':\n          if (members.put(presence)) {\n            broadcastMessages.push(presence);\n          }\n          if (presence.connectionId === connId) {\n            myMembers.put(presence);\n          }\n          break;\n      }\n    }\n    /* if this is the last (or only) message in a sequence of sync updates, end the sync */\n    if (isSync && !syncCursor) {\n      members.endSync();\n      this.channel.syncChannelSerial = null;\n    }\n\n    /* broadcast to listeners */\n    for (let i = 0; i < broadcastMessages.length; i++) {\n      const presence = broadcastMessages[i];\n      this.subscriptions.emit(presence.action!, presence);\n    }\n  }\n\n  onAttached(hasPresence?: boolean): void {\n    Logger.logAction(\n      this.logger,\n      Logger.LOG_MINOR,\n      'RealtimePresence.onAttached()',\n      'channel = ' + this.channel.name + ', hasPresence = ' + hasPresence,\n    );\n\n    if (hasPresence) {\n      this.members.startSync();\n    } else {\n      this._synthesizeLeaves(this.members.values());\n      this.members.clear();\n    }\n\n    // RTP17f: Re-enter own members when moving into the attached state.\n    this._ensureMyMembersPresent();\n\n    /* NB this must be after the _ensureMyMembersPresent call, which may add items to pendingPresence */\n    const pendingPresence = this.pendingPresence,\n      pendingPresCount = pendingPresence.length;\n\n    if (pendingPresCount) {\n      this.pendingPresence = [];\n      const presenceArray = [];\n      const multicaster = Multicaster.create(this.logger);\n      Logger.logAction(\n        this.logger,\n        Logger.LOG_MICRO,\n        'RealtimePresence.onAttached',\n        'sending ' + pendingPresCount + ' queued presence messages',\n      );\n      for (let i = 0; i < pendingPresCount; i++) {\n        const event = pendingPresence[i];\n        presenceArray.push(event.presence);\n        multicaster.push(event.callback);\n      }\n      this.channel\n        .sendPresence(presenceArray)\n        .then(() => multicaster())\n        .catch((err: ErrorInfo) => multicaster(err));\n    }\n  }\n\n  actOnChannelState(state: string, hasPresence?: boolean, err?: ErrorInfo | null): void {\n    switch (state) {\n      case 'attached':\n        this.onAttached(hasPresence);\n        break;\n      case 'detached':\n      case 'failed':\n        this._clearMyMembers();\n        this.members.clear();\n      /* falls through */\n      case 'suspended':\n        this.failPendingPresence(err);\n        break;\n    }\n  }\n\n  failPendingPresence(err?: ErrorInfo | null): void {\n    if (this.pendingPresence.length) {\n      Logger.logAction(\n        this.logger,\n        Logger.LOG_MINOR,\n        'RealtimeChannel.failPendingPresence',\n        'channel; name = ' + this.channel.name + ', err = ' + Utils.inspectError(err),\n      );\n      for (let i = 0; i < this.pendingPresence.length; i++)\n        try {\n          this.pendingPresence[i].callback(err);\n          // eslint-disable-next-line no-empty\n        } catch (e) {}\n      this.pendingPresence = [];\n    }\n  }\n\n  _clearMyMembers(): void {\n    this._myMembers.clear();\n  }\n\n  _ensureMyMembersPresent(): void {\n    const myMembers = this._myMembers;\n    const connId = this.channel.connectionManager.connectionId;\n\n    for (const memberKey in myMembers.map) {\n      const entry = myMembers.map[memberKey];\n      Logger.logAction(\n        this.logger,\n        Logger.LOG_MICRO,\n        'RealtimePresence._ensureMyMembersPresent()',\n        'Auto-reentering clientId \"' + entry.clientId + '\" into the presence set',\n      );\n      // RTP17g: Send ENTER containing the member id, clientId and data\n      // attributes.\n      // RTP17g1: suppress id if the connId has changed\n      const id = entry.connectionId === connId ? entry.id : undefined;\n      this._enterOrUpdateClient(id, entry.clientId, entry.data, 'enter').catch((err) => {\n        const wrappedErr = new ErrorInfo('Presence auto re-enter failed', 91004, 400, err);\n        Logger.logAction(\n          this.logger,\n          Logger.LOG_ERROR,\n          'RealtimePresence._ensureMyMembersPresent()',\n          'Presence auto re-enter failed; reason = ' + Utils.inspectError(err),\n        );\n        const change = new ChannelStateChange(this.channel.state, this.channel.state, true, false, wrappedErr);\n        this.channel.emit('update', change);\n      });\n    }\n  }\n\n  _synthesizeLeaves(items: PresenceMessage[]): void {\n    const subscriptions = this.subscriptions;\n    items.forEach(function (item) {\n      const presence = PresenceMessage.fromValues({\n        action: 'leave',\n        connectionId: item.connectionId,\n        clientId: item.clientId,\n        data: item.data,\n        encoding: item.encoding,\n        timestamp: Date.now(),\n      });\n      subscriptions.emit('leave', presence);\n    });\n  }\n\n  async subscribe(..._args: unknown[] /* [event], listener */): Promise<void> {\n    const args = RealtimeChannel.processListenerArgs(_args);\n    const event = args[0];\n    const listener = args[1];\n    const channel = this.channel;\n\n    if (channel.state === 'failed') {\n      throw ErrorInfo.fromValues(channel.invalidStateError());\n    }\n\n    this.subscriptions.on(event, listener);\n\n    // (RTP6d)\n    if (channel.channelOptions.attachOnSubscribe !== false) {\n      await channel.attach();\n    }\n  }\n\n  unsubscribe(..._args: unknown[] /* [event], listener */): void {\n    const args = RealtimeChannel.processListenerArgs(_args);\n    const event = args[0];\n    const listener = args[1];\n    this.subscriptions.off(event, listener);\n  }\n}\n\nexport default RealtimePresence;\n", "import Platform from 'common/platform';\r\nimport * as Utils from '../util/utils';\r\nimport Transport from './transport';\r\nimport Defaults from '../util/defaults';\r\nimport Logger from '../util/logger';\r\nimport ProtocolMessage, {\r\n  serialize as serializeProtocolMessage,\r\n  deserialize as deserializeProtocolMessage,\r\n} from '../types/protocolmessage';\r\nimport ErrorInfo from '../types/errorinfo';\r\nimport NodeWebSocket from 'ws';\r\nimport ConnectionManager, { TransportParams } from './connectionmanager';\r\nimport Auth from '../client/auth';\r\nimport { TransportNames } from 'common/constants/TransportName';\r\n\r\nconst shortName = TransportNames.WebSocket;\r\n\r\nfunction isNodeWebSocket(ws: WebSocket | NodeWebSocket): ws is NodeWebSocket {\r\n  return !!(ws as NodeWebSocket).on;\r\n}\r\n\r\nclass WebSocketTransport extends Transport {\r\n  shortName = shortName;\r\n  wsHost: string;\r\n  uri?: string;\r\n  wsConnection?: WebSocket | NodeWebSocket;\r\n\r\n  constructor(connectionManager: ConnectionManager, auth: Auth, params: TransportParams) {\r\n    super(connectionManager, auth, params);\r\n    /* If is a browser, can't detect pings, so request protocol heartbeats */\r\n    params.heartbeats = Platform.Config.useProtocolHeartbeats;\r\n    this.wsHost = params.host as string;\r\n  }\r\n\r\n  static isAvailable() {\r\n    return !!Platform.Config.WebSocket;\r\n  }\r\n\r\n  createWebSocket(uri: string, connectParams: Record<string, string>) {\r\n    this.uri = uri + Utils.toQueryString(connectParams);\r\n    return new Platform.Config.WebSocket(this.uri);\r\n  }\r\n\r\n  toString() {\r\n    return 'WebSocketTransport; uri=' + this.uri;\r\n  }\r\n\r\n  connect() {\r\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'WebSocketTransport.connect()', 'starting');\r\n    Transport.prototype.connect.call(this);\r\n    const self = this,\r\n      params = this.params,\r\n      options = params.options;\r\n    const wsScheme = options.tls ? 'wss://' : 'ws://';\r\n    const wsUri = wsScheme + this.wsHost + ':' + Defaults.getPort(options) + '/';\r\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'WebSocketTransport.connect()', 'uri: ' + wsUri);\r\n    Utils.whenPromiseSettles(\r\n      this.auth.getAuthParams(),\r\n      function (err: ErrorInfo | null, authParams?: Record<string, string>) {\r\n        if (self.isDisposed) {\r\n          return;\r\n        }\r\n        let paramStr = '';\r\n        for (const param in authParams) paramStr += ' ' + param + ': ' + authParams[param] + ';';\r\n        Logger.logAction(\r\n          self.logger,\r\n          Logger.LOG_MINOR,\r\n          'WebSocketTransport.connect()',\r\n          'authParams:' + paramStr + ' err: ' + err,\r\n        );\r\n        if (err) {\r\n          self.disconnect(err);\r\n          return;\r\n        }\r\n        const connectParams = params.getConnectParams(authParams!);\r\n        try {\r\n          const wsConnection = (self.wsConnection = self.createWebSocket(wsUri, connectParams));\r\n          wsConnection.binaryType = Platform.Config.binaryType;\r\n          wsConnection.onopen = function () {\r\n            self.onWsOpen();\r\n          };\r\n          wsConnection.onclose = function (ev: CloseEvent) {\r\n            self.onWsClose(ev);\r\n          };\r\n          wsConnection.onmessage = function (ev: MessageEvent) {\r\n            self.onWsData(ev.data);\r\n          };\r\n          wsConnection.onerror = function (ev: Event) {\r\n            self.onWsError(ev as ErrorEvent);\r\n          };\r\n          if (isNodeWebSocket(wsConnection)) {\r\n            /* node; browsers currently don't have a general eventemitter and can't detect\r\n             * pings. Also, no need to reply with a pong explicitly, ws lib handles that */\r\n            wsConnection.on('ping', function () {\r\n              self.onActivity();\r\n            });\r\n          }\r\n        } catch (e) {\r\n          Logger.logAction(\r\n            self.logger,\r\n            Logger.LOG_ERROR,\r\n            'WebSocketTransport.connect()',\r\n            'Unexpected exception creating websocket: err = ' + ((e as Error).stack || (e as Error).message),\r\n          );\r\n          self.disconnect(e as Error);\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  send(message: ProtocolMessage) {\r\n    const wsConnection = this.wsConnection;\r\n    if (!wsConnection) {\r\n      Logger.logAction(this.logger, Logger.LOG_ERROR, 'WebSocketTransport.send()', 'No socket connection');\r\n      return;\r\n    }\r\n    try {\r\n      (wsConnection as NodeWebSocket).send(\r\n        serializeProtocolMessage(message, this.connectionManager.realtime._MsgPack, this.params.format),\r\n      );\r\n    } catch (e) {\r\n      const msg = 'Exception from ws connection when trying to send: ' + Utils.inspectError(e);\r\n      Logger.logAction(this.logger, Logger.LOG_ERROR, 'WebSocketTransport.send()', msg);\r\n      /* Don't try to request a disconnect, that'll just involve sending data\r\n       * down the websocket again. Just finish the transport. */\r\n      this.finish('disconnected', new ErrorInfo(msg, 50000, 500));\r\n    }\r\n  }\r\n\r\n  onWsData(data: string) {\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MICRO,\r\n      'WebSocketTransport.onWsData()',\r\n      'data received; length = ' + data.length + '; type = ' + typeof data,\r\n    );\r\n    try {\r\n      this.onProtocolMessage(\r\n        deserializeProtocolMessage(\r\n          data,\r\n          this.connectionManager.realtime._MsgPack,\r\n          this.connectionManager.realtime._RealtimePresence,\r\n          this.connectionManager.realtime._Annotations,\r\n          this.connectionManager.realtime._objectsPlugin,\r\n          this.format,\r\n        ),\r\n      );\r\n    } catch (e) {\r\n      Logger.logAction(\r\n        this.logger,\r\n        Logger.LOG_ERROR,\r\n        'WebSocketTransport.onWsData()',\r\n        'Unexpected exception handing channel message: ' + (e as Error).stack,\r\n      );\r\n    }\r\n  }\r\n\r\n  onWsOpen() {\r\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'WebSocketTransport.onWsOpen()', 'opened WebSocket');\r\n    this.emit('preconnect');\r\n  }\r\n\r\n  onWsClose(ev: number | CloseEvent) {\r\n    let wasClean, code;\r\n    if (typeof ev == 'object') {\r\n      /* W3C spec-compatible */\r\n      code = ev.code;\r\n      // ev.wasClean is undefined in reactnative\r\n      wasClean = ev.wasClean || code === 1000;\r\n    } /*if(typeof(ev) == 'number')*/ else {\r\n      /* ws in node */\r\n      code = ev;\r\n      wasClean = code == 1000;\r\n    }\r\n    delete this.wsConnection;\r\n    if (wasClean) {\r\n      Logger.logAction(this.logger, Logger.LOG_MINOR, 'WebSocketTransport.onWsClose()', 'Cleanly closed WebSocket');\r\n      const err = new ErrorInfo('Websocket closed', 80003, 400);\r\n      this.finish('disconnected', err);\r\n    } else {\r\n      const msg = 'Unclean disconnection of WebSocket ; code = ' + code,\r\n        err = new ErrorInfo(msg, 80003, 400);\r\n      Logger.logAction(this.logger, Logger.LOG_MINOR, 'WebSocketTransport.onWsClose()', msg);\r\n      this.finish('disconnected', err);\r\n    }\r\n    this.emit('disposed');\r\n  }\r\n\r\n  onWsError(err: ErrorEvent) {\r\n    Logger.logAction(\r\n      this.logger,\r\n      Logger.LOG_MINOR,\r\n      'WebSocketTransport.onError()',\r\n      'Error from WebSocket: ' + err.message,\r\n    );\r\n    /* Wait a tick before aborting: if the websocket was connected, this event\r\n     * will be immediately followed by an onclose event with a close code. Allow\r\n     * that to close it (so we see the close code) rather than anticipating it */\r\n    Platform.Config.nextTick(() => {\r\n      this.disconnect(Error(err.message));\r\n    });\r\n  }\r\n\r\n  dispose() {\r\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'WebSocketTransport.dispose()', '');\r\n    this.isDisposed = true;\r\n    const wsConnection = this.wsConnection;\r\n    if (wsConnection) {\r\n      /* Ignore any messages that come through after dispose() is called but before\r\n       * websocket is actually closed. (mostly would be harmless, but if it's a\r\n       * CONNECTED, it'll re-tick isConnected and cause all sorts of havoc) */\r\n      wsConnection.onmessage = function () {};\r\n      delete this.wsConnection;\r\n      /* defer until the next event loop cycle before closing the socket,\r\n       * giving some implementations the opportunity to send any outstanding close message */\r\n      Platform.Config.nextTick(() => {\r\n        Logger.logAction(this.logger, Logger.LOG_MICRO, 'WebSocketTransport.dispose()', 'closing websocket');\r\n        if (!wsConnection) {\r\n          throw new Error('WebSocketTransport.dispose(): wsConnection is not defined');\r\n        }\r\n        wsConnection.close();\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default WebSocketTransport;\r\n", "import * as API from '../../../../ably';\nimport RealtimeChannel from './realtimechannel';\nimport Message from '../types/message';\n\nexport class FilteredSubscriptions {\n  static subscribeFilter(channel: RealtimeChannel, filter: API.MessageFilter, listener: API.messageCallback<Message>) {\n    const filteredListener = (m: Message) => {\n      const mapping: { [key in keyof API.MessageFilter]: any } = {\n        name: m.name,\n        refTimeserial: m.extras?.ref?.timeserial,\n        refType: m.extras?.ref?.type,\n        isRef: !!m.extras?.ref?.timeserial,\n        clientId: m.clientId,\n      };\n      // Check if any values are defined in the filter and if they match the value in the message object\n      if (\n        Object.entries(filter).find(([key, value]) =>\n          value !== undefined ? mapping[key as keyof API.MessageFilter] !== value : false,\n        )\n      ) {\n        return;\n      }\n      listener(m);\n    };\n    this.addFilteredSubscription(channel, filter, listener, filteredListener);\n    channel.subscriptions.on(filteredListener);\n  }\n\n  // Adds a new filtered subscription\n  static addFilteredSubscription(\n    channel: RealtimeChannel,\n    filter: API.MessageFilter,\n    realListener: API.messageCallback<Message>,\n    filteredListener: API.messageCallback<Message>,\n  ) {\n    if (!channel.filteredSubscriptions) {\n      channel.filteredSubscriptions = new Map<\n        API.messageCallback<Message>,\n        Map<API.MessageFilter, API.messageCallback<Message>[]>\n      >();\n    }\n    if (channel.filteredSubscriptions.has(realListener)) {\n      const realListenerMap = channel.filteredSubscriptions.get(realListener) as Map<\n        API.MessageFilter,\n        API.messageCallback<Message>[]\n      >;\n      // Add the filtered listener to the map, or append to the array if this filter has already been used\n      realListenerMap.set(filter, realListenerMap?.get(filter)?.concat(filteredListener) || [filteredListener]);\n    } else {\n      channel.filteredSubscriptions.set(\n        realListener,\n        new Map<API.MessageFilter, API.messageCallback<Message>[]>([[filter, [filteredListener]]]),\n      );\n    }\n  }\n\n  static getAndDeleteFilteredSubscriptions(\n    channel: RealtimeChannel,\n    filter: API.MessageFilter | undefined,\n    realListener: API.messageCallback<Message> | undefined,\n  ): API.messageCallback<Message>[] {\n    // No filtered subscriptions map means there has been no filtered subscriptions yet, so return nothing\n    if (!channel.filteredSubscriptions) {\n      return [];\n    }\n    // Only a filter is passed in with no specific listener\n    if (!realListener && filter) {\n      // Return each listener which is attached to the specified filter object\n      return Array.from(channel.filteredSubscriptions.entries())\n        .map(([key, filterMaps]) => {\n          // Get (then delete) the maps matching this filter\n          let listenerMaps = filterMaps.get(filter);\n          filterMaps.delete(filter);\n          // Clear the parent if nothing is left\n          if (filterMaps.size === 0) {\n            channel.filteredSubscriptions?.delete(key);\n          }\n          return listenerMaps;\n        })\n        .reduce(\n          (prev, cur) => (cur ? (prev as API.messageCallback<Message>[]).concat(...cur) : prev),\n          [],\n        ) as API.messageCallback<Message>[];\n    }\n\n    // No subscriptions for this listener\n    if (!realListener || !channel.filteredSubscriptions.has(realListener)) {\n      return [];\n    }\n    const realListenerMap = channel.filteredSubscriptions.get(realListener) as Map<\n      API.MessageFilter,\n      API.messageCallback<Message>[]\n    >;\n    // If no filter is specified return all listeners using that function\n    if (!filter) {\n      // array.flat is not available unless we support es2019 or higher\n      const listeners = Array.from(realListenerMap.values()).reduce((prev, cur) => prev.concat(...cur), []);\n      // remove the listener from the map\n      channel.filteredSubscriptions.delete(realListener);\n      return listeners;\n    }\n\n    let listeners = realListenerMap.get(filter);\n    realListenerMap.delete(filter);\n\n    return listeners || [];\n  }\n}\n", "import BaseRealtime from './baserealtime';\nimport ClientOptions from '../../types/ClientOptions';\nimport { allCommonModularPlugins } from './modularplugins';\nimport * as Utils from '../util/utils';\nimport ConnectionManager from '../transport/connectionmanager';\nimport ProtocolMessage from '../types/protocolmessage';\nimport Platform from 'common/platform';\nimport { DefaultMessage } from '../types/defaultmessage';\nimport { MsgPack } from 'common/types/msgpack';\nimport RealtimePresence from './realtimepresence';\nimport { DefaultPresenceMessage } from '../types/defaultpresencemessage';\nimport { DefaultAnnotation } from '../types/defaultannotation';\nimport WebSocketTransport from '../transport/websockettransport';\nimport { FilteredSubscriptions } from './filteredsubscriptions';\nimport { PresenceMap } from './presencemap';\nimport PresenceMessage, { WirePresenceMessage } from '../types/presencemessage';\nimport RealtimeAnnotations from './realtimeannotations';\nimport RestAnnotations from './restannotations';\nimport Annotation, { WireAnnotation } from '../types/annotation';\nimport { Http } from 'common/types/http';\nimport Defaults from '../util/defaults';\nimport Logger from '../util/logger';\nimport { MessageEncoding } from '../types/basemessage';\n\n/**\n `DefaultRealtime` is the class that the non tree-shakable version of the SDK exports as `Realtime`. It ensures that this version of the SDK includes all of the functionality which is optionally available in the tree-shakable version.\n */\nexport class DefaultRealtime extends BaseRealtime {\n  // The public typings declare that this requires an argument to be passed, but since we want to emit a good error message in the case where a non-TypeScript user does not pass an argument, tell the compiler that this is possible so that it forces us to handle it.\n  constructor(options?: ClientOptions | string) {\n    const MsgPack = DefaultRealtime._MsgPack;\n    if (!MsgPack) {\n      throw new Error('Expected DefaultRealtime._MsgPack to have been set');\n    }\n\n    super(\n      Defaults.objectifyOptions(options, true, 'Realtime', Logger.defaultLogger, {\n        ...allCommonModularPlugins,\n        Crypto: DefaultRealtime.Crypto ?? undefined,\n        MsgPack,\n        RealtimePresence: {\n          RealtimePresence,\n          PresenceMessage,\n          WirePresenceMessage,\n        },\n        Annotations: {\n          Annotation,\n          WireAnnotation,\n          RealtimeAnnotations,\n          RestAnnotations,\n        },\n        WebSocketTransport,\n        MessageInteractions: FilteredSubscriptions,\n      }),\n    );\n  }\n\n  static Utils = Utils;\n  static ConnectionManager = ConnectionManager;\n  static ProtocolMessage = ProtocolMessage;\n\n  private static _Crypto: typeof Platform.Crypto = null;\n  static get Crypto() {\n    if (this._Crypto === null) {\n      throw new Error('Encryption not enabled; use ably.encryption.js instead');\n    }\n\n    return this._Crypto;\n  }\n  static set Crypto(newValue: typeof Platform.Crypto) {\n    this._Crypto = newValue;\n  }\n\n  static Message = DefaultMessage;\n  static PresenceMessage = DefaultPresenceMessage;\n  static Annotation = DefaultAnnotation;\n\n  static _MsgPack: MsgPack | null = null;\n\n  // Used by tests\n  static _Http = Http;\n  static _PresenceMap = PresenceMap;\n  static _MessageEncoding = MessageEncoding;\n}\n", "/**\n * Copied from https://gist.github.com/stevendesu/2d52f7b5e1f1184af3b667c0b5e054b8\n *\n * \"A simple, open-source, HMAC-SHA256 implementation in pure JavaScript. Designed for efficient minification.\"\n *\n * I asked about licensing, and the author said:\n *\n * > Feel free to use it however you'd like \uD83D\uDE04 As the gist title indicates,\n * > this is \"a simple open source implementation\". Feel free to choose whatever\n * > license you find most permissible, but I offer no warranty for the code.\n * > It's 100% free to do with as you please.\n */\n\n// To ensure cross-browser support even without a proper SubtleCrypto\n// impelmentation (or without access to the impelmentation, as is the case with\n// Chrome loaded over HTTP instead of HTTPS), this library can create SHA-256\n// HMAC signatures using nothing but raw JavaScript\n\n/* eslint-disable no-magic-numbers, id-length, no-param-reassign, new-cap */\n\n// By giving internal functions names that we can mangle, future calls to\n// them are reduced to a single byte (minor space savings in minified file)\nvar uint8Array = Uint8Array;\nvar uint32Array = Uint32Array;\nvar pow = Math.pow;\n\n// Will be initialized below\n// Using a Uint32Array instead of a simple array makes the minified code\n// a bit bigger (we lose our `unshift()` hack), but comes with huge\n// performance gains\nvar DEFAULT_STATE = new uint32Array(8);\nvar ROUND_CONSTANTS: number[] = [];\n\n// Reusable object for expanded message\n// Using a Uint32Array instead of a simple array makes the minified code\n// 7 bytes larger, but comes with huge performance gains\nvar M = new uint32Array(64);\n\n// After minification the code to compute the default state and round\n// constants is smaller than the output. More importantly, this serves as a\n// good educational aide for anyone wondering where the magic numbers come\n// from. No magic numbers FTW!\nfunction getFractionalBits(n: number) {\n  return ((n - (n | 0)) * pow(2, 32)) | 0;\n}\n\nvar n = 2,\n  nPrime = 0;\nwhile (nPrime < 64) {\n  // isPrime() was in-lined from its original function form to save\n  // a few bytes\n  var isPrime = true;\n  // Math.sqrt() was replaced with pow(n, 1/2) to save a few bytes\n  // var sqrtN = pow(n, 1 / 2);\n  // So technically to determine if a number is prime you only need to\n  // check numbers up to the square root. However this function only runs\n  // once and we're only computing the first 64 primes (up to 311), so on\n  // any modern CPU this whole function runs in a couple milliseconds.\n  // By going to n / 2 instead of sqrt(n) we net 8 byte savings and no\n  // scaling performance cost\n  for (var factor = 2; factor <= n / 2; factor++) {\n    if (n % factor === 0) {\n      isPrime = false;\n    }\n  }\n  if (isPrime) {\n    if (nPrime < 8) {\n      DEFAULT_STATE[nPrime] = getFractionalBits(pow(n, 1 / 2));\n    }\n    ROUND_CONSTANTS[nPrime] = getFractionalBits(pow(n, 1 / 3));\n\n    nPrime++;\n  }\n\n  n++;\n}\n\n// For cross-platform support we need to ensure that all 32-bit words are\n// in the same endianness. A UTF-8 TextEncoder will return BigEndian data,\n// so upon reading or writing to our ArrayBuffer we'll only swap the bytes\n// if our system is LittleEndian (which is about 99% of CPUs)\nvar LittleEndian = !!new uint8Array(new uint32Array([1]).buffer)[0];\n\nfunction convertEndian(word: number) {\n  if (LittleEndian) {\n    return (\n      // byte 1 -> byte 4\n      (word >>> 24) |\n      // byte 2 -> byte 3\n      (((word >>> 16) & 0xff) << 8) |\n      // byte 3 -> byte 2\n      ((word & 0xff00) << 8) |\n      // byte 4 -> byte 1\n      (word << 24)\n    );\n  } else {\n    return word;\n  }\n}\n\nfunction rightRotate(word: number, bits: number) {\n  return (word >>> bits) | (word << (32 - bits));\n}\n\nexport function sha256(data: Uint8Array): Uint8Array {\n  // Copy default state\n  var STATE = DEFAULT_STATE.slice();\n\n  // Caching this reduces occurrences of \".length\" in minified JavaScript\n  // 3 more byte savings! :D\n  var legth = data.length;\n\n  // Pad data\n  var bitLength = legth * 8;\n  var newBitLength = 512 - ((bitLength + 64) % 512) - 1 + bitLength + 65;\n\n  // \"bytes\" and \"words\" are stored BigEndian\n  var bytes = new uint8Array(newBitLength / 8);\n  var words = new uint32Array(bytes.buffer);\n\n  bytes.set(data, 0);\n  // Append a 1\n  bytes[legth] = 0b10000000;\n  // Store length in BigEndian\n  words[words.length - 1] = convertEndian(bitLength);\n\n  // Loop iterator (avoid two instances of \"var\") -- saves 2 bytes\n  var round;\n\n  // Process blocks (512 bits / 64 bytes / 16 words at a time)\n  for (var block = 0; block < newBitLength / 32; block += 16) {\n    var workingState = STATE.slice();\n\n    // Rounds\n    for (round = 0; round < 64; round++) {\n      var MRound;\n      // Expand message\n      if (round < 16) {\n        // Convert to platform Endianness for later math\n        MRound = convertEndian(words[block + round]);\n      } else {\n        var gamma0x = M[round - 15];\n        var gamma1x = M[round - 2];\n        MRound =\n          M[round - 7] +\n          M[round - 16] +\n          (rightRotate(gamma0x, 7) ^ rightRotate(gamma0x, 18) ^ (gamma0x >>> 3)) +\n          (rightRotate(gamma1x, 17) ^ rightRotate(gamma1x, 19) ^ (gamma1x >>> 10));\n      }\n\n      // M array matches platform endianness\n      M[round] = MRound |= 0;\n\n      // Computation\n      var t1 =\n        (rightRotate(workingState[4], 6) ^ rightRotate(workingState[4], 11) ^ rightRotate(workingState[4], 25)) +\n        ((workingState[4] & workingState[5]) ^ (~workingState[4] & workingState[6])) +\n        workingState[7] +\n        MRound +\n        ROUND_CONSTANTS[round];\n      var t2 =\n        (rightRotate(workingState[0], 2) ^ rightRotate(workingState[0], 13) ^ rightRotate(workingState[0], 22)) +\n        ((workingState[0] & workingState[1]) ^ (workingState[2] & (workingState[0] ^ workingState[1])));\n      for (var i = 7; i > 0; i--) {\n        workingState[i] = workingState[i - 1];\n      }\n      workingState[0] = (t1 + t2) | 0;\n      workingState[4] = (workingState[4] + t1) | 0;\n    }\n\n    // Update state\n    for (round = 0; round < 8; round++) {\n      STATE[round] = (STATE[round] + workingState[round]) | 0;\n    }\n  }\n\n  // Finally the state needs to be converted to BigEndian for output\n  // And we want to return a Uint8Array, not a Uint32Array\n  return new uint8Array(\n    new uint32Array(\n      STATE.map(function (val) {\n        return convertEndian(val);\n      }),\n    ).buffer,\n  );\n}\n\nexport function hmac(key: Uint8Array, data: Uint8Array): Uint8Array {\n  if (key.length > 64) key = sha256(key);\n\n  if (key.length < 64) {\n    const tmp = new Uint8Array(64);\n    tmp.set(key, 0);\n    key = tmp;\n  }\n\n  // Generate inner and outer keys\n  var innerKey = new Uint8Array(64);\n  var outerKey = new Uint8Array(64);\n  for (var i = 0; i < 64; i++) {\n    innerKey[i] = 0x36 ^ key[i];\n    outerKey[i] = 0x5c ^ key[i];\n  }\n\n  // Append the innerKey\n  var msg = new Uint8Array(data.length + 64);\n  msg.set(innerKey, 0);\n  msg.set(data, 64);\n\n  // Has the previous message and append the outerKey\n  var result = new Uint8Array(64 + 32);\n  result.set(outerKey, 0);\n  result.set(sha256(msg), 64);\n\n  // Hash the previous message\n  return sha256(result);\n}\n", "import Platform from 'common/platform';\r\nimport IBufferUtils from 'common/types/IBufferUtils';\r\nimport { hmac as hmacSha256, sha256 } from './hmac-sha256';\r\n\r\n/* Most BufferUtils methods that return a binary object return an ArrayBuffer\r\n * The exception is toBuffer, which returns a Uint8Array */\r\n\r\nexport type Bufferlike = BufferSource;\r\nexport type Output = Bufferlike;\r\nexport type ToBufferOutput = Uint8Array;\r\n\r\nclass BufferUtils implements IBufferUtils<Bufferlike, Output, ToBufferOutput> {\r\n  base64CharSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n  hexCharSet = '0123456789abcdef';\r\n\r\n  // https://gist.githubusercontent.com/jonleighton/958841/raw/f200e30dfe95212c0165ccf1ae000ca51e9de803/gistfile1.js\r\n  private uint8ViewToBase64(bytes: Uint8Array): string {\r\n    let base64 = '';\r\n    const encodings = this.base64CharSet;\r\n\r\n    const byteLength = bytes.byteLength;\r\n    const byteRemainder = byteLength % 3;\r\n    const mainLength = byteLength - byteRemainder;\r\n\r\n    let a, b, c, d;\r\n    let chunk;\r\n\r\n    // Main loop deals with bytes in chunks of 3\r\n    for (let i = 0; i < mainLength; i = i + 3) {\r\n      // Combine the three bytes into a single integer\r\n      chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\r\n\r\n      // Use bitmasks to extract 6-bit segments from the triplet\r\n      a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\r\n      b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12\r\n      c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6\r\n      d = chunk & 63; // 63       = 2^6 - 1\r\n\r\n      // Convert the raw binary segments to the appropriate ASCII encoding\r\n      base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\r\n    }\r\n\r\n    // Deal with the remaining bytes and padding\r\n    if (byteRemainder == 1) {\r\n      chunk = bytes[mainLength];\r\n\r\n      a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\r\n\r\n      // Set the 4 least significant bits to zero\r\n      b = (chunk & 3) << 4; // 3   = 2^2 - 1\r\n\r\n      base64 += encodings[a] + encodings[b] + '==';\r\n    } else if (byteRemainder == 2) {\r\n      chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];\r\n\r\n      a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\r\n      b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4\r\n\r\n      // Set the 2 least significant bits to zero\r\n      c = (chunk & 15) << 2; // 15    = 2^4 - 1\r\n\r\n      base64 += encodings[a] + encodings[b] + encodings[c] + '=';\r\n    }\r\n\r\n    return base64;\r\n  }\r\n\r\n  private base64ToArrayBuffer(base64: string): Output {\r\n    const binary_string = atob?.(base64) as string; // this will always be defined in browser so it's safe to cast\r\n    const len = binary_string.length;\r\n    const bytes = new Uint8Array(len);\r\n    for (let i = 0; i < len; i++) {\r\n      const ascii = binary_string.charCodeAt(i);\r\n      bytes[i] = ascii;\r\n    }\r\n    return this.toArrayBuffer(bytes);\r\n  }\r\n\r\n  isBuffer(buffer: unknown): buffer is Bufferlike {\r\n    return buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer);\r\n  }\r\n\r\n  toBuffer(buffer: Bufferlike): ToBufferOutput {\r\n    if (!ArrayBuffer) {\r\n      throw new Error(\"Can't convert to Buffer: browser does not support the necessary types\");\r\n    }\r\n\r\n    if (buffer instanceof ArrayBuffer) {\r\n      return new Uint8Array(buffer);\r\n    }\r\n\r\n    if (ArrayBuffer.isView(buffer)) {\r\n      return new Uint8Array(this.toArrayBuffer(buffer));\r\n    }\r\n\r\n    throw new Error('BufferUtils.toBuffer expected an ArrayBuffer or a view onto one');\r\n  }\r\n\r\n  toArrayBuffer(buffer: Bufferlike): ArrayBuffer {\r\n    if (!ArrayBuffer) {\r\n      throw new Error(\"Can't convert to ArrayBuffer: browser does not support the necessary types\");\r\n    }\r\n\r\n    if (buffer instanceof ArrayBuffer) {\r\n      return buffer;\r\n    }\r\n\r\n    if (ArrayBuffer.isView(buffer)) {\r\n      return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\r\n    }\r\n\r\n    throw new Error('BufferUtils.toArrayBuffer expected an ArrayBuffer or a view onto one');\r\n  }\r\n\r\n  base64Encode(buffer: Bufferlike): string {\r\n    return this.uint8ViewToBase64(this.toBuffer(buffer));\r\n  }\r\n\r\n  base64UrlEncode(buffer: Bufferlike): string {\r\n    // base64url encoding is based on regular base64 with following changes: https://base64.guru/standards/base64url\r\n    return this.base64Encode(buffer).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\r\n  }\r\n\r\n  base64Decode(str: string): Output {\r\n    if (ArrayBuffer && Platform.Config.atob) {\r\n      return this.base64ToArrayBuffer(str);\r\n    } else {\r\n      throw new Error('Expected ArrayBuffer to exist and Platform.Config.atob to be configured');\r\n    }\r\n  }\r\n\r\n  hexEncode(buffer: Bufferlike): string {\r\n    const uint8Array = this.toBuffer(buffer);\r\n    return uint8Array.reduce((accum, byte) => accum + byte.toString(16).padStart(2, '0'), '');\r\n  }\r\n\r\n  hexDecode(hexEncodedBytes: string): Output {\r\n    if (hexEncodedBytes.length % 2 !== 0) {\r\n      throw new Error(\"Can't create a byte array from a hex string of odd length\");\r\n    }\r\n\r\n    const uint8Array = new Uint8Array(hexEncodedBytes.length / 2);\r\n\r\n    for (let i = 0; i < uint8Array.length; i++) {\r\n      uint8Array[i] = parseInt(hexEncodedBytes.slice(2 * i, 2 * (i + 1)), 16);\r\n    }\r\n\r\n    return this.toArrayBuffer(uint8Array);\r\n  }\r\n\r\n  utf8Encode(string: string): Output {\r\n    if (Platform.Config.TextEncoder) {\r\n      const encodedByteArray = new Platform.Config.TextEncoder().encode(string);\r\n      return this.toArrayBuffer(encodedByteArray);\r\n    } else {\r\n      throw new Error('Expected TextEncoder to be configured');\r\n    }\r\n  }\r\n\r\n  /* For utf8 decoding we apply slightly stricter input validation than to\r\n   * hexEncode/base64Encode/etc: in those we accept anything that Buffer.from\r\n   * can take (in particular allowing strings, which are just interpreted as\r\n   * binary); here we ensure that the input is actually a buffer since trying\r\n   * to utf8-decode a string to another string is almost certainly a mistake */\r\n  utf8Decode(buffer: Bufferlike): string {\r\n    if (!this.isBuffer(buffer)) {\r\n      throw new Error('Expected input of utf8decode to be an arraybuffer or typed array');\r\n    }\r\n    if (TextDecoder) {\r\n      return new TextDecoder().decode(buffer);\r\n    } else {\r\n      throw new Error('Expected TextDecoder to be configured');\r\n    }\r\n  }\r\n\r\n  areBuffersEqual(buffer1: Bufferlike, buffer2: Bufferlike): boolean {\r\n    if (!buffer1 || !buffer2) return false;\r\n    const arrayBuffer1 = this.toArrayBuffer(buffer1);\r\n    const arrayBuffer2 = this.toArrayBuffer(buffer2);\r\n\r\n    if (arrayBuffer1.byteLength != arrayBuffer2.byteLength) return false;\r\n\r\n    const bytes1 = new Uint8Array(arrayBuffer1);\r\n    const bytes2 = new Uint8Array(arrayBuffer2);\r\n\r\n    for (var i = 0; i < bytes1.length; i++) {\r\n      if (bytes1[i] != bytes2[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  byteLength(buffer: Bufferlike): number {\r\n    if (buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer)) {\r\n      return buffer.byteLength;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  arrayBufferViewToBuffer(arrayBufferView: ArrayBufferView): ArrayBuffer {\r\n    return this.toArrayBuffer(arrayBufferView);\r\n  }\r\n\r\n  concat(buffers: Bufferlike[]): Output {\r\n    const sumLength = buffers.reduce((acc, v) => acc + v.byteLength, 0);\r\n    const result = new Uint8Array(sumLength);\r\n    let offset = 0;\r\n\r\n    for (const buffer of buffers) {\r\n      const uint8Array = this.toBuffer(buffer);\r\n      // see TypedArray.set for TypedArray argument https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set#typedarray\r\n      result.set(uint8Array, offset);\r\n      offset += uint8Array.byteLength;\r\n    }\r\n\r\n    return result.buffer;\r\n  }\r\n\r\n  sha256(message: Bufferlike): Output {\r\n    const hash = sha256(this.toBuffer(message));\r\n    return this.toArrayBuffer(hash);\r\n  }\r\n\r\n  hmacSha256(message: Bufferlike, key: Bufferlike): Output {\r\n    const hash = hmacSha256(this.toBuffer(key), this.toBuffer(message));\r\n    return this.toArrayBuffer(hash);\r\n  }\r\n}\r\n\r\nexport default new BufferUtils();\r\n", "import Logger from '../../../../common/lib/util/logger';\nimport ErrorInfo from 'common/lib/types/errorinfo';\nimport * as API from '../../../../../ably';\nimport ICryptoStatic, { IGetCipherParams } from '../../../../common/types/ICryptoStatic';\nimport ICipher from '../../../../common/types/ICipher';\nimport { CryptoDataTypes } from '../../../../common/types/cryptoDataTypes';\nimport BufferUtils, { Bufferlike, Output as BufferUtilsOutput } from './bufferutils';\nimport { IPlatformConfig } from 'common/types/IPlatformConfig';\n\n// The type to which ./msgpack.ts deserializes elements of the `bin` or `ext` type\ntype MessagePackBinaryType = ArrayBuffer;\n\ntype IV = CryptoDataTypes.IV<BufferUtilsOutput>;\ntype InputPlaintext = CryptoDataTypes.InputPlaintext<Bufferlike, BufferUtilsOutput>;\ntype OutputCiphertext = ArrayBuffer;\ntype InputCiphertext = CryptoDataTypes.InputCiphertext<MessagePackBinaryType, BufferUtilsOutput>;\ntype OutputPlaintext = ArrayBuffer;\n\nvar createCryptoClass = function (config: IPlatformConfig, bufferUtils: typeof BufferUtils) {\n  var DEFAULT_ALGORITHM = 'aes';\n  var DEFAULT_KEYLENGTH = 256; // bits\n  var DEFAULT_MODE = 'cbc';\n  var DEFAULT_BLOCKLENGTH = 16; // bytes\n\n  /**\n   * Internal: checks that the cipherParams are a valid combination. Currently\n   * just checks that the calculated keyLength is a valid one for aes-cbc\n   */\n  function validateCipherParams(params: API.CipherParams) {\n    if (params.algorithm === 'aes' && params.mode === 'cbc') {\n      if (params.keyLength === 128 || params.keyLength === 256) {\n        return;\n      }\n      throw new Error(\n        'Unsupported key length ' +\n          params.keyLength +\n          ' for aes-cbc encryption. Encryption key must be 128 or 256 bits (16 or 32 ASCII characters)',\n      );\n    }\n  }\n\n  function normaliseBase64(string: string) {\n    /* url-safe base64 strings use _ and - instread of / and + */\n    return string.replace('_', '/').replace('-', '+');\n  }\n\n  function isCipherParams(params: API.CipherParams | API.CipherParamOptions): params is API.CipherParams {\n    // Although API.CipherParams is an interface, the documentation for its `key` property makes it clear that the only valid way to form one is by using getDefaultParams. The implementation of getDefaultParams returns an instance of CipherParams.\n    return params instanceof CipherParams;\n  }\n\n  /**\n   * A class encapsulating the client-specifiable parameters for\n   * the cipher.\n   *\n   * algorithm is the name of the algorithm in the default system provider,\n   * or the lower-cased version of it; eg \"aes\" or \"AES\".\n   *\n   * Clients are recommended to not call this directly, but instead to use the\n   * Crypto.getDefaultParams helper, which will fill in any fields not supplied\n   * with default values and validation the result.\n   */\n  class CipherParams implements API.CipherParams {\n    algorithm: string;\n    keyLength: number;\n    mode: string;\n    key: ArrayBuffer;\n\n    constructor(algorithm: string, keyLength: number, mode: string, key: ArrayBuffer) {\n      this.algorithm = algorithm;\n      this.keyLength = keyLength;\n      this.mode = mode;\n      this.key = key;\n    }\n  }\n\n  /**\n   * Utility classes and interfaces for message payload encryption.\n   *\n   * This class supports AES/CBC/PKCS5 with a default keylength of 128 bits\n   * but supporting other keylengths. Other algorithms and chaining modes are\n   * not supported directly, but supportable by extending/implementing the base\n   * classes and interfaces here.\n   *\n   * Secure random data for creation of Initialization Vectors (IVs) and keys\n   * is obtained from window.crypto.getRandomValues.\n   *\n   * Each message payload is encrypted with an IV in CBC mode, and the IV is\n   * concatenated with the resulting raw ciphertext to construct the \"ciphertext\"\n   * data passed to the recipient.\n   */\n  class Crypto {\n    static CipherParams = CipherParams;\n\n    /**\n     * Obtain a complete CipherParams instance from the provided params, filling\n     * in any not provided with default values, calculating a keyLength from\n     * the supplied key, and validating the result.\n     * @param params an object containing at a minimum a `key` key with value the\n     * key, as either a binary or a base64-encoded string.\n     * May optionally also contain: algorithm (defaults to AES),\n     * mode (defaults to 'cbc')\n     */\n    static getDefaultParams(params: API.CipherParamOptions) {\n      var key: ArrayBuffer;\n\n      if (!params.key) {\n        throw new Error('Crypto.getDefaultParams: a key is required');\n      }\n\n      if (typeof params.key === 'string') {\n        key = bufferUtils.toArrayBuffer(bufferUtils.base64Decode(normaliseBase64(params.key)));\n      } else if (params.key instanceof ArrayBuffer) {\n        key = params.key;\n      } else {\n        key = bufferUtils.toArrayBuffer(params.key);\n      }\n\n      var algorithm = params.algorithm || DEFAULT_ALGORITHM;\n      var keyLength = key.byteLength * 8;\n      var mode = params.mode || DEFAULT_MODE;\n      var cipherParams = new CipherParams(algorithm, keyLength, mode, key);\n\n      if (params.keyLength && params.keyLength !== cipherParams.keyLength) {\n        throw new Error(\n          'Crypto.getDefaultParams: a keyLength of ' +\n            params.keyLength +\n            ' was specified, but the key actually has length ' +\n            cipherParams.keyLength,\n        );\n      }\n\n      validateCipherParams(cipherParams);\n      return cipherParams;\n    }\n\n    /**\n     * Generate a random encryption key from the supplied keylength (or the\n     * default keyLength if none supplied) as an ArrayBuffer\n     * @param keyLength (optional) the required keyLength in bits\n     */\n    static async generateRandomKey(keyLength?: number): Promise<API.CipherKey> {\n      try {\n        return config.getRandomArrayBuffer((keyLength || DEFAULT_KEYLENGTH) / 8);\n      } catch (err) {\n        throw new ErrorInfo('Failed to generate random key: ' + (err as Error).message, 400, 50000, err as Error);\n      }\n    }\n\n    /**\n     * Internal; get a ChannelCipher instance based on the given cipherParams\n     * @param params either a CipherParams instance or some subset of its\n     * fields that includes a key\n     */\n    static getCipher(params: IGetCipherParams<IV>, logger: Logger) {\n      var cipherParams = isCipherParams(params) ? (params as CipherParams) : this.getDefaultParams(params);\n\n      return {\n        cipherParams: cipherParams,\n        cipher: new CBCCipher(cipherParams, params.iv ?? null, logger),\n      };\n    }\n  }\n\n  Crypto satisfies ICryptoStatic<IV, InputPlaintext, OutputCiphertext, InputCiphertext, OutputPlaintext>;\n\n  class CBCCipher implements ICipher<InputPlaintext, OutputCiphertext, InputCiphertext, OutputPlaintext> {\n    algorithm: string;\n    webCryptoAlgorithm: string;\n    key: ArrayBuffer;\n    iv: ArrayBuffer | null;\n\n    constructor(\n      params: CipherParams,\n      iv: IV | null,\n      private readonly logger: Logger,\n    ) {\n      if (!crypto.subtle) {\n        if (isSecureContext) {\n          throw new Error(\n            'Crypto operations are not possible since the browser\u2019s SubtleCrypto class is unavailable (reason unknown).',\n          );\n        } else {\n          throw new Error(\n            'Crypto operations are is not possible since the current environment is a non-secure context and hence the browser\u2019s SubtleCrypto class is not available.',\n          );\n        }\n      }\n\n      this.algorithm = params.algorithm + '-' + String(params.keyLength) + '-' + params.mode;\n      this.webCryptoAlgorithm = params.algorithm + '-' + params.mode;\n      this.key = bufferUtils.toArrayBuffer(params.key);\n      this.iv = iv ? bufferUtils.toArrayBuffer(iv) : null;\n    }\n\n    private concat(buffer1: Bufferlike, buffer2: Bufferlike) {\n      const output = new ArrayBuffer(buffer1.byteLength + buffer2.byteLength);\n      const outputView = new DataView(output);\n\n      const buffer1View = new DataView(bufferUtils.toArrayBuffer(buffer1));\n      for (let i = 0; i < buffer1View.byteLength; i++) {\n        outputView.setInt8(i, buffer1View.getInt8(i));\n      }\n\n      const buffer2View = new DataView(bufferUtils.toArrayBuffer(buffer2));\n      for (let i = 0; i < buffer2View.byteLength; i++) {\n        outputView.setInt8(buffer1View.byteLength + i, buffer2View.getInt8(i));\n      }\n\n      return output;\n    }\n\n    async encrypt(plaintext: InputPlaintext): Promise<OutputCiphertext> {\n      Logger.logAction(this.logger, Logger.LOG_MICRO, 'CBCCipher.encrypt()', '');\n\n      const iv = await this.getIv();\n      const cryptoKey = await crypto.subtle.importKey('raw', this.key, this.webCryptoAlgorithm, false, ['encrypt']);\n      const ciphertext = await crypto.subtle.encrypt({ name: this.webCryptoAlgorithm, iv }, cryptoKey, plaintext);\n\n      return this.concat(iv, ciphertext);\n    }\n\n    async decrypt(ciphertext: InputCiphertext): Promise<OutputPlaintext> {\n      Logger.logAction(this.logger, Logger.LOG_MICRO, 'CBCCipher.decrypt()', '');\n\n      const ciphertextArrayBuffer = bufferUtils.toArrayBuffer(ciphertext);\n      const iv = ciphertextArrayBuffer.slice(0, DEFAULT_BLOCKLENGTH);\n      const ciphertextBody = ciphertextArrayBuffer.slice(DEFAULT_BLOCKLENGTH);\n\n      const cryptoKey = await crypto.subtle.importKey('raw', this.key, this.webCryptoAlgorithm, false, ['decrypt']);\n      return crypto.subtle.decrypt({ name: this.webCryptoAlgorithm, iv }, cryptoKey, ciphertextBody);\n    }\n\n    async getIv(): Promise<ArrayBuffer> {\n      if (this.iv) {\n        var iv = this.iv;\n        this.iv = null;\n        return iv;\n      }\n\n      const randomBlock = await config.getRandomArrayBuffer(DEFAULT_BLOCKLENGTH);\n      return bufferUtils.toArrayBuffer(randomBlock);\n    }\n  }\n\n  return Crypto;\n};\n\nexport { createCryptoClass };\n", "enum XHRStates {\n  REQ_SEND = 0,\n  REQ_RECV = 1,\n  REQ_RECV_POLL = 2,\n  REQ_RECV_STREAM = 3,\n}\n\nexport default XHRStates;\n", "import Platform from 'common/platform';\nimport Defaults from 'common/lib/util/defaults';\nimport ErrorInfo, { PartialErrorInfo } from 'common/lib/types/errorinfo';\nimport { RequestBody, RequestResultError, RequestParams, RequestResult } from 'common/types/http';\nimport HttpMethods from 'common/constants/HttpMethods';\nimport BaseClient from 'common/lib/client/baseclient';\nimport XHRStates from 'common/constants/XHRStates';\nimport Logger from 'common/lib/util/logger';\nimport { StandardCallback } from 'common/types/utils';\nimport { isSuccessCode } from 'common/constants/HttpStatusCodes';\nimport { ModularPlugins } from 'common/lib/client/modularplugins';\n\nexport type HTTPRequestImplementations = Pick<ModularPlugins, 'XHRRequest' | 'FetchRequest'>;\n\nfunction createMissingImplementationError() {\n  return new ErrorInfo(\n    'No HTTP request plugin provided. Provide at least one of the FetchRequest or XHRRequest plugins.',\n    400,\n    40000,\n  );\n}\n\nconst Http = class {\n  static methods = [HttpMethods.Get, HttpMethods.Delete, HttpMethods.Post, HttpMethods.Put, HttpMethods.Patch];\n  static methodsWithoutBody = [HttpMethods.Get, HttpMethods.Delete];\n  static methodsWithBody = [HttpMethods.Post, HttpMethods.Put, HttpMethods.Patch];\n  // HTTP request implementations that are available even without a BaseClient object (needed by some tests which directly instantiate `Http` without a client)\n  static bundledRequestImplementations: HTTPRequestImplementations;\n  checksInProgress: Array<StandardCallback<boolean>> | null = null;\n  private client: BaseClient | null;\n\n  constructor(client?: BaseClient) {\n    this.client = client ?? null;\n    const connectivityCheckUrl = client?.options.connectivityCheckUrl || Defaults.connectivityCheckUrl;\n    const connectivityCheckParams = client?.options.connectivityCheckParams ?? null;\n    const connectivityUrlIsDefault = !client?.options.connectivityCheckUrl;\n\n    const requestImplementations = {\n      ...Http.bundledRequestImplementations,\n      ...client?._additionalHTTPRequestImplementations,\n    };\n    const xhrRequestImplementation = requestImplementations.XHRRequest;\n    const fetchRequestImplementation = requestImplementations.FetchRequest;\n    const hasImplementation = !!(xhrRequestImplementation || fetchRequestImplementation);\n\n    if (!hasImplementation) {\n      throw createMissingImplementationError();\n    }\n\n    if (Platform.Config.xhrSupported && xhrRequestImplementation) {\n      this.supportsAuthHeaders = true;\n      this.Request = async function (\n        method: HttpMethods,\n        uri: string,\n        headers: Record<string, string> | null,\n        params: RequestParams,\n        body: RequestBody | null,\n      ) {\n        return new Promise((resolve) => {\n          const req = xhrRequestImplementation.createRequest(\n            uri,\n            headers,\n            params,\n            body,\n            XHRStates.REQ_SEND,\n            (client && client.options.timeouts) ?? null,\n            this.logger,\n            method,\n          );\n          req.once(\n            'complete',\n            (\n              error: RequestResult['error'],\n              body: RequestResult['body'],\n              headers: RequestResult['headers'],\n              unpacked: RequestResult['unpacked'],\n              statusCode: RequestResult['statusCode'],\n            ) => resolve({ error, body, headers, unpacked, statusCode }),\n          );\n          req.exec();\n        });\n      };\n      if (client?.options.disableConnectivityCheck) {\n        this.checkConnectivity = async function () {\n          return true;\n        };\n      } else {\n        this.checkConnectivity = async function () {\n          Logger.logAction(\n            this.logger,\n            Logger.LOG_MICRO,\n            '(XHRRequest)Http.checkConnectivity()',\n            'Sending; ' + connectivityCheckUrl,\n          );\n\n          const requestResult = await this.doUri(\n            HttpMethods.Get,\n            connectivityCheckUrl,\n            null,\n            null,\n            connectivityCheckParams,\n          );\n\n          let result = false;\n          if (!connectivityUrlIsDefault) {\n            result = !requestResult.error && isSuccessCode(requestResult.statusCode as number);\n          } else {\n            result = !requestResult.error && (requestResult.body as string)?.replace(/\\n/, '') == 'yes';\n          }\n\n          Logger.logAction(this.logger, Logger.LOG_MICRO, '(XHRRequest)Http.checkConnectivity()', 'Result: ' + result);\n          return result;\n        };\n      }\n    } else if (Platform.Config.fetchSupported && fetchRequestImplementation) {\n      this.supportsAuthHeaders = true;\n      this.Request = async (method, uri, headers, params, body) => {\n        return fetchRequestImplementation(method, client ?? null, uri, headers, params, body);\n      };\n\n      if (client?.options.disableConnectivityCheck) {\n        this.checkConnectivity = async function () {\n          return true;\n        };\n      } else {\n        this.checkConnectivity = async function () {\n          Logger.logAction(\n            this.logger,\n            Logger.LOG_MICRO,\n            '(Fetch)Http.checkConnectivity()',\n            'Sending; ' + connectivityCheckUrl,\n          );\n          const requestResult = await this.doUri(HttpMethods.Get, connectivityCheckUrl, null, null, null);\n          const result = !requestResult.error && (requestResult.body as string)?.replace(/\\n/, '') == 'yes';\n          Logger.logAction(this.logger, Logger.LOG_MICRO, '(Fetch)Http.checkConnectivity()', 'Result: ' + result);\n          return result;\n        };\n      }\n    } else {\n      this.Request = async () => {\n        const error = hasImplementation\n          ? new PartialErrorInfo('no supported HTTP transports available', null, 400)\n          : createMissingImplementationError();\n        return { error };\n      };\n    }\n  }\n\n  get logger(): Logger {\n    return this.client?.logger ?? Logger.defaultLogger;\n  }\n\n  async doUri(\n    method: HttpMethods,\n    uri: string,\n    headers: Record<string, string> | null,\n    body: RequestBody | null,\n    params: RequestParams,\n  ): Promise<RequestResult> {\n    if (!this.Request) {\n      return { error: new PartialErrorInfo('Request invoked before assigned to', null, 500) };\n    }\n    return this.Request(method, uri, headers, params, body);\n  }\n\n  private Request?: (\n    method: HttpMethods,\n    uri: string,\n    headers: Record<string, string> | null,\n    params: RequestParams,\n    body: RequestBody | null,\n  ) => Promise<RequestResult>;\n\n  checkConnectivity?: () => Promise<boolean> = undefined;\n\n  supportsAuthHeaders = false;\n  supportsLinkHeaders = false;\n\n  shouldFallback(errorInfo: RequestResultError) {\n    const statusCode = errorInfo.statusCode as number;\n    /* 400 + no code = a generic xhr onerror. Browser doesn't give us enough\n     * detail to know whether it's fallback-fixable, but it may be (eg if a\n     * network issue), so try just in case */\n    return (\n      (statusCode === 408 && !errorInfo.code) ||\n      (statusCode === 400 && !errorInfo.code) ||\n      (statusCode >= 500 && statusCode <= 504)\n    );\n  }\n};\n\nexport default Http;\n", "import IWebStorage from 'common/types/IWebStorage';\n\nconst test = 'ablyjs-storage-test';\n\nlet globalObject = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : self;\n\nclass Webstorage implements IWebStorage {\n  sessionSupported: boolean;\n  localSupported: boolean;\n\n  constructor() {\n    /* Even just accessing the session/localStorage object can throw a\n     * security exception in some circumstances with some browsers. In\n     * others, calling setItem will throw. So have to check in this\n     * somewhat roundabout way. (If unsupported or no global object,\n     * will throw on accessing a property of undefined) */\n    try {\n      globalObject.sessionStorage.setItem(test, test);\n      globalObject.sessionStorage.removeItem(test);\n      this.sessionSupported = true;\n    } catch (e) {\n      this.sessionSupported = false;\n    }\n\n    try {\n      globalObject.localStorage.setItem(test, test);\n      globalObject.localStorage.removeItem(test);\n      this.localSupported = true;\n    } catch (e) {\n      this.localSupported = false;\n    }\n  }\n\n  get(name: string): any {\n    return this._get(name, false);\n  }\n\n  getSession(name: string): any {\n    return this._get(name, true);\n  }\n\n  remove(name: string): void {\n    return this._remove(name, false);\n  }\n\n  removeSession(name: string): void {\n    return this._remove(name, true);\n  }\n\n  set(name: string, value: string, ttl?: number): void {\n    return this._set(name, value, ttl, false);\n  }\n\n  setSession(name: string, value: string, ttl?: number): void {\n    return this._set(name, value, ttl, true);\n  }\n\n  private _set(name: string, value: string, ttl: number | undefined, session: any) {\n    const wrappedValue: Record<string, any> = { value: value };\n    if (ttl) {\n      wrappedValue.expires = Date.now() + ttl;\n    }\n    return this.storageInterface(session).setItem(name, JSON.stringify(wrappedValue));\n  }\n\n  private _get(name: string, session?: boolean) {\n    if (session && !this.sessionSupported) throw new Error('Session Storage not supported');\n    if (!session && !this.localSupported) throw new Error('Local Storage not supported');\n    const rawItem = this.storageInterface(session).getItem(name);\n    if (!rawItem) return null;\n    const wrappedValue = JSON.parse(rawItem);\n    if (wrappedValue.expires && wrappedValue.expires < Date.now()) {\n      this.storageInterface(session).removeItem(name);\n      return null;\n    }\n    return wrappedValue.value;\n  }\n\n  private _remove(name: string, session?: boolean) {\n    return this.storageInterface(session).removeItem(name);\n  }\n\n  private storageInterface(session?: boolean) {\n    return session ? globalObject.sessionStorage : globalObject.localStorage;\n  }\n}\n\nexport default new Webstorage();\n", "import { IPlatformConfig } from '../../common/types/IPlatformConfig';\nimport * as Utils from 'common/lib/util/utils';\nimport { DeviceFormFactor, DevicePlatform } from 'common/lib/types/devicedetails';\nimport webstorage from './lib/util/webstorage';\n\n// Workaround for salesforce lightning locker compat\nconst globalObject = Utils.getGlobalObject();\n\n// @ts-ignore\nconst isVercelEdgeRuntime = typeof EdgeRuntime === 'string';\n\n// We get false positive result here in the Vercel Edge runtime because it lacks the usual global browser objects, such as Window.\n// However, it is closer to the browser environment, so it intentionally uses browser bundles when importing packages.\n// Therefore, we do an additional check to avoid logging this incorrect warning for Vercel Edge runtime.\nif (typeof Window === 'undefined' && typeof WorkerGlobalScope === 'undefined' && !isVercelEdgeRuntime) {\n  console.log(\n    \"Warning: this distribution of Ably is intended for browsers. On nodejs, please use the 'ably' package on npm\",\n  );\n}\n\nfunction allowComet() {\n  /* xhr requests from local files are unreliable in some browsers, such as Chrome 65 and higher -- see eg\n   * https://stackoverflow.com/questions/49256429/chrome-65-unable-to-make-post-requests-from-local-files-to-flask\n   * So if websockets are supported, then just forget about comet transports and use that */\n  const loc = globalObject.location;\n  return !globalObject.WebSocket || !loc || !loc.origin || loc.origin.indexOf('http') > -1;\n}\n\n// from: https://stackoverflow.com/a/18002694\nexport function isWebWorkerContext(): boolean {\n  // run this in global scope of window or worker. since window.self = window, we're ok\n  if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconst userAgent = globalObject.navigator && globalObject.navigator.userAgent.toString();\nconst currentUrl = globalObject.location && globalObject.location.href;\n\nconst Config: IPlatformConfig = {\n  agent: 'browser',\n  logTimestamps: true,\n  userAgent: userAgent,\n  currentUrl: currentUrl,\n  binaryType: 'arraybuffer',\n  WebSocket: globalObject.WebSocket,\n  fetchSupported: !!globalObject.fetch,\n  xhrSupported: globalObject.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest(),\n  allowComet: allowComet(),\n  useProtocolHeartbeats: true,\n  supportsBinary: !!globalObject.TextDecoder,\n  /* Per Paddy (https://ably-real-time.slack.com/archives/CURL4U2FP/p1705674537763479) web intentionally prefers JSON to MessagePack:\n   *\n   * > browsers' support for binary types in general was historically poor, and JSON transport performance is significantly better in a browser than msgpack. In modern browsers then binary is supported consistently, but I'd still expect that JSON encode/decode performance is dramatically better than msgpack in a browser.\n   */\n  preferBinary: false,\n  ArrayBuffer: globalObject.ArrayBuffer,\n  atob: globalObject.atob,\n  nextTick:\n    typeof globalObject.setImmediate !== 'undefined'\n      ? globalObject.setImmediate.bind(globalObject)\n      : function (f: () => void) {\n          setTimeout(f, 0);\n        },\n  addEventListener: globalObject.addEventListener,\n  inspect: JSON.stringify,\n  stringByteSize: function (str: string) {\n    /* str.length will be an underestimate for non-ascii strings. But if we're\n     * in a browser too old to support TextDecoder, not much we can do. Better\n     * to underestimate, so if we do go over-size, the server will reject the\n     * message */\n    return (globalObject.TextDecoder && new globalObject.TextEncoder().encode(str).length) || str.length;\n  },\n  TextEncoder: globalObject.TextEncoder,\n  TextDecoder: globalObject.TextDecoder,\n  getRandomArrayBuffer: async function (byteLength: number): Promise<ArrayBuffer> {\n    const byteArray = new Uint8Array(byteLength);\n    globalObject.crypto.getRandomValues(byteArray);\n    return byteArray.buffer;\n  },\n  isWebworker: isWebWorkerContext(),\n  push: {\n    platform: DevicePlatform.Browser,\n    formFactor: DeviceFormFactor.Desktop,\n    storage: webstorage,\n  },\n};\n\nexport default Config;\n", "import * as Utils from '../util/utils';\nimport { actions } from '../types/protocolmessagecommon';\nimport ProtocolMessage, {\n  fromValues as protocolMessageFromValues,\n  fromDeserialized as protocolMessageFromDeserialized,\n} from '../types/protocolmessage';\nimport Transport from './transport';\nimport Logger from '../util/logger';\nimport Defaults from '../util/defaults';\nimport ConnectionErrors from './connectionerrors';\nimport Auth from '../client/auth';\nimport ErrorInfo from '../types/errorinfo';\nimport IXHRRequest from '../../types/IXHRRequest';\nimport * as API from '../../../../ably';\nimport ConnectionManager, { TransportParams } from './connectionmanager';\nimport XHRStates from '../../constants/XHRStates';\nimport Platform from 'common/platform';\n\n/* TODO: can remove once realtime sends protocol message responses for comet errors */\nfunction shouldBeErrorAction(err: ErrorInfo) {\n  const UNRESOLVABLE_ERROR_CODES = [80015, 80017, 80030];\n  if (err.code) {\n    if (Auth.isTokenErr(err)) return false;\n    if (UNRESOLVABLE_ERROR_CODES.includes(err.code)) return true;\n    return err.code >= 40000 && err.code < 50000;\n  } else {\n    /* Likely a network or transport error of some kind. Certainly not fatal to the connection */\n    return false;\n  }\n}\n\nfunction protocolMessageFromRawError(err: ErrorInfo) {\n  /* err will be either a legacy (non-protocolmessage) comet error response\n   * (which will have an err.code), or a xhr/network error (which won't). */\n  if (shouldBeErrorAction(err)) {\n    return [protocolMessageFromValues({ action: actions.ERROR, error: err })];\n  } else {\n    return [protocolMessageFromValues({ action: actions.DISCONNECTED, error: err })];\n  }\n}\n\n/*\n * A base comet transport class\n */\nabstract class CometTransport extends Transport {\n  stream: string | boolean;\n  sendRequest: IXHRRequest | null;\n  recvRequest: null | IXHRRequest;\n  pendingCallback: null;\n  pendingItems: null | Array<ProtocolMessage>;\n  baseUri?: string;\n  authParams?: Record<string, any>;\n  closeUri?: string;\n  disconnectUri?: string;\n  sendUri?: string;\n  recvUri?: string;\n\n  constructor(connectionManager: ConnectionManager, auth: Auth, params: TransportParams) {\n    super(connectionManager, auth, params, /* binary not supported for comet so force JSON protocol */ true);\n    this.stream = 'stream' in params ? params.stream : true;\n    this.sendRequest = null;\n    this.recvRequest = null;\n    this.pendingCallback = null;\n    this.pendingItems = null;\n  }\n\n  abstract createRequest(\n    uri: string,\n    headers: Record<string, string> | null,\n    params?: Record<string, unknown> | null,\n    body?: unknown,\n    requestMode?: number,\n  ): IXHRRequest;\n\n  connect(): void {\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'CometTransport.connect()', 'starting');\n    Transport.prototype.connect.call(this);\n    const params = this.params;\n    const options = params.options;\n    const host = params.host || options.primaryDomain;\n    const port = Defaults.getPort(options);\n    const cometScheme = options.tls ? 'https://' : 'http://';\n\n    this.baseUri = cometScheme + host + ':' + port + '/comet/';\n    const connectUri = this.baseUri + 'connect';\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'CometTransport.connect()', 'uri: ' + connectUri);\n    Utils.whenPromiseSettles(this.auth.getAuthParams(), (err: Error | null, authParams?: Record<string, any>) => {\n      if (err) {\n        this.disconnect(err);\n        return;\n      }\n      if (this.isDisposed) {\n        return;\n      }\n      this.authParams = authParams;\n      const connectParams = this.params.getConnectParams(authParams!);\n      if ('stream' in connectParams) this.stream = connectParams.stream;\n      Logger.logAction(\n        this.logger,\n        Logger.LOG_MINOR,\n        'CometTransport.connect()',\n        'connectParams:' + Utils.toQueryString(connectParams),\n      );\n\n      /* this will be the 'recvRequest' so this connection can stream messages */\n      let preconnected = false;\n      const connectRequest = (this.recvRequest = this.createRequest(\n        connectUri,\n        null,\n        connectParams,\n        null,\n        this.stream ? XHRStates.REQ_RECV_STREAM : XHRStates.REQ_RECV,\n      ));\n\n      connectRequest.on('data', (data: any) => {\n        if (!this.recvRequest) {\n          /* the transport was disposed before we connected */\n          return;\n        }\n        if (!preconnected) {\n          preconnected = true;\n          this.emit('preconnect');\n        }\n        this.onData(data);\n      });\n      connectRequest.on('complete', (err: ErrorInfo) => {\n        if (!this.recvRequest) {\n          /* the transport was disposed before we connected */\n          err = err || new ErrorInfo('Request cancelled', 80003, 400);\n        }\n        this.recvRequest = null;\n        /* Connect request may complete without a emitting 'data' event since that is not\n         * emitted for e.g. a non-streamed error response. Still implies preconnect. */\n        if (!preconnected && !err) {\n          preconnected = true;\n          this.emit('preconnect');\n        }\n        this.onActivity();\n        if (err) {\n          if (err.code) {\n            /* A protocol error received from realtime. TODO: once realtime\n             * consistendly sends errors wrapped in protocol messages, should be\n             * able to remove this */\n            this.onData(protocolMessageFromRawError(err));\n          } else {\n            /* A network/xhr error. Don't bother wrapping in a protocol message,\n             * just disconnect the transport */\n            this.disconnect(err);\n          }\n          return;\n        }\n        Platform.Config.nextTick(() => {\n          this.recv();\n        });\n      });\n      connectRequest.exec();\n    });\n  }\n\n  requestClose(): void {\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'CometTransport.requestClose()');\n    this._requestCloseOrDisconnect(true);\n  }\n\n  requestDisconnect(): void {\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'CometTransport.requestDisconnect()');\n    this._requestCloseOrDisconnect(false);\n  }\n\n  _requestCloseOrDisconnect(closing: boolean): void {\n    const closeOrDisconnectUri = closing ? this.closeUri : this.disconnectUri;\n    if (closeOrDisconnectUri) {\n      const request = this.createRequest(closeOrDisconnectUri, null, this.authParams, null, XHRStates.REQ_SEND);\n\n      request.on('complete', (err: ErrorInfo) => {\n        if (err) {\n          Logger.logAction(\n            this.logger,\n            Logger.LOG_ERROR,\n            'CometTransport.request' + (closing ? 'Close()' : 'Disconnect()'),\n            'request returned err = ' + Utils.inspectError(err),\n          );\n          this.finish('disconnected', err);\n        }\n      });\n      request.exec();\n    }\n  }\n\n  dispose(): void {\n    Logger.logAction(this.logger, Logger.LOG_MINOR, 'CometTransport.dispose()', '');\n    if (!this.isDisposed) {\n      this.isDisposed = true;\n      if (this.recvRequest) {\n        Logger.logAction(this.logger, Logger.LOG_MINOR, 'CometTransport.dispose()', 'aborting recv request');\n        this.recvRequest.abort();\n        this.recvRequest = null;\n      }\n      /* In almost all cases the transport will be finished before it's\n       * disposed. Finish here just to make sure. */\n      this.finish('disconnected', ConnectionErrors.disconnected());\n      Platform.Config.nextTick(() => {\n        this.emit('disposed');\n      });\n    }\n  }\n\n  onConnect(message: ProtocolMessage): void {\n    /* if this transport has been disposed whilst awaiting connection, do nothing */\n    if (this.isDisposed) {\n      return;\n    }\n\n    /* the connectionKey in a comet connected response is really\n     * <instId>-<connectionKey> */\n    const connectionStr = message.connectionDetails?.connectionKey;\n    Transport.prototype.onConnect.call(this, message);\n\n    const baseConnectionUri = (this.baseUri as string) + connectionStr;\n    Logger.logAction(this.logger, Logger.LOG_MICRO, 'CometTransport.onConnect()', 'baseUri = ' + baseConnectionUri);\n    this.sendUri = baseConnectionUri + '/send';\n    this.recvUri = baseConnectionUri + '/recv';\n    this.closeUri = baseConnectionUri + '/close';\n    this.disconnectUri = baseConnectionUri + '/disconnect';\n  }\n\n  send(message: ProtocolMessage): void {\n    if (this.sendRequest) {\n      /* there is a pending send, so queue this message */\n      this.pendingItems = this.pendingItems || [];\n      this.pendingItems.push(message);\n      return;\n    }\n    /* send this, plus any pending, now */\n    const pendingItems = this.pendingItems || [];\n    pendingItems.push(message);\n    this.pendingItems = null;\n\n    this.sendItems(pendingItems);\n  }\n\n  sendAnyPending(): void {\n    const pendingItems = this.pendingItems;\n\n    if (!pendingItems) {\n      return;\n    }\n\n    this.pendingItems = null;\n    this.sendItems(pendingItems);\n  }\n\n  sendItems(items: Array<ProtocolMessage>): void {\n    const sendRequest = (this.sendRequest = this.createRequest(\n      this.sendUri as string,\n      null,\n      this.authParams,\n      this.encodeRequest(items),\n      XHRStates.REQ_SEND,\n    ));\n\n    sendRequest.on('complete', (err: ErrorInfo, data: string) => {\n      if (err)\n        Logger.logAction(\n          this.logger,\n          Logger.LOG_ERROR,\n          'CometTransport.sendItems()',\n          'on complete: err = ' + Utils.inspectError(err),\n        );\n      this.sendRequest = null;\n\n      /* the result of the request, even if a nack, is usually a protocol response\n       * contained in the data. An err is anomolous, and indicates some issue with the\n       * network,transport, or connection */\n      if (err) {\n        if (err.code) {\n          /* A protocol error received from realtime. TODO: once realtime\n           * consistendly sends errors wrapped in protocol messages, should be\n           * able to remove this */\n          this.onData(protocolMessageFromRawError(err));\n        } else {\n          /* A network/xhr error. Don't bother wrapping in a protocol message,\n           * just disconnect the transport */\n          this.disconnect(err);\n        }\n        return;\n      }\n\n      if (data) {\n        this.onData(data);\n      }\n\n      if (this.pendingItems) {\n        Platform.Config.nextTick(() => {\n          /* If there's a new send request by now, any pending items will have\n           * been picked up by that; any new ones added since then will be\n           * picked up after that one completes */\n          if (!this.sendRequest) {\n            this.sendAnyPending();\n          }\n        });\n      }\n    });\n    sendRequest.exec();\n  }\n\n  recv(): void {\n    /* do nothing if there is an active request, which might be streaming */\n    if (this.recvRequest) return;\n\n    /* If we're no longer connected, do nothing */\n    if (!this.isConnected) return;\n\n    const recvRequest = (this.recvRequest = this.createRequest(\n      this.recvUri as string,\n      null,\n      this.authParams,\n      null,\n      this.stream ? XHRStates.REQ_RECV_STREAM : XHRStates.REQ_RECV_POLL,\n    ));\n\n    recvRequest.on('data', (data: string) => {\n      this.onData(data);\n    });\n    recvRequest.on('complete', (err: ErrorInfo) => {\n      this.recvRequest = null;\n      /* A request completing must be considered activity, as realtime sends\n       * heartbeats every 15s since a request began, not every 15s absolutely */\n      this.onActivity();\n      if (err) {\n        if (err.code) {\n          /* A protocol error received from realtime. TODO: once realtime\n           * consistently sends errors wrapped in protocol messages, should be\n           * able to remove this */\n          this.onData(protocolMessageFromRawError(err));\n        } else {\n          /* A network/xhr error. Don't bother wrapping in a protocol message,\n           * just disconnect the transport */\n          this.disconnect(err);\n        }\n        return;\n      }\n      Platform.Config.nextTick(() => {\n        this.recv();\n      });\n    });\n    recvRequest.exec();\n  }\n\n  onData(responseData: string | Record<string, any>): void {\n    try {\n      const items = this.decodeResponse(responseData);\n      if (items && items.length)\n        for (let i = 0; i < items.length; i++)\n          this.onProtocolMessage(\n            protocolMessageFromDeserialized(\n              items[i],\n              this.connectionManager.realtime._RealtimePresence,\n              this.connectionManager.realtime._Annotations,\n              this.connectionManager.realtime._objectsPlugin,\n            ),\n          );\n    } catch (e) {\n      Logger.logAction(\n        this.logger,\n        Logger.LOG_ERROR,\n        'CometTransport.onData()',\n        'Unexpected exception handing channel event: ' + (e as Error).stack,\n      );\n    }\n  }\n\n  encodeRequest(requestItems: Array<ProtocolMessage>): string {\n    return JSON.stringify(requestItems);\n  }\n\n  decodeResponse(responseData: string | Record<string, any>): Record<string, any> {\n    if (typeof responseData == 'string') return JSON.parse(responseData);\n    return responseData;\n  }\n\n  /* Historical comment, back from when we supported JSONP:\n   *\n   * > For comet, we could do the auth update by aborting the current recv and\n   * > starting a new one with the new token, that'd be sufficient for realtime.\n   * > Problem is JSONP - you can't cancel truly abort a recv once started. So\n   * > we need to send an AUTH for jsonp. In which case it's simpler to keep all\n   * > comet transports the same and do it for all of them. So we send the AUTH\n   * > instead, and don't need to abort the recv\n   *\n   * Now that we\u2019ve dropped JSONP support, we may be able to revisit the above;\n   * see https://github.com/ably/ably-js/issues/1214.\n   */\n  onAuthUpdated = (tokenDetails: API.TokenDetails): void => {\n    this.authParams = { access_token: tokenDetails.token };\n  };\n}\n\nexport default CometTransport;\n", "import * as Utils from 'common/lib/util/utils';\r\nimport EventEmitter from 'common/lib/util/eventemitter';\r\nimport ErrorInfo, { IPartialErrorInfo, PartialErrorInfo } from 'common/lib/types/errorinfo';\r\nimport Logger from 'common/lib/util/logger';\r\nimport Defaults from 'common/lib/util/defaults';\r\nimport HttpMethods from 'common/constants/HttpMethods';\r\nimport IXHRRequest from 'common/types/IXHRRequest';\r\nimport { RequestBody, RequestParams } from 'common/types/http';\r\nimport XHRStates from 'common/constants/XHRStates';\r\nimport Platform from 'common/platform';\r\n\r\nfunction isAblyError(responseBody: unknown, headers: Record<string, string>): responseBody is { error?: ErrorInfo } {\r\n  return Utils.allToLowerCase(Utils.keysArray(headers)).includes('x-ably-errorcode');\r\n}\r\n\r\nfunction getAblyError(responseBody: unknown, headers: Record<string, string>) {\r\n  if (isAblyError(responseBody, headers)) {\r\n    return responseBody.error && ErrorInfo.fromValues(responseBody.error);\r\n  }\r\n}\r\n\r\nconst noop = function () {};\r\nlet idCounter = 0;\r\nconst pendingRequests: Record<string, XHRRequest> = {};\r\n\r\nfunction getHeader(xhr: XMLHttpRequest, header: string) {\r\n  return xhr.getResponseHeader && xhr.getResponseHeader(header);\r\n}\r\n\r\n/* Safari mysteriously returns 'Identity' for transfer-encoding when in fact\r\n * it is 'chunked'. So instead, decide that it is chunked when\r\n * transfer-encoding is present or content-length is absent.  ('or' because\r\n * when using http2 streaming, there's no transfer-encoding header, but can\r\n * still deduce streaming from lack of content-length) */\r\nfunction isEncodingChunked(xhr: XMLHttpRequest) {\r\n  return (\r\n    xhr.getResponseHeader && (xhr.getResponseHeader('transfer-encoding') || !xhr.getResponseHeader('content-length'))\r\n  );\r\n}\r\n\r\nfunction getHeadersAsObject(xhr: XMLHttpRequest) {\r\n  const headerPairs = xhr.getAllResponseHeaders().trim().split('\\r\\n');\r\n  const headers: Record<string, string> = {};\r\n  for (let i = 0; i < headerPairs.length; i++) {\r\n    const parts = headerPairs[i].split(':').map((x) => x.trim());\r\n    headers[parts[0].toLowerCase()] = parts[1];\r\n  }\r\n  return headers;\r\n}\r\n\r\nclass XHRRequest extends EventEmitter implements IXHRRequest {\r\n  uri: string;\r\n  headers: Record<string, string>;\r\n  body: RequestBody | null;\r\n  method: string;\r\n  requestMode: number;\r\n  timeouts: Record<string, number>;\r\n  timedOut: boolean;\r\n  requestComplete: boolean;\r\n  id: string;\r\n  streamComplete?: boolean;\r\n  xhr?: XMLHttpRequest | null;\r\n  timer?: NodeJS.Timeout | number | null;\r\n\r\n  constructor(\r\n    uri: string,\r\n    headers: Record<string, string> | null,\r\n    params: Record<string, string>,\r\n    body: RequestBody | null,\r\n    requestMode: number,\r\n    timeouts: Record<string, number>,\r\n    logger: Logger,\r\n    method?: HttpMethods,\r\n  ) {\r\n    super(logger);\r\n    params = params || {};\r\n    params.rnd = Utils.cheapRandStr();\r\n    this.uri = uri + Utils.toQueryString(params);\r\n    this.headers = headers || {};\r\n    this.body = body;\r\n    this.method = method ? method.toUpperCase() : Utils.isNil(body) ? 'GET' : 'POST';\r\n    this.requestMode = requestMode;\r\n    this.timeouts = timeouts;\r\n    this.timedOut = false;\r\n    this.requestComplete = false;\r\n    this.id = String(++idCounter);\r\n    pendingRequests[this.id] = this;\r\n  }\r\n\r\n  static createRequest(\r\n    uri: string,\r\n    headers: Record<string, string> | null,\r\n    params: RequestParams,\r\n    body: RequestBody | null,\r\n    requestMode: number,\r\n    timeouts: Record<string, number> | null,\r\n    logger: Logger,\r\n    method?: HttpMethods,\r\n  ): XHRRequest {\r\n    /* XHR requests are used either with the context being a realtime\r\n     * transport, or with timeouts passed in (for when used by a rest client),\r\n     * or completely standalone.  Use the appropriate timeouts in each case */\r\n    const _timeouts = timeouts || Defaults.TIMEOUTS;\r\n    return new XHRRequest(\r\n      uri,\r\n      headers,\r\n      Utils.copy(params) as Record<string, string>,\r\n      body,\r\n      requestMode,\r\n      _timeouts,\r\n      logger,\r\n      method,\r\n    );\r\n  }\r\n\r\n  complete(\r\n    err?: IPartialErrorInfo | null,\r\n    body?: unknown,\r\n    headers?: Record<string, string> | null,\r\n    unpacked?: boolean | null,\r\n    statusCode?: number,\r\n  ): void {\r\n    if (!this.requestComplete) {\r\n      this.requestComplete = true;\r\n      if (!err && body) {\r\n        this.emit('data', body);\r\n      }\r\n      this.emit('complete', err, body, headers, unpacked, statusCode);\r\n      this.dispose();\r\n    }\r\n  }\r\n\r\n  abort(): void {\r\n    this.dispose();\r\n  }\r\n\r\n  exec(): void {\r\n    let headers = this.headers;\r\n    const timeout =\r\n        this.requestMode == XHRStates.REQ_SEND ? this.timeouts.httpRequestTimeout : this.timeouts.recvTimeout,\r\n      timer = (this.timer = setTimeout(() => {\r\n        this.timedOut = true;\r\n        xhr.abort();\r\n      }, timeout)),\r\n      method = this.method,\r\n      xhr = (this.xhr = new XMLHttpRequest()),\r\n      accept = headers['accept'];\r\n    let body = this.body;\r\n    let responseType: XMLHttpRequestResponseType = 'text';\r\n\r\n    if (!accept) {\r\n      // Default to JSON\r\n      headers['accept'] = 'application/json';\r\n    } else if (accept.indexOf('application/x-msgpack') === 0) {\r\n      // Msgpack responses will be typed as ArrayBuffer\r\n      responseType = 'arraybuffer';\r\n    }\r\n\r\n    if (body) {\r\n      const contentType = headers['content-type'] || (headers['content-type'] = 'application/json');\r\n      if (contentType.indexOf('application/json') > -1 && typeof body != 'string') body = JSON.stringify(body);\r\n    }\r\n\r\n    // Can probably remove this directive if https://github.com/nodesecurity/eslint-plugin-security/issues/26 is resolved\r\n    // eslint-disable-next-line security/detect-non-literal-fs-filename\r\n    xhr.open(method, this.uri, true);\r\n    xhr.responseType = responseType;\r\n\r\n    if ('authorization' in headers) {\r\n      xhr.withCredentials = true;\r\n    }\r\n\r\n    for (const h in headers) xhr.setRequestHeader(h, headers[h]);\r\n\r\n    const errorHandler = (\r\n      errorEvent: ProgressEvent<EventTarget>,\r\n      message: string,\r\n      code: number | null,\r\n      statusCode: number,\r\n    ) => {\r\n      let errorMessage = message + ' (event type: ' + errorEvent.type + ')';\r\n      if (this?.xhr?.statusText) errorMessage += ', current statusText is ' + this.xhr.statusText;\r\n      Logger.logAction(this.logger, Logger.LOG_ERROR, 'Request.on' + errorEvent.type + '()', errorMessage);\r\n      this.complete(new PartialErrorInfo(errorMessage, code, statusCode));\r\n    };\r\n    xhr.onerror = (errorEvent) => {\r\n      errorHandler(errorEvent, 'XHR error occurred', null, 400);\r\n    };\r\n    xhr.onabort = (errorEvent) => {\r\n      if (this.timedOut) {\r\n        errorHandler(errorEvent, 'Request aborted due to request timeout expiring', null, 408);\r\n      } else {\r\n        errorHandler(errorEvent, 'Request cancelled', null, 400);\r\n      }\r\n    };\r\n    xhr.ontimeout = (errorEvent) => {\r\n      errorHandler(errorEvent, 'Request timed out', null, 408);\r\n    };\r\n\r\n    let streaming: boolean | string;\r\n    let statusCode: number;\r\n    let successResponse: boolean;\r\n    let streamPos = 0;\r\n    let unpacked = false;\r\n\r\n    const onResponse = () => {\r\n      clearTimeout(timer);\r\n      successResponse = statusCode < 400;\r\n      if (statusCode == 204) {\r\n        this.complete(null, null, null, null, statusCode);\r\n        return;\r\n      }\r\n      streaming = this.requestMode == XHRStates.REQ_RECV_STREAM && successResponse && isEncodingChunked(xhr);\r\n    };\r\n\r\n    const onEnd = () => {\r\n      let parsedResponse: any;\r\n      try {\r\n        const contentType = getHeader(xhr, 'content-type');\r\n        /* Be liberal in what we accept; buggy auth servers may respond\r\n         * without the correct contenttype, but assume they're still\r\n         * responding with json */\r\n        const json = contentType ? contentType.indexOf('application/json') >= 0 : xhr.responseType == 'text';\r\n\r\n        if (json) {\r\n          /* If we requested msgpack but server responded with json, then since\r\n           * we set the responseType expecting msgpack, the response will be\r\n           * an ArrayBuffer containing json */\r\n          const jsonResponseBody =\r\n            xhr.responseType === 'arraybuffer'\r\n              ? Platform.BufferUtils.utf8Decode(xhr.response)\r\n              : String(xhr.responseText);\r\n          if (jsonResponseBody.length) {\r\n            parsedResponse = JSON.parse(jsonResponseBody);\r\n          } else {\r\n            parsedResponse = jsonResponseBody;\r\n          }\r\n          unpacked = true;\r\n        } else {\r\n          parsedResponse = xhr.response;\r\n        }\r\n\r\n        if (parsedResponse.response !== undefined) {\r\n          /* unwrap JSON envelope */\r\n          statusCode = parsedResponse.statusCode;\r\n          successResponse = statusCode < 400;\r\n          headers = parsedResponse.headers;\r\n          parsedResponse = parsedResponse.response;\r\n        } else {\r\n          headers = getHeadersAsObject(xhr);\r\n        }\r\n      } catch (e) {\r\n        this.complete(new PartialErrorInfo('Malformed response body from server: ' + (e as Error).message, null, 400));\r\n        return;\r\n      }\r\n\r\n      /* If response is an array, it's an array of protocol messages -- even if\r\n       * is contains an error action (hence the nonsuccess statuscode), we can\r\n       * consider the request to have succeeded, just pass it on to\r\n       * onProtocolMessage to decide what to do */\r\n      if (successResponse || Array.isArray(parsedResponse)) {\r\n        this.complete(null, parsedResponse, headers, unpacked, statusCode);\r\n        return;\r\n      }\r\n\r\n      let err: IPartialErrorInfo | undefined = getAblyError(parsedResponse, headers);\r\n      if (!err) {\r\n        err = new PartialErrorInfo(\r\n          'Error response received from server: ' +\r\n            statusCode +\r\n            ' body was: ' +\r\n            Platform.Config.inspect(parsedResponse),\r\n          null,\r\n          statusCode,\r\n        );\r\n      }\r\n      this.complete(err, parsedResponse, headers, unpacked, statusCode);\r\n    };\r\n\r\n    function onProgress() {\r\n      const responseText = xhr.responseText;\r\n      const bodyEnd = responseText.length - 1;\r\n      let idx, chunk;\r\n      while (streamPos < bodyEnd && (idx = responseText.indexOf('\\n', streamPos)) > -1) {\r\n        chunk = responseText.slice(streamPos, idx);\r\n        streamPos = idx + 1;\r\n        onChunk(chunk);\r\n      }\r\n    }\r\n\r\n    const onChunk = (chunk: string) => {\r\n      try {\r\n        chunk = JSON.parse(chunk);\r\n      } catch (e) {\r\n        this.complete(new PartialErrorInfo('Malformed response body from server: ' + (e as Error).message, null, 400));\r\n        return;\r\n      }\r\n      this.emit('data', chunk);\r\n    };\r\n\r\n    const onStreamEnd = () => {\r\n      onProgress();\r\n      this.streamComplete = true;\r\n      Platform.Config.nextTick(() => {\r\n        this.complete();\r\n      });\r\n    };\r\n\r\n    xhr.onreadystatechange = () => {\r\n      const readyState = xhr.readyState;\r\n      if (readyState < 3) return;\r\n      if (xhr.status !== 0) {\r\n        if (statusCode === undefined) {\r\n          statusCode = xhr.status;\r\n          onResponse();\r\n        }\r\n        if (readyState == 3 && streaming) {\r\n          onProgress();\r\n        } else if (readyState == 4) {\r\n          if (streaming) onStreamEnd();\r\n          else onEnd();\r\n        }\r\n      }\r\n    };\r\n    xhr.send(body as any);\r\n  }\r\n\r\n  dispose(): void {\r\n    const xhr = this.xhr;\r\n    if (xhr) {\r\n      xhr.onreadystatechange = xhr.onerror = xhr.onabort = xhr.ontimeout = noop;\r\n      this.xhr = null;\r\n      const timer = this.timer;\r\n      if (timer) {\r\n        clearTimeout(timer as NodeJS.Timeout);\r\n        this.timer = null;\r\n      }\r\n      if (!this.requestComplete) xhr.abort();\r\n    }\r\n    delete pendingRequests[this.id];\r\n  }\r\n}\r\n\r\nexport default XHRRequest;\r\n", "import Platform from '../../../../common/platform';\nimport CometTransport from '../../../../common/lib/transport/comettransport';\nimport XHRRequest from '../http/request/xhrrequest';\nimport ConnectionManager, { TransportParams } from 'common/lib/transport/connectionmanager';\nimport Auth from 'common/lib/client/auth';\nimport { RequestBody, RequestParams } from 'common/types/http';\nimport { TransportNames } from 'common/constants/TransportName';\n\nvar shortName = TransportNames.XhrPolling;\nclass XHRPollingTransport extends CometTransport {\n  shortName = shortName;\n  constructor(connectionManager: ConnectionManager, auth: Auth, params: TransportParams) {\n    super(connectionManager, auth, params);\n    params.stream = false;\n    this.shortName = shortName;\n  }\n\n  static isAvailable() {\n    return !!(Platform.Config.xhrSupported && Platform.Config.allowComet);\n  }\n\n  toString() {\n    return 'XHRPollingTransport; uri=' + this.baseUri + '; isConnected=' + this.isConnected;\n  }\n\n  createRequest(\n    uri: string,\n    headers: Record<string, string>,\n    params: RequestParams,\n    body: RequestBody | null,\n    requestMode: number,\n  ) {\n    return XHRRequest.createRequest(uri, headers, params, body, requestMode, this.timeouts, this.logger);\n  }\n}\n\nexport default XHRPollingTransport;\n", "import TransportName from 'common/constants/TransportName';\nimport Platform from 'common/platform';\nimport XhrPollingTransport from './xhrpollingtransport';\nimport WebSocketTransport from '../../../../common/lib/transport/websockettransport';\n\n// For reasons that I don\u2019t understand, if we use [TransportNames.XhrPolling] for the keys in defaultTransports\u2019s, then defaultTransports does not get tree-shaken. Hence using literals instead. They\u2019re still correctly type-checked.\n\nconst order: TransportName[] = ['xhr_polling'];\n\nconst defaultTransports: (typeof Platform)['Transports'] = {\n  order,\n  bundledImplementations: {\n    web_socket: WebSocketTransport,\n    xhr_polling: XhrPollingTransport,\n  },\n};\n\nexport default defaultTransports;\n\nexport const ModularTransports: (typeof Platform)['Transports'] = {\n  order,\n  bundledImplementations: {},\n};\n", "import IDefaults from 'common/types/IDefaults';\nimport { TransportNames } from 'common/constants/TransportName';\n\nconst Defaults: IDefaults = {\n  connectivityCheckUrl: 'https://internet-up.ably-realtime.com/is-the-internet-up.txt',\n  wsConnectivityCheckUrl: 'wss://ws-up.ably-realtime.com',\n  /* Order matters here: the base transport is the leftmost one in the\n   * intersection of baseTransportOrder and the transports clientOption that's\n   * supported. */\n  defaultTransports: [TransportNames.XhrPolling, TransportNames.WebSocket],\n};\n\nexport default Defaults;\n", "function inspect(buffer: undefined | ArrayBuffer | DataView) {\n  if (buffer === undefined) return 'undefined';\n  let view;\n  let type;\n  if (buffer instanceof ArrayBuffer) {\n    type = 'ArrayBuffer';\n    view = new DataView(buffer);\n  } else if (buffer instanceof DataView) {\n    type = 'DataView';\n    view = buffer;\n  }\n  if (!view) return JSON.stringify(buffer);\n  const bytes = [];\n  for (let i = 0; i < buffer.byteLength; i++) {\n    if (i > 20) {\n      bytes.push('...');\n      break;\n    }\n    let byte_ = view.getUint8(i).toString(16);\n    if (byte_.length === 1) byte_ = '0' + byte_;\n    bytes.push(byte_);\n  }\n  return '<' + type + ' ' + bytes.join(' ') + '>';\n}\n\n// Encode string as utf8 into dataview at offset\nfunction utf8Write(view: DataView, offset: number, string: string) {\n  for (let i = 0, l = string.length; i < l; i++) {\n    const codePoint = string.charCodeAt(i);\n\n    // One byte of UTF-8\n    if (codePoint < 0x80) {\n      view.setUint8(offset++, ((codePoint >>> 0) & 0x7f) | 0x00);\n      continue;\n    }\n\n    // Two bytes of UTF-8\n    if (codePoint < 0x800) {\n      view.setUint8(offset++, ((codePoint >>> 6) & 0x1f) | 0xc0);\n      view.setUint8(offset++, ((codePoint >>> 0) & 0x3f) | 0x80);\n      continue;\n    }\n\n    // Three bytes of UTF-8.\n    if (codePoint < 0x10000) {\n      view.setUint8(offset++, ((codePoint >>> 12) & 0x0f) | 0xe0);\n      view.setUint8(offset++, ((codePoint >>> 6) & 0x3f) | 0x80);\n      view.setUint8(offset++, ((codePoint >>> 0) & 0x3f) | 0x80);\n      continue;\n    }\n\n    // Four bytes of UTF-8\n    if (codePoint < 0x110000) {\n      view.setUint8(offset++, ((codePoint >>> 18) & 0x07) | 0xf0);\n      view.setUint8(offset++, ((codePoint >>> 12) & 0x3f) | 0x80);\n      view.setUint8(offset++, ((codePoint >>> 6) & 0x3f) | 0x80);\n      view.setUint8(offset++, ((codePoint >>> 0) & 0x3f) | 0x80);\n      continue;\n    }\n    throw new Error('bad codepoint ' + codePoint);\n  }\n}\n\nfunction utf8Read(view: DataView, offset: number, length: number) {\n  let string = '';\n  for (let i = offset, end = offset + length; i < end; i++) {\n    const byte_ = view.getUint8(i);\n    // One byte character\n    if ((byte_ & 0x80) === 0x00) {\n      string += String.fromCharCode(byte_);\n      continue;\n    }\n    // Two byte character\n    if ((byte_ & 0xe0) === 0xc0) {\n      string += String.fromCharCode(((byte_ & 0x0f) << 6) | (view.getUint8(++i) & 0x3f));\n      continue;\n    }\n    // Three byte character\n    if ((byte_ & 0xf0) === 0xe0) {\n      string += String.fromCharCode(\n        ((byte_ & 0x0f) << 12) | ((view.getUint8(++i) & 0x3f) << 6) | ((view.getUint8(++i) & 0x3f) << 0),\n      );\n      continue;\n    }\n    // Four byte character\n    if ((byte_ & 0xf8) === 0xf0) {\n      string += String.fromCharCode(\n        ((byte_ & 0x07) << 18) |\n          ((view.getUint8(++i) & 0x3f) << 12) |\n          ((view.getUint8(++i) & 0x3f) << 6) |\n          ((view.getUint8(++i) & 0x3f) << 0),\n      );\n      continue;\n    }\n    throw new Error('Invalid byte ' + byte_.toString(16));\n  }\n  return string;\n}\n\nfunction utf8ByteCount(string: string) {\n  let count = 0;\n  for (let i = 0, l = string.length; i < l; i++) {\n    const codePoint = string.charCodeAt(i);\n    if (codePoint < 0x80) {\n      count += 1;\n      continue;\n    }\n    if (codePoint < 0x800) {\n      count += 2;\n      continue;\n    }\n    if (codePoint < 0x10000) {\n      count += 3;\n      continue;\n    }\n    if (codePoint < 0x110000) {\n      count += 4;\n      continue;\n    }\n    throw new Error('bad codepoint ' + codePoint);\n  }\n  return count;\n}\n\nfunction encode(value: unknown, sparse?: boolean) {\n  const size = sizeof(value, sparse);\n  if (size === 0) return undefined;\n  const buffer = new ArrayBuffer(size);\n  const view = new DataView(buffer);\n  _encode(value, view, 0, sparse);\n  return buffer;\n}\n\nconst SH_L_32 = (1 << 16) * (1 << 16),\n  SH_R_32 = 1 / SH_L_32;\nfunction getInt64(view: DataView, offset: number) {\n  offset = offset || 0;\n  return view.getInt32(offset) * SH_L_32 + view.getUint32(offset + 4);\n}\n\nfunction getUint64(view: DataView, offset: number) {\n  offset = offset || 0;\n  return view.getUint32(offset) * SH_L_32 + view.getUint32(offset + 4);\n}\n\nfunction setInt64(view: DataView, offset: number, val: number) {\n  if (val < 0x8000000000000000) {\n    view.setInt32(offset, Math.floor(val * SH_R_32));\n    view.setInt32(offset + 4, val & -1);\n  } else {\n    view.setUint32(offset, 0x7fffffff);\n    view.setUint32(offset + 4, 0x7fffffff);\n  }\n}\n\nfunction setUint64(view: DataView, offset: number, val: number) {\n  if (val < 0x10000000000000000) {\n    view.setUint32(offset, Math.floor(val * SH_R_32));\n    view.setInt32(offset + 4, val & -1);\n  } else {\n    view.setUint32(offset, 0xffffffff);\n    view.setUint32(offset + 4, 0xffffffff);\n  }\n}\n\n// https://gist.github.com/frsyuki/5432559 - v5 spec\n//\n// I've used one extension point from `fixext 1` to store `undefined`. On the wire this\n// should translate to exactly 0xd40000\n//\n// +--------+--------+--------+\n// |  0xd4  |  0x00  |  0x00  |\n// +--------+--------+--------+\n//    ^ fixext |        ^ value part unused (fixed to be 0)\n//             ^ indicates undefined value\n//\n\nclass Decoder {\n  offset: number;\n  view: DataView;\n\n  constructor(view: DataView, offset?: number) {\n    this.offset = offset || 0;\n    this.view = view;\n  }\n\n  map = (length: number) => {\n    const value: { [key: string]: ArrayBuffer } = {};\n    for (let i = 0; i < length; i++) {\n      const key = this.parse();\n      value[key as string] = this.parse() as ArrayBuffer;\n    }\n    return value;\n  };\n\n  bin = (length: number) => {\n    const value = new ArrayBuffer(length);\n    new Uint8Array(value).set(new Uint8Array(this.view.buffer, this.offset, length), 0);\n    this.offset += length;\n    return value;\n  };\n\n  buf = this.bin;\n\n  str = (length: number) => {\n    const value = utf8Read(this.view, this.offset, length);\n    this.offset += length;\n    return value;\n  };\n\n  array = (length: number) => {\n    const value = new Array(length);\n    for (let i = 0; i < length; i++) {\n      value[i] = this.parse();\n    }\n    return value;\n  };\n\n  ext = (length: number) => {\n    this.offset += length;\n    return {\n      type: this.view.getInt8(this.offset),\n      data: this.buf(length),\n    };\n  };\n\n  parse = (): unknown => {\n    const type = this.view.getUint8(this.offset);\n    let value, length;\n\n    // Positive FixInt - 0xxxxxxx\n    if ((type & 0x80) === 0x00) {\n      this.offset++;\n      return type;\n    }\n\n    // FixMap - 1000xxxx\n    if ((type & 0xf0) === 0x80) {\n      length = type & 0x0f;\n      this.offset++;\n      return this.map(length);\n    }\n\n    // FixArray - 1001xxxx\n    if ((type & 0xf0) === 0x90) {\n      length = type & 0x0f;\n      this.offset++;\n      return this.array(length);\n    }\n\n    // FixStr - 101xxxxx\n    if ((type & 0xe0) === 0xa0) {\n      length = type & 0x1f;\n      this.offset++;\n      return this.str(length);\n    }\n\n    // Negative FixInt - 111xxxxx\n    if ((type & 0xe0) === 0xe0) {\n      value = this.view.getInt8(this.offset);\n      this.offset++;\n      return value;\n    }\n\n    switch (type) {\n      // nil\n      case 0xc0:\n        this.offset++;\n        return null;\n\n      // 0xc1 never used - use for undefined (NON-STANDARD)\n      case 0xc1:\n        this.offset++;\n        return undefined;\n\n      // false\n      case 0xc2:\n        this.offset++;\n        return false;\n\n      // true\n      case 0xc3:\n        this.offset++;\n        return true;\n\n      // bin 8\n      case 0xc4:\n        length = this.view.getUint8(this.offset + 1);\n        this.offset += 2;\n        return this.bin(length);\n\n      // bin 16\n      case 0xc5:\n        length = this.view.getUint16(this.offset + 1);\n        this.offset += 3;\n        return this.bin(length);\n\n      // bin 32\n      case 0xc6:\n        length = this.view.getUint32(this.offset + 1);\n        this.offset += 5;\n        return this.bin(length);\n\n      // ext 8\n      case 0xc7:\n        length = this.view.getUint8(this.offset + 1);\n        this.offset += 2;\n        return this.ext(length);\n\n      // ext 16\n      case 0xc8:\n        length = this.view.getUint16(this.offset + 1);\n        this.offset += 3;\n        return this.ext(length);\n\n      // ext 32\n      case 0xc9:\n        length = this.view.getUint32(this.offset + 1);\n        this.offset += 5;\n        return this.ext(length);\n\n      // float 32\n      case 0xca:\n        value = this.view.getFloat32(this.offset + 1);\n        this.offset += 5;\n        return value;\n\n      // float 64\n      case 0xcb:\n        value = this.view.getFloat64(this.offset + 1);\n        this.offset += 9;\n        return value;\n\n      // uint8\n      case 0xcc:\n        value = this.view.getUint8(this.offset + 1);\n        this.offset += 2;\n        return value;\n\n      // uint 16\n      case 0xcd:\n        value = this.view.getUint16(this.offset + 1);\n        this.offset += 3;\n        return value;\n\n      // uint 32\n      case 0xce:\n        value = this.view.getUint32(this.offset + 1);\n        this.offset += 5;\n        return value;\n\n      // uint 64\n      case 0xcf:\n        value = getUint64(this.view, this.offset + 1);\n        this.offset += 9;\n        return value;\n\n      // int 8\n      case 0xd0:\n        value = this.view.getInt8(this.offset + 1);\n        this.offset += 2;\n        return value;\n\n      // int 16\n      case 0xd1:\n        value = this.view.getInt16(this.offset + 1);\n        this.offset += 3;\n        return value;\n\n      // int 32\n      case 0xd2:\n        value = this.view.getInt32(this.offset + 1);\n        this.offset += 5;\n        return value;\n\n      // int 64\n      case 0xd3:\n        value = getInt64(this.view, this.offset + 1);\n        this.offset += 9;\n        return value;\n\n      // fixext 1\n      case 0xd4:\n        length = 1;\n        this.offset++;\n        return this.ext(length);\n\n      // fixext 2\n      case 0xd5:\n        length = 2;\n        this.offset++;\n        return this.ext(length);\n\n      // fixext 4\n      case 0xd6:\n        length = 4;\n        this.offset++;\n        return this.ext(length);\n\n      // fixext 8\n      case 0xd7:\n        length = 8;\n        this.offset++;\n        return this.ext(length);\n\n      // fixext 16\n      case 0xd8:\n        length = 16;\n        this.offset++;\n        return this.ext(length);\n\n      // str8\n      case 0xd9:\n        length = this.view.getUint8(this.offset + 1);\n        this.offset += 2;\n        return this.str(length);\n\n      // str 16\n      case 0xda:\n        length = this.view.getUint16(this.offset + 1);\n        this.offset += 3;\n        return this.str(length);\n\n      // str 32\n      case 0xdb:\n        length = this.view.getUint32(this.offset + 1);\n        this.offset += 5;\n        return this.str(length);\n\n      // array 16\n      case 0xdc:\n        length = this.view.getUint16(this.offset + 1);\n        this.offset += 3;\n        return this.array(length);\n\n      // array 32\n      case 0xdd:\n        length = this.view.getUint32(this.offset + 1);\n        this.offset += 5;\n        return this.array(length);\n\n      // map 16\n      case 0xde:\n        length = this.view.getUint16(this.offset + 1);\n        this.offset += 3;\n        return this.map(length);\n\n      // map 32\n      case 0xdf:\n        length = this.view.getUint32(this.offset + 1);\n        this.offset += 5;\n        return this.map(length);\n    }\n    throw new Error('Unknown type 0x' + type.toString(16));\n  };\n}\n\nfunction decode(buffer: ArrayBuffer) {\n  const view = new DataView(buffer);\n  const decoder = new Decoder(view);\n  const value = decoder.parse();\n  if (decoder.offset !== buffer.byteLength) throw new Error(buffer.byteLength - decoder.offset + ' trailing bytes');\n  return value;\n}\n\nfunction encodeableKeys(value: { [key: string]: unknown }, sparse?: boolean) {\n  return Object.keys(value).filter(function (e) {\n    const val = value[e],\n      type = typeof val;\n    return (!sparse || (val !== undefined && val !== null)) && ('function' !== type || !!(val as Date).toJSON);\n  });\n}\n\nfunction _encode(value: unknown, view: DataView, offset: number, sparse?: boolean): number {\n  const type = typeof value;\n\n  // Strings Bytes\n  // There are four string types: fixstr/str8/str16/str32\n  if (typeof value === 'string') {\n    const length = utf8ByteCount(value);\n\n    // fixstr\n    if (length < 0x20) {\n      view.setUint8(offset, length | 0xa0);\n      utf8Write(view, offset + 1, value);\n      return 1 + length;\n    }\n\n    // str8\n    if (length < 0x100) {\n      view.setUint8(offset, 0xd9);\n      view.setUint8(offset + 1, length);\n      utf8Write(view, offset + 2, value);\n      return 2 + length;\n    }\n\n    // str16\n    if (length < 0x10000) {\n      view.setUint8(offset, 0xda);\n      view.setUint16(offset + 1, length);\n      utf8Write(view, offset + 3, value);\n      return 3 + length;\n    }\n    // str32\n    if (length < 0x100000000) {\n      view.setUint8(offset, 0xdb);\n      view.setUint32(offset + 1, length);\n      utf8Write(view, offset + 5, value);\n      return 5 + length;\n    }\n  }\n\n  if (ArrayBuffer.isView && ArrayBuffer.isView(value)) {\n    // extract the arraybuffer and fallthrough\n    value = value.buffer;\n  }\n\n  // There are three bin types: bin8/bin16/bin32\n  if (value instanceof ArrayBuffer) {\n    const length = value.byteLength;\n\n    // bin8\n    if (length < 0x100) {\n      view.setUint8(offset, 0xc4);\n      view.setUint8(offset + 1, length);\n      new Uint8Array(view.buffer).set(new Uint8Array(value), offset + 2);\n      return 2 + length;\n    }\n\n    // bin16\n    if (length < 0x10000) {\n      view.setUint8(offset, 0xc5);\n      view.setUint16(offset + 1, length);\n      new Uint8Array(view.buffer).set(new Uint8Array(value), offset + 3);\n      return 3 + length;\n    }\n\n    // bin 32\n    if (length < 0x100000000) {\n      view.setUint8(offset, 0xc6);\n      view.setUint32(offset + 1, length);\n      new Uint8Array(view.buffer).set(new Uint8Array(value), offset + 5);\n      return 5 + length;\n    }\n  }\n\n  if (typeof value === 'number') {\n    // Floating Point\n    // NOTE: We're always using float64\n    if (Math.floor(value) !== value) {\n      view.setUint8(offset, 0xcb);\n      view.setFloat64(offset + 1, value);\n      return 9;\n    }\n\n    // Integers\n    if (value >= 0) {\n      // positive fixnum\n      if (value < 0x80) {\n        view.setUint8(offset, value);\n        return 1;\n      }\n      // uint 8\n      if (value < 0x100) {\n        view.setUint8(offset, 0xcc);\n        view.setUint8(offset + 1, value);\n        return 2;\n      }\n      // uint 16\n      if (value < 0x10000) {\n        view.setUint8(offset, 0xcd);\n        view.setUint16(offset + 1, value);\n        return 3;\n      }\n      // uint 32\n      if (value < 0x100000000) {\n        view.setUint8(offset, 0xce);\n        view.setUint32(offset + 1, value);\n        return 5;\n      }\n      // uint 64\n      if (value < 0x10000000000000000) {\n        view.setUint8(offset, 0xcf);\n        setUint64(view, offset + 1, value);\n        return 9;\n      }\n      throw new Error('Number too big 0x' + value.toString(16));\n    }\n\n    // negative fixnum\n    if (value >= -0x20) {\n      view.setInt8(offset, value);\n      return 1;\n    }\n    // int 8\n    if (value >= -0x80) {\n      view.setUint8(offset, 0xd0);\n      view.setInt8(offset + 1, value);\n      return 2;\n    }\n    // int 16\n    if (value >= -0x8000) {\n      view.setUint8(offset, 0xd1);\n      view.setInt16(offset + 1, value);\n      return 3;\n    }\n    // int 32\n    if (value >= -0x80000000) {\n      view.setUint8(offset, 0xd2);\n      view.setInt32(offset + 1, value);\n      return 5;\n    }\n    // int 64\n    if (value >= -0x8000000000000000) {\n      view.setUint8(offset, 0xd3);\n      setInt64(view, offset + 1, value);\n      return 9;\n    }\n    throw new Error('Number too small -0x' + (-value).toString(16).substr(1));\n  }\n\n  // undefined - use d4 (NON-STANDARD)\n  if (type === 'undefined') {\n    if (sparse) return 0;\n    view.setUint8(offset, 0xd4);\n    view.setUint8(offset + 1, 0x00);\n    view.setUint8(offset + 2, 0x00);\n    return 3;\n  }\n\n  // null\n  if (value === null) {\n    if (sparse) return 0;\n    view.setUint8(offset, 0xc0);\n    return 1;\n  }\n\n  // Boolean\n  if (type === 'boolean') {\n    view.setUint8(offset, value ? 0xc3 : 0xc2);\n    return 1;\n  }\n\n  if ('function' === typeof (value as Date).toJSON) return _encode((value as Date).toJSON(), view, offset, sparse);\n\n  // Container Types\n  if (type === 'object') {\n    let length: number,\n      size = 0;\n    let keys: string[] | undefined;\n    const isArray = Array.isArray(value);\n\n    if (isArray) {\n      length = (value as unknown[]).length;\n    } else {\n      keys = encodeableKeys(value as { [key: string]: unknown }, sparse);\n      length = keys.length;\n    }\n\n    if (length < 0x10) {\n      view.setUint8(offset, length | (isArray ? 0x90 : 0x80));\n      size = 1;\n    } else if (length < 0x10000) {\n      view.setUint8(offset, isArray ? 0xdc : 0xde);\n      view.setUint16(offset + 1, length);\n      size = 3;\n    } else if (length < 0x100000000) {\n      view.setUint8(offset, isArray ? 0xdd : 0xdf);\n      view.setUint32(offset + 1, length);\n      size = 5;\n    }\n\n    if (isArray) {\n      for (let i = 0; i < length; i++) {\n        size += _encode((value as unknown[])[i], view, offset + size, sparse);\n      }\n    } else if (keys) {\n      for (let i = 0; i < length; i++) {\n        const key = keys[i];\n        size += _encode(key, view, offset + size);\n        size += _encode((value as { [key: string]: unknown })[key], view, offset + size, sparse);\n      }\n    }\n\n    return size;\n  }\n  if (type === 'function') return 0;\n\n  throw new Error('Unknown type ' + type);\n}\n\nfunction sizeof(value: unknown, sparse?: boolean): number {\n  const type = typeof value;\n\n  // fixstr or str8 or str16 or str32\n  if (type === 'string') {\n    const length = utf8ByteCount(value as string);\n    if (length < 0x20) {\n      return 1 + length;\n    }\n    if (length < 0x100) {\n      return 2 + length;\n    }\n    if (length < 0x10000) {\n      return 3 + length;\n    }\n    if (length < 0x100000000) {\n      return 5 + length;\n    }\n  }\n\n  if (ArrayBuffer.isView && ArrayBuffer.isView(value)) {\n    // extract the arraybuffer and fallthrough\n    value = value.buffer;\n  }\n\n  // bin8 or bin16 or bin32\n  if (value instanceof ArrayBuffer) {\n    const length = value.byteLength;\n    if (length < 0x100) {\n      return 2 + length;\n    }\n    if (length < 0x10000) {\n      return 3 + length;\n    }\n    if (length < 0x100000000) {\n      return 5 + length;\n    }\n  }\n\n  if (typeof value === 'number') {\n    // Floating Point (32 bits)\n    // double\n    if (Math.floor(value) !== value) return 9;\n\n    // Integers\n    if (value >= 0) {\n      // positive fixint\n      if (value < 0x80) return 1;\n      // uint 8\n      if (value < 0x100) return 2;\n      // uint 16\n      if (value < 0x10000) return 3;\n      // uint 32\n      if (value < 0x100000000) return 5;\n      // uint 64\n      if (value < 0x10000000000000000) return 9;\n      // Too big\n      throw new Error('Number too big 0x' + value.toString(16));\n    }\n    // negative fixint\n    if (value >= -0x20) return 1;\n    // int 8\n    if (value >= -0x80) return 2;\n    // int 16\n    if (value >= -0x8000) return 3;\n    // int 32\n    if (value >= -0x80000000) return 5;\n    // int 64\n    if (value >= -0x8000000000000000) return 9;\n    // Too small\n    throw new Error('Number too small -0x' + value.toString(16).substr(1));\n  }\n\n  // Boolean\n  if (type === 'boolean') return 1;\n\n  // undefined, null\n  if (value === null) return sparse ? 0 : 1;\n  if (value === undefined) return sparse ? 0 : 3;\n\n  if ('function' === typeof (value as Date).toJSON) return sizeof((value as Date).toJSON(), sparse);\n\n  // Container Types\n  if (type === 'object') {\n    let length: number,\n      size = 0;\n    if (Array.isArray(value)) {\n      length = value.length;\n      for (let i = 0; i < length; i++) {\n        size += sizeof(value[i], sparse);\n      }\n    } else {\n      const keys = encodeableKeys(value as { [key: string]: unknown }, sparse);\n      length = keys.length;\n      for (let i = 0; i < length; i++) {\n        const key = keys[i];\n        size += sizeof(key) + sizeof((value as { [key: string]: unknown })[key], sparse);\n      }\n    }\n    if (length < 0x10) {\n      return 1 + size;\n    }\n    if (length < 0x10000) {\n      return 3 + size;\n    }\n    if (length < 0x100000000) {\n      return 5 + size;\n    }\n    throw new Error('Array or object too long 0x' + length.toString(16));\n  }\n  if (type === 'function') return 0;\n\n  throw new Error('Unknown type ' + type);\n}\n\nexport default {\n  encode,\n  decode,\n  inspect,\n  utf8Write,\n  utf8Read,\n  utf8ByteCount,\n};\n", "import HttpMethods from 'common/constants/HttpMethods';\nimport BaseClient from 'common/lib/client/baseclient';\nimport ErrorInfo, { PartialErrorInfo } from 'common/lib/types/errorinfo';\nimport { RequestBody, RequestResultError, ResponseHeaders, RequestParams, RequestResult } from 'common/types/http';\nimport Platform from 'common/platform';\nimport Defaults from 'common/lib/util/defaults';\nimport * as Utils from 'common/lib/util/utils';\n\nfunction isAblyError(responseBody: unknown, headers: Headers): responseBody is { error?: ErrorInfo } {\n  return !!headers.get('x-ably-errorcode');\n}\n\nfunction getAblyError(responseBody: unknown, headers: Headers) {\n  if (isAblyError(responseBody, headers)) {\n    return responseBody.error && ErrorInfo.fromValues(responseBody.error);\n  }\n}\n\nfunction convertHeaders(headers: Headers) {\n  const result: ResponseHeaders = {};\n\n  headers.forEach((value, key) => {\n    result[key] = value;\n  });\n\n  return result;\n}\n\nexport default async function fetchRequest(\n  method: HttpMethods,\n  client: BaseClient | null,\n  uri: string,\n  headers: Record<string, string> | null,\n  params: RequestParams,\n  body: RequestBody | null,\n): Promise<RequestResult> {\n  const fetchHeaders = new Headers(headers || {});\n  const _method = method ? method.toUpperCase() : Utils.isNil(body) ? 'GET' : 'POST';\n\n  const controller = new AbortController();\n\n  let timeout: ReturnType<typeof setTimeout>; // This way we don\u2019t have to worry about the fact that the TypeScript compiler is \u2014 for reasons I haven\u2019t looked into \u2014 picking up the signature of the Node version of setTimeout, which has a different return type to the web one\n  const timeoutPromise: Promise<RequestResult> = new Promise((resolve) => {\n    timeout = setTimeout(\n      () => {\n        controller.abort();\n        // When AbortController.abort() is called, the fetch() promise rejects with a DOMException named AbortError (source: https://developer.mozilla.org/en-US/docs/Web/API/AbortController)\n        // However, we beat it in the Promise.race() by resolving our custom 'Request timed out' error on the next line, thereby exposing users to the better-formatted error.\n        resolve({ error: new PartialErrorInfo('Request timed out', null, 408) });\n      },\n      client ? client.options.timeouts.httpRequestTimeout : Defaults.TIMEOUTS.httpRequestTimeout,\n    );\n  });\n\n  const requestInit: RequestInit = {\n    method: _method,\n    headers: fetchHeaders,\n    body: body as any,\n    signal: controller.signal,\n  };\n\n  if (!Platform.Config.isWebworker) {\n    requestInit.credentials = fetchHeaders.has('authorization') ? 'include' : 'same-origin';\n  }\n\n  const resultPromise = (async (): Promise<RequestResult> => {\n    try {\n      const urlParams = new URLSearchParams(params || {});\n      urlParams.set('rnd', Utils.cheapRandStr());\n      const preparedURI = uri + '?' + urlParams;\n      const res = await Utils.getGlobalObject().fetch(preparedURI, requestInit);\n\n      clearTimeout(timeout!);\n\n      if (res.status == 204) {\n        return { error: null, statusCode: res.status };\n      }\n\n      const contentType = res.headers.get('Content-Type');\n      let body;\n      if (contentType && contentType.indexOf('application/x-msgpack') > -1) {\n        body = await res.arrayBuffer();\n      } else if (contentType && contentType.indexOf('application/json') > -1) {\n        body = await res.json();\n      } else {\n        body = await res.text();\n      }\n\n      const unpacked = !!contentType && contentType.indexOf('application/x-msgpack') === -1;\n      const headers = convertHeaders(res.headers);\n\n      if (!res.ok) {\n        const error =\n          getAblyError(body, res.headers) ||\n          new PartialErrorInfo(\n            'Error response received from server: ' + res.status + ' body was: ' + Platform.Config.inspect(body),\n            null,\n            res.status,\n          );\n\n        return { error, body, headers, unpacked, statusCode: res.status };\n      } else {\n        return { error: null, body, headers, unpacked, statusCode: res.status };\n      }\n    } catch (error) {\n      clearTimeout(timeout!);\n      return { error: error as RequestResultError };\n    }\n  })();\n\n  return Promise.race([timeoutPromise, resultPromise]);\n}\n", "import { HTTPRequestImplementations } from '../http';\nimport XHRRequest from './xhrrequest';\nimport fetchRequest from './fetchrequest';\n\nexport const defaultBundledRequestImplementations: HTTPRequestImplementations = {\n  XHRRequest: XHRRequest,\n  FetchRequest: fetchRequest,\n};\n\nexport const modularBundledRequestImplementations: HTTPRequestImplementations = {};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;u8BAAA,IAAAA,GAAA,GAAAC,GAAAD,GAAA,eAAAE,EAAA,aAAAC,GAAA,SAAAC,GAAA,YAAAC,GAAA,wCAAAC,GAAA,YAAAC,KAAA,eAAAC,GAAAR,ICiBA,IAAqBS,EAArB,KAA8B,CAwB9B,EC/BA,IAAIC,GAAe,OAAO,QAAW,YAAc,OAAS,OAAO,QAAW,YAAc,OAAS,KAUrG,SAASC,GAAIC,EAAqBC,EAAgB,CAChD,MAAO,GAAGD,CAAW,GAAG,SAASC,EAAQ,EAAI,EAAG,GAAG,CACrD,CAEA,SAASC,GAAWC,EAA4B,CAC9C,OAAOC,EAAS,OAAO,cACnB,SAAUC,EAAc,CACtB,IAAMC,EAAO,IAAI,KACjBH,EACEJ,GAAIO,EAAK,SAAS,CAAC,EACjB,IACAP,GAAIO,EAAK,WAAW,CAAC,EACrB,IACAP,GAAIO,EAAK,WAAW,CAAC,EACrB,IACAP,GAAIO,EAAK,gBAAgB,EAAG,CAAC,EAC7B,IACAD,CACJ,CACF,EACA,SAAUA,EAAa,CACrBF,EAAOE,CAAG,CACZ,CACN,CAEA,IAAME,GAAoB,IAA4B,CA7CtD,IAAAC,EA8CE,IAAIC,EACAC,EAGJ,OAAI,QAAOF,EAAAG,IAAA,YAAAA,GAAc,UAAd,YAAAH,EAAuB,MAAQ,YACxCC,EAAgB,YAAaG,EAAiB,CAC5C,QAAQ,IAAI,MAAM,QAASA,CAAI,CACjC,EAEAF,EAAc,QAAQ,KAClB,YAAaE,EAAiB,CAC5B,QAAQ,KAAK,MAAM,QAASA,CAAI,CAClC,EACAH,GAGJA,EAAgBC,EAAc,UAAY,CAAC,EAGtC,CAACD,EAAeC,CAAW,EAAE,IAAIR,EAAU,CACpD,EAEMW,EAAN,MAAMA,CAAO,CA4BX,aAAc,CA6Bd,gBAAa,CAACC,EAAqBT,IAAgB,CACjD,KAAK,mBAAmB,GAAGS,CAAW,2DAA2DT,CAAG,EAAE,CACxG,EAsBA,eAAaU,GACJA,GAAS,KAAK,SAGvB,YAAS,CAACA,EAA8BC,IAAkC,CACpED,IAAU,SAAW,KAAK,SAAWA,GACrCC,IAAY,SAAW,KAAK,WAAa,KAAK,gBAAkBA,EACtE,EA3DE,KAAK,SAAWH,EAAO,gBACvB,KAAK,WAAaA,EAAO,kBACzB,KAAK,gBAAkBA,EAAO,sBAChC,CAXA,OAAO,iBAAkB,CACvB,GAAM,CAACI,EAAYC,CAAe,EAAIX,GAAkB,EACxD,KAAK,kBAAoBU,EACzB,KAAK,uBAAyBC,EAC9B,KAAK,cAAgB,IAAIL,CAC3B,CAqBA,OAAO,iBAAiBV,EAAgBY,EAAkBI,EAAgBC,EAAkB,CAC1FjB,EAAO,UAAUY,EAAOI,EAAQC,CAAO,CACzC,CAEQ,UAAUL,EAAkBI,EAAgBC,EAAkB,CAChE,KAAK,UAAUL,CAAK,IACrBA,IAAU,EAAkB,KAAK,gBAAkB,KAAK,YAAY,SAAWI,EAAS,KAAOC,EAASL,CAAK,CAElH,CAMA,oBAAoBM,EAAiBC,EAAiB,CACpD,KAAK,mBACH,SAASD,CAAO,0CAA0CC,CAAO,wCAAwCA,CAAO,iBAAiBD,CAAO,yCAC1I,CACF,CAEA,cAAcE,EAAmBF,EAAiBC,EAAiB,CACjE,KAAK,mBACH,KAAKC,CAAS,eAAUF,CAAO,mCAAmCC,CAAO,wCAAwCA,CAAO,iBAAiBD,CAAO,yCAClJ,CACF,CAEA,mBAAmBD,EAAiB,CAC9B,KAAK,UAAU,CAAe,GAChC,KAAK,gBAAgB,+BAA+BA,CAAO,GAAI,CAAe,CAElF,CAYF,EAzFMP,EACW,gBAA6B,EADxCA,EAUY,SAAsB,EAVlCA,EAWY,UAAuB,EAXnCA,EAYY,UAAuB,EAZnCA,EAaY,UAAuB,EAbnCA,EAcY,UAAuB,EAdnCA,EAwCG,UAAY,CAACV,EAAgBY,EAAkBI,EAAgBC,IAAqB,CACzFP,EAAK,iBAAiBV,EAAQY,EAAOI,EAAQC,CAAO,CACtD,EA1CF,IAAMI,GAANX,EA2FOY,EAAQD,GC/Jf,IAAAE,EAAA,GAAAC,GAAAD,EAAA,YAAAE,EAAA,YAAAC,GAAA,mBAAAC,GAAA,mBAAAC,GAAA,eAAAC,GAAA,mBAAAC,GAAA,cAAAC,GAAA,iBAAAC,GAAA,mBAAAC,GAAA,wBAAAC,GAAA,oBAAAC,GAAA,iBAAAC,GAAA,kBAAAC,GAAA,SAAAC,GAAA,6BAAAC,GAAA,kBAAAC,GAAA,eAAAC,EAAA,eAAAC,EAAA,gBAAAC,GAAA,8BAAAC,GAAA,0BAAAC,GAAA,oBAAAC,GAAA,yBAAAC,GAAA,iBAAAC,GAAA,aAAAC,GAAA,gBAAAC,GAAA,iBAAAC,EAAA,cAAAC,GAAA,YAAAC,GAAA,kCAAAC,GAAA,UAAAC,EAAA,aAAAC,GAAA,cAAAC,GAAA,wBAAAC,GAAA,UAAAC,EAAA,qBAAAC,GAAA,sBAAAC,GAAA,iBAAAC,GAAA,iBAAAC,GAAA,kBAAAC,GAAA,4BAAAC,EAAA,aAAAC,GAAA,kBAAAC,GAAA,gBAAAC,GAAA,uBAAAC,EAAA,qBAAAC,KCWA,SAASC,GAASC,EAAmC,CACnD,IAAIC,EAAS,IAAMD,EAAI,YAAY,KACnC,OAAIA,EAAI,UAASC,GAAU,KAAOD,EAAI,SAClCA,EAAI,aAAYC,GAAU,gBAAkBD,EAAI,YAChDA,EAAI,OAAMC,GAAU,UAAYD,EAAI,MACpCA,EAAI,QAAOC,GAAU,WAAmBC,EAAaF,EAAI,KAAK,GAC9DA,EAAI,MAAQ,EAAEA,EAAI,SAAWA,EAAI,QAAQ,QAAQ,cAAc,EAAI,MAAKC,GAAU,SAAWD,EAAI,KAAO,KAC5GC,GAAU,IACHA,CACT,CAcA,IAAqBE,EAArB,MAAqBC,UAAkB,KAAkD,CAMvF,YAAYC,EAAiBC,EAAcC,EAAoBC,EAAoC,CACjG,MAAMH,CAAO,EACT,OAAO,OAAO,gBAAmB,aACnC,OAAO,eAAe,KAAMD,EAAU,SAAS,EAEjD,KAAK,KAAOE,EACZ,KAAK,WAAaC,EAClB,KAAK,MAAQC,CACf,CAEA,UAAmB,CACjB,OAAOT,GAAS,IAAI,CACtB,CAEA,OAAO,WAAWU,EAA4C,CAC5D,GAAM,CAAE,QAAAJ,EAAS,KAAAC,EAAM,WAAAC,CAAW,EAAIE,EACtC,GAAI,OAAOJ,GAAY,UAAY,OAAOC,GAAS,UAAY,OAAOC,GAAe,SACnF,MAAM,IAAI,MAAM,2CAA6CG,EAAS,OAAO,QAAQD,CAAM,CAAC,EAE9F,IAAMR,EAAS,OAAO,OAAO,IAAIG,EAAUC,EAASC,EAAMC,CAAU,EAAGE,CAAM,EAC7E,OAAIR,EAAO,MAAQ,CAACA,EAAO,OACzBA,EAAO,KAAO,8BAAgCA,EAAO,MAEhDA,CACT,CACF,EAEaU,EAAN,MAAMC,UAAyB,KAAmC,CAMvE,YAAYP,EAAiBC,EAAqBC,EAAqBC,EAAoC,CACzG,MAAMH,CAAO,EACT,OAAO,OAAO,gBAAmB,aACnC,OAAO,eAAe,KAAMO,EAAiB,SAAS,EAExD,KAAK,KAAON,EACZ,KAAK,WAAaC,EAClB,KAAK,MAAQC,CACf,CAEA,UAAmB,CACjB,OAAOT,GAAS,IAAI,CACtB,CAEA,OAAO,WAAWU,EAA0D,CAC1E,GAAM,CAAE,QAAAJ,EAAS,KAAAC,EAAM,WAAAC,CAAW,EAAIE,EACtC,GACE,OAAOJ,GAAY,UAClB,CAAOQ,EAAMP,CAAI,GAAK,OAAOA,GAAS,UACtC,CAAOO,EAAMN,CAAU,GAAK,OAAOA,GAAe,SAEnD,MAAM,IAAI,MAAM,kDAAoDG,EAAS,OAAO,QAAQD,CAAM,CAAC,EAErG,IAAMR,EAAS,OAAO,OAAO,IAAIW,EAAiBP,EAASC,EAAMC,CAAU,EAAGE,CAAM,EACpF,OAAIR,EAAO,MAAQ,CAACA,EAAO,OACzBA,EAAO,KAAO,8BAAgCA,EAAO,MAEhDA,CACT,CACF,EDjGA,SAASa,GAAWC,EAAmC,CACrD,OAAO,KAAK,MAAM,KAAK,OAAO,EAAIA,EAAS,MAAM,CACnD,CASO,SAASC,EACdC,KACGC,EACsB,CACzB,QAASC,EAAI,EAAGA,EAAID,EAAK,OAAQC,IAAK,CACpC,IAAMC,EAASF,EAAKC,CAAC,EACrB,GAAI,CAACC,EACH,MAGF,QAAWC,KAAOD,EACZ,OAAO,UAAU,eAAe,KAAKA,EAAQC,CAAG,IAClDJ,EAAOI,CAAG,EAAKD,EAAmCC,CAAG,EAG3D,CACA,OAAOJ,CACT,CAQO,SAASK,GAAkCC,EAAwD,CACxG,OAAOP,EAAM,CAAC,EAAGO,CAA8B,CACjD,CAOO,SAASC,GAAYC,EAAyC,CACnE,OAAIC,EAAMD,CAAG,EACJ,CAAC,EAEN,MAAM,QAAQA,CAAG,EACZA,EAEF,CAACA,CAAG,CACb,CAEO,SAASE,GAASC,EAA4C,CACnE,OAAO,OAAO,UAAU,SAAS,KAAKA,CAAE,GAAK,iBAC/C,CAOO,SAASC,GAAQD,EAAkD,CACxE,QAAWE,KAAQF,EAAI,MAAO,GAC9B,MAAO,EACT,CAOO,SAASF,EAAMK,EAAuC,CAC3D,OAAOA,GAAO,IAChB,CASO,SAASC,GAAaJ,EAAsD,CACjF,IAAMK,EAAS,IAAI,OACnB,QAAWH,KAAQF,EAAIK,EAAOH,CAAI,EAAIF,EAAGE,CAAI,EAC7C,OAAOG,CACT,CAWO,SAASC,GACdN,EACAO,EACyB,CACzB,MAAMC,CAAE,CAAC,CACTA,EAAE,UAAYR,EACd,IAAMK,EAAS,IAAIG,EACnB,OAAID,GAAenB,EAAMiB,EAAQE,CAAa,EACvCF,CACT,CASO,IAAMI,GAAW,SAAUC,EAAWC,EAAqB,CAChE,GAAIC,EAAS,OAAO,SAAU,CAC5BA,EAAS,OAAO,SAASF,EAAMC,CAAS,EACxC,MACF,CACAD,EAAK,OAASC,EACdD,EAAK,UAAYJ,GAAkBK,EAAU,UAAW,CAAE,YAAaD,CAAK,CAAC,CAC/E,EAQO,SAASG,GAAcb,EAA6Bc,EAAuB,CAChF,QAAWvB,KAAKS,EACd,GAAIA,EAAGT,CAAC,GAAKuB,EAAK,MAAO,GAE3B,MAAO,EACT,CAEO,SAASC,GAA+BC,EAAehB,EAAsC,CAClG,OAAO,MAAM,QAAQA,CAAE,EAAIiB,GAAaD,EAAKhB,CAAE,EAAIkB,GAAeF,EAAKhB,CAAE,CAC3E,CAEO,SAASiB,GAAgBE,EAAgBC,EAA0B,CACxE,IAAMf,EAAS,CAAC,EAChB,QAASd,EAAI,EAAGA,EAAI4B,EAAK,OAAQ5B,IAAK,CACpC,IAAM8B,EAASF,EAAK5B,CAAC,EACjB6B,EAAK,QAAQC,CAAM,GAAK,IAAIhB,EAAO,KAAKgB,CAAM,CACpD,CACA,OAAOhB,CACT,CAEO,SAASa,GAAiCF,EAAehB,EAAsC,CACpG,IAAMK,EAAS,CAAC,EAChB,QAASd,EAAI,EAAGA,EAAIyB,EAAI,OAAQzB,IAAK,CACnC,IAAM8B,EAASL,EAAIzB,CAAC,EAChB8B,KAAUrB,GAAIK,EAAO,KAAKgB,CAAM,CACtC,CACA,OAAOhB,CACT,CAEO,SAASiB,GAAkBN,EAAeF,EAAiB,CAChE,IAAMS,EAAMP,EAAI,QAAQF,CAAG,EACrBU,EAAMD,GAAO,GACnB,OAAIC,GAAKR,EAAI,OAAOO,EAAK,CAAC,EACnBC,CACT,CAEO,SAASC,GAAmBT,EAAeF,EAAkB,CAClE,IAAMY,EAASV,EAAI,MAAM,EACzB,OAAAM,GAAeI,EAAQZ,CAAG,EACnBY,CACT,CASO,SAASC,GAAU3B,EAA6B4B,EAAkC,CACvF,IAAMvB,EAAS,CAAC,EAChB,QAAWH,KAAQF,EACb4B,GAAW,CAAC,OAAO,UAAU,eAAe,KAAK5B,EAAIE,CAAI,GAC7DG,EAAO,KAAKH,CAAI,EAElB,OAAOG,CACT,CASO,SAASwB,GAAe7B,EAAuB4B,EAAwB,CAC5E,IAAMvB,EAAS,CAAC,EAChB,QAAWH,KAAQF,EACb4B,GAAW,CAAC,OAAO,UAAU,eAAe,KAAK5B,EAAIE,CAAI,GAC7DG,EAAO,KAAKL,EAAGE,CAAI,CAAC,EAEtB,OAAOG,CACT,CAEO,SAASyB,GAA0B9B,EAA6B+B,EAAkC,CACvG,QAAW7B,KAAQF,EACb,OAAO,UAAU,eAAe,KAAKA,EAAIE,CAAI,GAAKF,EAAGE,CAAI,GAC3D6B,EAAG7B,CAAI,CAGb,CAEO,SAAS8B,GAAQhB,EAAqCd,EAAuB,CAClF,GAAIc,EAAI,SAAW,EACjB,MAAO,GAET,IAAMiB,EAAQjB,EAAI,CAAC,EAAEd,CAAI,EACzB,OAAOc,EAAI,MAAM,SAAUkB,EAAM,CAC/B,OAAOA,EAAKhC,CAAI,IAAM+B,CACxB,CAAC,CACH,CAEO,IAAKE,OACVA,EAAA,QAAU,UACVA,EAAA,KAAO,OAFGA,OAAA,IAKL,SAASC,GAAuBpB,EAAkB,CACvD,OAAOA,EAAI,OAAO9B,GAAW8B,CAAG,EAAG,CAAC,EAAE,CAAC,CACzC,CAEO,SAASqB,GAAcC,EAAgD,CAC5E,IAAMC,EAAQ,CAAC,EACf,GAAID,EACF,QAAW7C,KAAO6C,EAAQC,EAAM,KAAK,mBAAmB9C,CAAG,EAAI,IAAM,mBAAmB6C,EAAO7C,CAAG,CAAC,CAAC,EAEtG,OAAO8C,EAAM,OAAS,IAAMA,EAAM,KAAK,GAAG,EAAI,EAChD,CAEO,SAASC,GAAiBC,EAAuC,CACtE,IAAIC,EACEC,EAAS,sBACTtC,EAAiC,CAAC,EAExC,KAAQqC,EAAQC,EAAO,KAAKF,CAAK,GAAIpC,EAAO,mBAAmBqC,EAAM,CAAC,CAAC,CAAC,EAAI,mBAAmBA,EAAM,CAAC,CAAC,EAEvG,OAAOrC,CACT,CAEO,SAASuC,GAA8BC,EAAmD,CAC/F,OAAO,OAAOA,GAAO,UAAYA,IAAQ,OAASA,aAAeC,GAAaD,aAAeE,EAC/F,CAEO,SAASC,EAAaH,EAAsB,CArQnD,IAAAI,EAAAC,EAsQE,OACEL,aAAe,SACdI,EAAAJ,GAAA,YAAAA,EAAmB,cAAnB,YAAAI,EAAgC,QAAS,eACzCC,EAAAL,GAAA,YAAAA,EAA0B,cAA1B,YAAAK,EAAuC,QAAS,mBAEzCL,EAAc,SAAS,EAC1BjC,EAAS,OAAO,QAAQiC,CAAG,CACpC,CAEO,SAASM,GAAYC,EAAuB,CACjD,OAAIxC,EAAS,YAAY,SAASwC,CAAI,EAC5BA,EAAa,SAAS,EACrB,OAAOA,GAAS,SAClBA,EAEAxC,EAAS,OAAO,QAAQwC,CAAI,CAEvC,CAWO,SAASC,GAAcC,EAAsD,CAClF,GAAI1C,EAAS,YAAY,SAAS0C,CAAI,EACpC,OAAO1C,EAAS,YAAY,WAAW0C,CAAI,EAE7C,GAAI,OAAOA,GAAS,SAClB,OAAO1C,EAAS,OAAO,eAAe0C,CAAI,EAE5C,GAAI,OAAOA,GAAS,SAClB,MAAO,GAET,GAAI,OAAOA,GAAS,UAClB,MAAO,GAET,MAAM,IAAI,MACR,mGAAmG,OAAOA,CAAI,EAChH,CACF,CAEO,SAASC,IAAuB,CACrC,OAAO,OAAO,KAAK,OAAO,CAAC,EAAE,OAAO,CAAC,CACvC,CAKO,IAAMC,GAAe,MAAOC,GAAsC,CACvE,IAAMC,EAAS,MAAM9C,EAAS,OAAO,qBAAqB6C,CAAQ,EAClE,OAAO7C,EAAS,YAAY,aAAa8C,CAAM,CACjD,EAGO,SAASC,GAAc3C,EAAe4C,EAAqB,CAChE,IAAMC,EAAW,KAAK,IAAID,EAAG5C,EAAI,MAAM,EACrC8C,EAAa9C,EAAI,MAAM,EACvBX,EAAmB,CAAC,EACtB,QAASd,EAAI,EAAGA,EAAIsE,EAAUtE,IAC5Bc,EAAO,KAAK+B,GAAoB0B,CAAU,CAAC,EAE7C,OAAOzD,CACT,CAKO,SAAS0D,EACdC,EACAC,EACA,CACAD,EACG,KAAM3D,GAAW,CAChB4D,GAAA,MAAAA,EAAW,KAAM5D,EACnB,CAAC,EACA,MAAOwC,GAAiB,CAEvBoB,GAAA,MAAAA,EAAWpB,EACb,CAAC,CACL,CAEO,SAASqB,EAAcd,EAAee,EAAyBC,EAA2B,CAC/F,OAAIA,GAAU,WACPD,GACHE,EAAwB,SAAS,EAE5BF,EAAQ,OAAOf,CAAc,GAG/B,KAAK,MAAM,OAAOA,CAAI,CAAC,CAChC,CAEO,SAASkB,EAAWlB,EAAee,EAAyBC,EAAkC,CACnG,OAAIA,GAAU,WACPD,GACHE,EAAwB,SAAS,EAE5BF,EAAQ,OAAOf,EAAM,EAAI,GAG3B,KAAK,UAAUA,CAAI,CAC5B,CAEO,SAASmB,GAAevD,EAAmC,CAChE,OAAOA,EAAI,IAAI,SAAUwD,EAAS,CAChC,OAAOA,GAAWA,EAAQ,YAAY,CACxC,CAAC,CACH,CAEO,SAASC,GAAezD,EAAmC,CAChE,OAAOA,EAAI,IAAI,SAAUwD,EAAS,CAChC,OAAOA,GAAWA,EAAQ,YAAY,CACxC,CAAC,CACH,CAEO,SAASE,GAAsBC,EAAe,CACnD,OAAO,KAAK,KAAKA,EAAQ,GAAK,EAAG,CAAC,CACpC,CAEO,SAASC,IAAuB,CACrC,MAAO,GAAI,KAAK,OAAO,EAAI,EAC7B,CAYO,SAASC,GAAaC,EAAwBC,EAAsB,CACzE,OAAOD,EAAiBJ,GAAsBK,CAAY,EAAIH,GAAqB,CACrF,CAEO,SAASI,IAAkB,CAChC,OAAI,OAAO,QAAW,YACb,OAGL,OAAO,QAAW,YACb,OAGF,IACT,CAEO,SAASC,GAAczF,EAAiCH,EAAiC,CAC9F,OACE,OAAO,KAAKG,CAAM,EAAE,MAAOC,GAAQD,EAAOC,CAAG,IAAMJ,EAAOI,CAAG,CAAC,GAC9D,OAAO,KAAKJ,CAAM,EAAE,MAAOI,GAAQJ,EAAOI,CAAG,IAAMD,EAAOC,CAAG,CAAC,CAElE,CAEO,SAASyF,GAAoBC,EAAc,CAUhD,IAAMC,EAAQ,+BACR1C,EAAQyC,EAAK,MAAMC,CAAK,EAC9B,GAAI,CAAC1C,GAAS,CAACA,EAAM,QAAUA,EAAM,OAAS,EAC5C,MAAM,IAAII,EAAU,qBAAsB,IAAK,KAAK,EAGtD,GAAIJ,EAAO,CAAC,EACV,MAAM,IAAII,EAAU,sCAAsCJ,EAAM,CAAC,CAAC,WAAY,IAAK,KAAK,EAG1F,MAAO,CACL,eAAgBA,EAAM,CAAC,GAAK,GAC5B,YAAaA,EAAM,CAAC,CACtB,CACF,CAEO,SAAS2C,GAASC,EAAa,CACpC,IAAMC,EAAc3E,EAAS,YACvB4E,EAAaD,EAAY,WAAWD,CAAG,EAC7C,OAAOC,EAAY,aAAaC,CAAU,CAC5C,CAEO,SAASC,GAAUC,EAAUC,EAAU,CAC5C,OACED,EAAE,SAAWC,EAAE,QACfD,EAAE,MAAM,SAAU5E,EAAKvB,EAAG,CACxB,OAAOuB,IAAQ6E,EAAEpG,CAAC,CACpB,CAAC,CAEL,CAEO,SAASqG,GAAyBC,EAA6C,CACpF,OAAO,IAAI/C,EAAU,GAAG+C,CAAU,uBAAwB,MAAO,GAAG,CACtE,CAEO,SAASxB,EAAwBwB,EAAyC,CAC/E,MAAMD,GAAyBC,CAAU,CAC3C,CAEA,eAAsBC,GAAoB9B,EAAqB+B,EAAU,IAAMlD,EAAM,kBAA+B,CAClH,IAAMmD,EAAI,IAAIlD,EAAUD,EAAK,IAAO,GAAG,EACvC,OAAO,QAAQ,KAAK,CAACmB,EAAS,IAAI,QAAW,CAACiC,EAAUC,IAAW,WAAW,IAAMA,EAAOF,CAAC,EAAGD,CAAO,CAAC,CAAC,CAAC,CAC3G,CExdE,IAAAI,GAAW,SCSb,IAAIC,GAAQ,WAAaC,GA+CnBC,EAAW,CACf,SAAU,OACV,YAAa,GACb,UAAW,eACX,cAAe,mBACf,eAAgB,CACd,oCACA,oCACA,oCACA,oCACA,mCACF,EACA,KAAM,GACN,SAAU,IACV,SAAU,CAER,yBAA0B,KAC1B,sBAAuB,IAEvB,mBAAoB,IACpB,qBAAsB,KACtB,oBAAqB,KACrB,qBAAsB,IAEtB,mBAAoB,KACpB,uBAAwB,IACxB,YAAa,IACb,wBAAyB,IACzB,qBAAsB,GACxB,EACA,kBAAmB,EACnB,eAAgB,MAEhB,QAAAD,GACA,gBAAiB,EACjB,MAAAD,GACA,QAAAG,GACA,cAAAC,GACA,6BAAAC,GACA,yBAAAC,GACA,iBAAAC,GACA,SAAAC,GACA,UAAAC,GACA,iBAAAC,GACA,iBAAAC,GACA,kBAAAC,GACA,mBAAAC,EACF,EAEO,SAASV,GAAQW,EAAwBC,EAAmC,CACjF,OAAOA,GAAOD,EAAQ,IAAMA,EAAQ,QAAUA,EAAQ,IACxD,CAEO,SAASV,GAAcU,EAAgC,CAC5D,OAAOA,EAAQ,IAAM,WAAa,SACpC,CAKA,SAASE,GAAoBC,EAA2B,CACtD,OAAOA,EAAS,SAAS,GAAG,GAAKA,EAAS,SAAS,IAAI,GAAKA,IAAa,WAC3E,CAKO,SAASZ,GAA6BY,EAA0B,CAErE,OAAID,GAAoBC,CAAQ,EAAUA,EAGtCA,EAAS,WAAW,UAAU,EAEzB,GADiBA,EAAS,QAAQ,WAAY,EAAE,CAC9B,6BAIpB,GAAGA,CAAQ,oBACpB,CAOO,SAASX,GAAyBW,EAA4B,CAEnE,GAAID,GAAoBC,CAAQ,EAAG,MAAO,CAAC,EAG3C,GAAIA,EAAS,WAAW,UAAU,EAAG,CACnC,IAAMC,EAAkBD,EAAS,QAAQ,WAAY,EAAE,EACvD,OAAOE,GAAkBD,EAAiB,2BAA2B,CACvE,CAGA,OAAOC,GAAkBF,EAAU,mBAAmB,CACxD,CAEO,SAASE,GAAkBD,EAAyBE,EAA0B,CACnF,MAAO,CAAC,IAAK,IAAK,IAAK,IAAK,GAAG,EAAE,IAAKC,GAAO,GAAGH,CAAe,IAAIG,CAAE,aAAaD,CAAM,EAAE,CAC5F,CAEO,SAASb,GAAiBO,EAA4C,CAC3E,IAAMQ,EAAgBR,EAAQ,cAC5BS,EACE,OAAOT,EAAQ,mBAAsB,YAAcA,EAAQ,kBAAoBZ,EAAS,kBAE5F,OAAOoB,EAAsBE,GAAWF,EAAeC,CAAiB,EAAI,CAAC,CAC/E,CAEO,SAASf,GAASM,EAA4C,CACnE,MAAO,CAACA,EAAQ,aAAa,EAAE,OAAOP,GAAiBO,CAAO,CAAC,CACjE,CAEA,SAASL,GAAUgB,EAAoB,CACrC,GAAI,OAAOA,GAAS,SAClB,MAAM,IAAIC,EAAU,gCAAkC,OAAOD,EAAM,IAAO,GAAG,EAE/E,GAAI,CAACA,EAAK,OACR,MAAM,IAAIC,EAAU,+BAAgC,IAAO,GAAG,CAElE,CAEA,SAASC,GAAYb,EAAwB,CAE3C,IAAMc,EAAmC,CAAC,EAC1C,QAAWC,KAAQ3B,EAAS,SAC1B0B,EAASC,CAAI,EAAKf,EAAmCe,CAAI,GAAM3B,EAAS,SAAoC2B,CAAI,EAElH,OAAOD,CACT,CAEO,SAASE,GAAehB,EAAgC,CAC7D,IAAIiB,EAAW7B,EAAS,MACxB,GAAIY,EAAQ,OACV,QAASd,KAASc,EAAQ,OACxBiB,GAAY,IAAM/B,EAAQ,IAAMc,EAAQ,OAAOd,CAAK,EAGxD,OAAO+B,CACT,CAEO,SAASrB,GACdI,EACAkB,EACAC,EACAC,EACAC,EACe,CACf,GAAIrB,IAAY,OAAW,CACzB,IAAMsB,EAAMJ,EACR,GAAGC,CAAqB,8FACxB,GAAGA,CAAqB,oDAC5B,MAAAI,EAAO,UAAUH,EAAQG,EAAO,UAAW,GAAGJ,CAAqB,KAAMG,CAAG,EACtE,IAAI,MAAMA,CAAG,CACrB,CAEA,IAAIE,EAEJ,GAAI,OAAOxB,GAAY,SACrB,GAAIA,EAAQ,QAAQ,GAAG,GAAK,GAAI,CAC9B,GAAI,CAACkB,EAAiB,CACpB,IAAMI,EAAM,GAAGH,CAAqB,uLACpC,MAAAI,EAAO,UAAUH,EAAQG,EAAO,UAAW,GAAGJ,CAAqB,KAAMG,CAAG,EACtE,IAAI,MAAMA,CAAG,CACrB,CAEAE,EAAa,CAAE,MAAOxB,CAAQ,CAChC,KAAO,CACL,GAAI,CAACkB,EAAiB,CACpB,IAAMI,EAAM,GAAGH,CAAqB,yLACpC,MAAAI,EAAO,UAAUH,EAAQG,EAAO,UAAW,GAAGJ,CAAqB,KAAMG,CAAG,EACtE,IAAI,MAAMA,CAAG,CACrB,CAEAE,EAAa,CAAE,IAAKxB,CAAQ,CAC9B,MAEAwB,EAAaxB,EAGf,OAAIqB,IACFG,EAAaC,EAAAC,EAAA,GAAKF,GAAL,CAAiB,QAASE,IAAA,GAAKL,GAA4BG,EAAW,QAAU,IAGxFA,CACT,CAEA,SAASG,GAA6B3B,EAAwB,CAE5D,GAAIA,EAAQ,WAAaA,EAAQ,aAAeA,EAAQ,UAAYA,EAAQ,cAE1E,MAAM,IAAIY,EACR,qHACA,MACA,GACF,EAIF,GAAIZ,EAAQ,cAAgBA,EAAQ,UAAYA,EAAQ,cAEtD,MAAM,IAAIY,EACR,yGACA,MACA,GACF,CAEJ,CAEO,SAASf,GACdG,EACA4B,EACAR,EACyB,CACzB,IAAMS,EAAcT,GAAA,KAAAA,EAAUG,EAAO,cAGjCvB,EAAQ,aACV6B,EAAY,WAAW,kCAAmC,2CAA2C,EAEnG7B,EAAQ,UACV6B,EAAY,WAAW,+BAAgC,2CAA2C,EAEhG7B,EAAQ,cACV6B,EAAY,WAAW,mCAAoC,2CAA2C,EAGxGF,GAA6B3B,CAAO,EAEhC,OAAOA,EAAQ,SAAY,YAAcA,EAAQ,gBAAkB,KACrEuB,EAAO,UACLM,EACAN,EAAO,UACP,4BACA,wHACF,EACAvB,EAAQ,QAAU,QAGd,kBAAmBA,IAGvBA,EAAQ,cAAgB,CAACA,EAAQ,SAG7B,kBAAmBA,IAAUA,EAAQ,cAAgB,IAG3D,IAAMG,EAAWH,EAAQ,UAAYZ,EAAS,SAE1C,CAACY,EAAQ,eAAiB,CAACA,EAAQ,UAAY,CAACA,EAAQ,cAAgB,CAACA,EAAQ,MAAQ,CAACA,EAAQ,UACpGA,EAAQ,cAAgBR,GAAyBQ,EAAQ,aAAeG,CAAQ,GAGlF,IAAM2B,EAA+B9B,EAAQ,aAAe,GAAGA,EAAQ,WAAW,qBAG5E+B,EAFiC/B,EAAQ,UAAYA,EAAQ,cAAgB8B,GAE3BvC,GAA6BY,CAAQ,GAE5FH,EAAQ,eAAiB,CAAC,GAAG,OAAO+B,CAAa,EAAE,QAAQpC,EAAS,EAErEK,EAAQ,KAAOA,EAAQ,MAAQZ,EAAS,KACxCY,EAAQ,QAAUA,EAAQ,SAAWZ,EAAS,SACxC,QAASY,IAAUA,EAAQ,IAAM,IAEvC,IAAMc,EAAWD,GAAYb,CAAO,EAEhC4B,EACE,sBAAuB5B,EACzBA,EAAQ,kBAAoBgC,EAAS,OAAO,gBAAkBhC,EAAQ,kBAEtEA,EAAQ,kBAAoBgC,EAAS,OAAO,aAG9ChC,EAAQ,kBAAoB,GAG9B,IAAMiC,EAAkC,CAAC,EACrCjC,EAAQ,WACViC,EAAQ,iBAAiB,EAAID,EAAS,YAAY,aAAaA,EAAS,YAAY,WAAWhC,EAAQ,QAAQ,CAAC,GAG5G,6BAA8BA,IAClCA,EAAQ,yBAA2B,IAGrC,IAAIkC,EAA0B,KAC1BC,EAAuBnC,EAAQ,qBACnC,GAAIA,EAAQ,qBAAsB,CAChC,GAAI,CAACoC,EAAKC,CAAE,EAAIrC,EAAQ,qBAAqB,MAAM,GAAG,EACtDkC,EAA0BG,EAAWC,GAAiBD,CAAE,EAAI,CAAC,EACzDD,EAAI,QAAQ,KAAK,IAAM,KACzBA,EAAM,WAAaA,GAErBD,EAAuBC,CACzB,CAEA,IAAIG,EAAyBvC,EAAQ,uBACrC,OAAIuC,GAA0BA,EAAuB,QAAQ,KAAK,IAAM,KACtEA,EAAyB,SAAWA,GAG/Bd,EAAAC,EAAA,GACF1B,GADE,CAEL,cAAe+B,EACf,eAAgB/B,EAAQ,gBAAkBZ,EAAS,eACnD,SAAA0B,EACA,wBAAAoB,EACA,qBAAAC,EACA,uBAAAI,EACA,QAAAN,CACF,EACF,CAEO,SAASO,GAAwBC,EAAqCrB,EAAgBpB,EAA0B,CACrH,IAAM0C,EAAiB1C,GAAW,CAAC,EACnC,GAAI0C,EAAe,OAAQ,CACpBD,GAAcE,EAAwB,QAAQ,EACnD,IAAMC,EAASH,EAAO,UAAUC,EAAe,OAAQtB,CAAM,EAC7DsB,EAAe,OAASE,EAAO,aAC/BF,EAAe,cAAgBE,EAAO,MACxC,KAAW,WAAYF,IAGrBA,EAAe,OAAS,OACxBA,EAAe,cAAgB,MAEjC,OAAOA,CACT,CAEA,IAAMG,GAAe,CACnB,KAAM,mBACN,IAAK,kBACL,KAAM,YACN,QAAS,wBACT,KAAM,YACR,EAOMC,GAAkD,CACtD,cACA,gBAAiB1D,EAAS,eAC5B,EAEO,SAASU,GACdE,EACA,CACE,OAAA+C,EAASD,GAAsB,OAC/B,gBAAAE,EAAkBF,GAAsB,eAC1C,EAAoB,CAAC,EACG,CAExB,MAAO,CACL,OAFaD,GAAaE,CAAM,EAGhC,iBAAkBC,EAAgB,SAAS,EAC3C,aAAchC,GAAehB,CAAO,CACtC,CACF,CAEO,SAASD,GACdC,EACA,CACE,OAAA+C,EAASD,GAAsB,OAC/B,gBAAAE,EAAkBF,GAAsB,eAC1C,EAAoB,CAAC,EACG,CACxB,IAAIG,EAGJ,MAAO,CACL,OAHcA,EAAcJ,GAAaE,CAAM,EAI/C,eAAgBE,EAChB,iBAAkBD,EAAgB,SAAS,EAC3C,aAAchC,GAAehB,CAAO,CACtC,CACF,CAEA,IAAOkD,EAAQ9D,EAER,SAAS+D,GAAYC,EAA6B,CACvD,OAAO,OAAO,OAAOhE,EAAUgE,CAAgB,CACjD,CC1aA,IAAMC,GAAN,MAAMC,CAAe,CAIX,YACWC,EACjBC,EACA,CAFiB,YAAAD,EAGjB,KAAK,QAAWC,GAA0C,CAAC,CAC7D,CAEQ,KAAKC,EAAwBC,EAAkB,CACrD,QAAWC,KAAU,KAAK,QACxB,GAAIA,EACF,GAAI,CACFA,EAAOF,EAAKC,CAAM,CACpB,OAASE,EAAG,CACVC,EAAO,UACL,KAAK,OACLA,EAAO,UACP,wCACA,yBAA2BD,EAAI,aAAgBA,EAAY,KAC7D,CACF,CAGN,CAEA,QAAQE,EAAwC,CAC9C,KAAK,QAAQ,KAAK,GAAGA,CAAI,CAC3B,CAEA,eAA4B,CAC1B,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtC,KAAK,KAAK,CAACP,EAAKC,IAAW,CACzBD,EAAMO,EAAOP,CAAG,EAAIM,EAAQL,CAAO,CACrC,CAAC,CACH,CAAC,CACH,CAEA,WAAWA,EAAW,CACpB,KAAK,KAAK,KAAMA,CAAM,CACxB,CAEA,UAAUD,EAAgB,CACxB,KAAK,KAAKA,CAAG,CACf,CAEA,OAAO,OAAUF,EAAgBC,EAA0E,CACzG,IAAMS,EAAW,IAAIX,EAAYC,EAAQC,CAAO,EAChD,OAAO,OAAO,OAAO,CAACC,EAAwBC,IAAeO,EAAS,KAAKR,EAAKC,CAAM,EAAG,CACvF,KAAOQ,GAA4BD,EAAS,KAAKC,CAAE,EACnD,cAAe,IAAMD,EAAS,cAAc,EAC5C,WAAaP,GAAcO,EAAS,WAAWP,CAAM,EACrD,UAAYD,GAAmBQ,EAAS,UAAUR,CAAG,CACvD,CAAC,CACH,CACF,EAEOU,GAAQd,GChFf,IAAKe,QACHA,EAAA,IAAM,MACNA,EAAA,OAAS,SACTA,EAAA,KAAO,OACPA,EAAA,IAAM,MACNA,EAAA,MAAQ,QALLA,QAAA,IAQEC,EAAQD,GCRf,IAAKE,QACHA,IAAA,QAAU,KAAV,UACAA,IAAA,UAAY,KAAZ,YACAA,IAAA,WAAa,KAAb,aACAA,IAAA,aAAe,KAAf,eACAA,IAAA,UAAY,KAAZ,YACAA,IAAA,eAAiB,KAAjB,iBACAA,IAAA,oBAAsB,KAAtB,sBAPGA,QAAA,IAUE,SAASC,GAAcC,EAAoB,CAChD,OAAOA,GAAc,KAA2BA,EAAa,GAC/D,CAEA,IAAOC,GAAQH,GCOf,IAAMI,GAAmB,KAAK,IAAI,EAAG,EAAE,EACvC,SAASC,IAAS,CAChB,OAAQ,SAAW,KAAK,MAAM,KAAK,OAAO,EAAI,IAAI,GAAG,MAAM,GAAG,CAChE,CAEA,SAASC,GAAWC,EAA4C,CAC9D,MAAO,CAAC,CAAEA,EAAwB,UACpC,CAGA,SAASC,GAA2BC,EAAU,CAC5C,OAAWC,GAA8BD,CAAG,GAIvCA,EAAI,OACHA,EAAI,aAAe,IACrBA,EAAI,KAAO,OAEXA,EAAI,KAAO,MAEXA,EAAI,WAAa,MAGdA,GAZE,IAAIE,EAAgBC,EAAaH,CAAG,EAAGA,EAAI,MAAQ,MAAOA,EAAI,YAAc,GAAG,CAa1F,CAEA,IAAII,GAAO,CAACC,EAAcC,IAAwB,CAChD,IAAMC,EAAcC,EAAS,YAEvBC,EAAaF,EAAY,WAAWF,CAAI,EACxCK,EAAYH,EAAY,WAAWD,CAAG,EAEtCK,EAASJ,EAAY,WAAWE,EAAYC,CAAS,EAE3D,OAAOH,EAAY,aAAaI,CAAM,CACxC,EAEA,SAASC,GAAKC,EAAqD,CACjE,GAAI,CAACA,EAAY,MAAO,GAEpB,OAAOA,GAAc,WAAUA,EAAa,KAAK,MAAMA,CAAU,GAErE,IAAMC,EAAgD,OAAO,OAAO,IAAI,EAClEC,EAAaC,GAAUH,EAA6C,EAAI,EAC9E,GAAI,CAACE,EAAM,MAAO,GAClBA,EAAK,KAAK,EACV,QAASE,EAAI,EAAGA,EAAIF,EAAK,OAAQE,IAC/BH,EAAeC,EAAKE,CAAC,CAAC,EAAKJ,EAA6CE,EAAKE,CAAC,CAAC,EAAE,KAAK,EAExF,OAAO,KAAK,UAAUH,CAAc,CACtC,CAEA,SAASI,GAA8BC,EAA0BC,EAAgB,CAC/E,GAAID,EAAY,aACdE,EAAO,UAAUD,EAAQC,EAAO,UAAW,SAAU,oCAAoC,UAChFF,EAAY,QACrBE,EAAO,UAAUD,EAAQC,EAAO,UAAW,SAAU,+BAA+B,UAC3EF,EAAY,IACrBE,EAAO,UAAUD,EAAQC,EAAO,UAAW,SAAU,2CAA2C,UACvFF,EAAY,aACrBE,EAAO,UAAUD,EAAQC,EAAO,UAAW,SAAU,2CAA2C,MAC3F,CACL,IAAMC,EAAM,2DACZ,MAAAD,EAAO,UAAUD,EAAQC,EAAO,UAAW,SAAUC,CAAG,EAClD,IAAI,MAAMA,CAAG,CACrB,CACF,CAEA,SAASC,GAAgBC,EAAwB,CAC/C,MAAO,iBAAkBA,GAAW,CAACA,EAAQ,YAC/C,CAGO,SAASC,GAAaD,EAAwB,CACnD,OACEA,EAAQ,cACP,CAACD,GAAgBC,CAAO,IAAMA,EAAQ,cAAgBA,EAAQ,SAAWA,EAAQ,OAASA,EAAQ,aAEvG,CAGA,SAASE,GAAaF,EAAwB,CAC5C,MAAO,CAACA,EAAQ,KAAO,CAACA,EAAQ,cAAgB,CAACA,EAAQ,OAC3D,CAEA,IAAIG,GAAO,EACX,SAASC,IAAoB,CAC3B,OAAOD,IACT,CAYA,IAAME,GAAN,KAAW,CAaT,YAAY/B,EAAoB0B,EAAwB,CAPxD,iBAA2B,CAAC,EAc1B,GANA,KAAK,OAAS1B,EACd,KAAK,YAAc0B,EAAQ,oBAAsB,CAAC,EAElD,KAAK,sBAAwB,KAC7B,KAAK,uBAAyB,KAE1BC,GAAaD,CAAO,EAElBE,GAAaF,CAAO,GACtBH,EAAO,UACL,KAAK,OACLA,EAAO,UACP,SACA,wLACF,EAEF,KAAK,kBAAkBG,EAAQ,mBAAwCA,CAAO,EAC9EN,GAA8B,KAAK,YAAa,KAAK,MAAM,MACtD,CAEL,GAAI,CAACM,EAAQ,IAAK,CAChB,IAAMF,EACJ,8HACF,MAAAD,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,SAAUC,CAAG,EACvD,IAAIpB,EAAUoB,EAAK,MAAO,GAAG,CACrC,CACAD,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,SAAU,6BAA6B,EACvF,KAAK,kBAAkBG,CAAO,CAChC,CACF,CAEA,IAAI,QAAiB,CACnB,OAAO,KAAK,OAAO,MACrB,CAuFA,MAAM,UACJM,EACAX,EAC2B,CAG3B,GAAIA,GAAeA,EAAY,KAAO,KAAK,YAAY,MAAQA,EAAY,IACzE,MAAM,IAAIjB,EAAU,sDAAuD,MAAO,GAAG,EAGvF,GAAI,CACF,IAAI6B,EAAe,MAAM,KAAK,eAAeD,GAAA,KAAAA,EAAe,KAAMX,GAAA,KAAAA,EAAe,IAAI,EAOrF,OAAItB,GAAW,KAAK,MAAM,EACjB,IAAI,QAAQ,CAACmC,EAASC,IAAW,CACrC,KAAK,OAAwB,WAAW,kBAAkB,cACzDF,EACA,CAAC/B,EAAc+B,IAAqC/B,EAAMiC,EAAOjC,CAAG,EAAIgC,EAAQD,CAAa,CAC/F,CACF,CAAC,EAEMA,CAEX,OAAS/B,EAAK,CACZ,MAAK,KAAK,OAAwB,YAAeA,EAAkB,aAAekC,GAAgB,WAI/F,KAAK,OAAwB,WAAW,kBAAkB,wBAAwBlC,CAAgB,EAE/FA,CACR,CACF,CAKA,MAAM,eACJ8B,EACAX,EAC2B,CAE3B,KAAK,aAAe,KAKpB,KAAK,kBAAkBW,EAAaX,CAAW,EAE/CD,GAA8B,KAAK,YAAa,KAAK,MAAM,EAE3D,GAAI,CACF,OAAO,KAAK,4BAA4B,EAAI,CAC9C,QAAE,CAEA,OAAO,KAAK,YAAY,UACxB,OAAO,KAAK,YAAY,SAC1B,CACF,CAyEA,MAAM,aAAaY,EAAsCX,EAAsD,CAE7G,IAAMgB,EAAsBhB,GAAe,KAAK,YAC1CiB,EAAsBN,GAAqBO,GAAK,KAAK,WAAW,EAIlEC,EAQFxC,EAAS,KAAK,OAEhB,GAAIqC,EAAoB,aACtBd,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,sBAAuB,oCAAoC,EAC3GiB,EAAuBH,EAAoB,qBAClCA,EAAoB,QAC7Bd,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,sBAAuB,+BAA+B,EACtGiB,EAAuB,CAACC,EAAQC,IAAO,CACrC,IAAMC,EAAoBC,EACxB,CAAE,OAAQ,8BAA+B,EACzCP,EAAoB,WACtB,EACMQ,EAAUR,EAAoB,YAAcA,EAAoB,WAAW,YAAY,IAAM,OAC/FS,EAEEC,EAAWV,EAAoB,QAAS,QAAQ,GAAG,EACrDU,EAAW,KACbD,EAAyBE,GAAiBX,EAAoB,QAAS,MAAMU,CAAQ,CAAC,EACtFV,EAAoB,QAAUA,EAAoB,QAAS,MAAM,EAAGU,CAAQ,EACvEF,IAEHR,EAAoB,WAAmBO,EACrCE,EACAT,EAAoB,UACtB,IAIJ,IAAMY,EAAmBL,EAAM,CAAC,EAAGP,EAAoB,YAAc,CAAC,EAAGI,CAAM,EACzES,EAA0BC,GAA0B,CApblE,IAAAC,EAAAC,EAqbU,IAAIC,GAAQF,EAAAD,EAAO,OAAP,KAAAC,EAAe,KAEvBG,EAA6B,KACjC,GAAIJ,EAAO,MACT5B,EAAO,UACL,KAAK,OACLA,EAAO,UACP,2CACA,mBAA2BlB,EAAa8C,EAAO,KAAK,CACtD,MACK,CACL,IAAMK,GAA6BH,EAAAF,EAAO,QAAS,cAAc,IAA9B,KAAAE,EAAmC,KAClE,MAAM,QAAQG,CAA0B,EAE1CD,EAAcC,EAA2B,KAAK,IAAI,EAElDD,EAAcC,EAEhBjC,EAAO,UACL,KAAK,OACLA,EAAO,UACP,2CACA,2BAA6BgC,EAAc,WAAmBE,GAAYH,CAAI,CAChF,CACF,CACA,GAAIH,EAAO,MAAO,CAChBT,EAAGS,EAAO,MAAO,IAAI,EACrB,MACF,CACA,GAAIA,EAAO,SAAU,CACnBT,EAAG,KAAMY,CAAwC,EACjD,MACF,CAEA,GADI5C,EAAS,YAAY,SAAS4C,CAAI,IAAGA,EAAOA,EAAK,SAAS,GAC1D,CAACC,EAAa,CAChBb,EAAG,IAAItC,EAAU,oDAAqD,MAAO,GAAG,EAAG,IAAI,EACvF,MACF,CACA,IAAMsD,EAAOH,EAAY,QAAQ,kBAAkB,EAAI,GACrDhD,GAAOgD,EAAY,QAAQ,YAAY,EAAI,IAAMA,EAAY,QAAQ,iBAAiB,EAAI,GAC5F,GAAI,CAACG,GAAQ,CAACnD,GAAM,CAClBmC,EACE,IAAItC,EACF,oDACEmD,EACA,qEACF,MACA,GACF,EACA,IACF,EACA,MACF,CACA,GAAIG,EAAM,CACR,GAAKJ,EAAgB,OAASzD,GAAkB,CAC9C6C,EAAG,IAAItC,EAAU,iDAAkD,MAAO,GAAG,EAAG,IAAI,EACpF,MACF,CACA,GAAI,CACFkD,EAAO,KAAK,MAAMA,CAAc,CAClC,OAASK,EAAG,CACVjB,EACE,IAAItC,EACF,uDAA0DuD,EAAY,QACtE,MACA,GACF,EACA,IACF,EACA,MACF,CACF,CACAjB,EAAG,KAAMY,EAA0CC,CAAW,CAChE,EAYA,GAXAhC,EAAO,UACL,KAAK,OACLA,EAAO,UACP,2CACA,yBACEc,EAAoB,QACpB,aACA,KAAK,UAAUY,CAAU,EACzB,cACCJ,EAAU,OAAS,MACxB,EACIA,EAAS,CAEX,IAAMe,EAAUjB,GAAe,CAAC,EAChCiB,EAAQ,cAAc,EAAI,oCAC1B,IAAMN,EAAaO,GAAcZ,CAAU,EAAE,MAAM,CAAC,EAC9Ca,EACJ,KAAK,OAAO,KAAK,MACfC,EAAY,KACZ1B,EAAoB,QACpBuB,EACAN,EACAR,CACF,EACA,CAAC5C,EAAUiD,IAELD,EADJhD,GAE2BiD,CADG,CAElC,CACF,MACQW,EACJ,KAAK,OAAO,KAAK,MAAMC,EAAY,IAAK1B,EAAoB,QAAUM,GAAe,CAAC,EAAG,KAAMM,CAAU,EACzG,CAAC/C,EAAUiD,IAELD,EADJhD,GAE2BiD,CADG,CAElC,CAEJ,UACSd,EAAoB,IAC7Bd,EAAO,UACL,KAAK,OACLA,EAAO,UACP,sBACA,2CACF,EACAiB,EAAuB,CAACC,EAAQC,IAAO,CAC/BoB,EAAmB,KAAK,mBAAmBrB,EAAQJ,CAAmB,EAAG,CAACnC,EAAKiD,IACnFT,EAAGxC,EAAkCiD,GAAA,KAAAA,EAAU,IAAI,CACrD,CACF,MACK,CACL,IAAM3B,EACJ,+GACF,MAAAD,EAAO,UACL,KAAK,OACLA,EAAO,UACP,SACA,+KACF,EACM,IAAInB,EAAUoB,EAAK,MAAO,GAAG,CACrC,CAGI,eAAiBc,IAClBA,EAA4C,WAAaxB,GACvDwB,EAA4C,UAC/C,GAEF,IAAM0B,EAAe,CACnBC,EACAC,IACG,CACH,IAAMC,EAAUF,EAAkB,QAChCG,EAAO,SAAWD,EAAU,gBAC5BE,EAAW,SAAUC,EAAc,CACjC,OAAOtE,EAAO,QAAQsE,CAAI,EAAIF,CAChC,EAEIG,EAAiBC,EAAS,mBAAmB,KAAK,OAAO,OAAO,EAClEnC,EAAoB,gBAAsBO,EAAM2B,EAAgBlC,EAAoB,cAAc,EACtGd,EAAO,UACL,KAAK,OACLA,EAAO,UACP,mCACA,mBAAqB6C,EAAO,mBAAqB,KAAK,UAAUH,CAAiB,CACnF,EACMH,EACJ,KAAK,OAAO,KAAK,GAAGC,EAAY,KAAMM,EAAUE,EAAgB,KAAK,UAAUN,CAAiB,EAAG,IAAI,EACvG,CAAC/D,EAAUiD,IACTjD,EACIgE,EAAQhE,CAAG,EACXgE,EAAQf,EAAQ,MAAOA,EAAQ,KAA+CA,EAAQ,QAAQ,CACtG,CACF,EAEA,OAAO,IAAI,QAAQ,CAACjB,EAASC,IAAW,CACtC,IAAIsC,EAAqC,GACvCC,EAAgB,KAAK,OAAO,QAAQ,SAAS,uBAC7CC,EAA8B,WAAW,IAAM,CAC7CF,EAAqC,GACrC,IAAMjD,EAAM,0CAA4CkD,EAAgB,IAAO,WAC/EnD,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,sBAAuBC,CAAG,EAC1EW,EAAO,IAAI/B,EAAUoB,EAAK,MAAO,GAAG,CAAC,CACvC,EAAGkD,CAAa,EAElBlC,EAAsBF,EAAqB,CAACpC,EAAK0E,EAAuBrB,IAAgB,CACtF,GAAIkB,EAAoC,OAGxC,GAFA,aAAaE,CAA2B,EAEpCzE,EAAK,CACPqB,EAAO,UACL,KAAK,OACLA,EAAO,UACP,sBACA,oDAA4DlB,EAAaH,CAAG,CAC9E,EACAiC,EAAOlC,GAA2BC,CAAG,CAAC,EACtC,MACF,CAEA,GAAI,OAAO0E,GAA0B,SAAU,CACzCA,EAAsB,SAAW,EACnCzC,EAAO,IAAI/B,EAAU,wBAAyB,MAAO,GAAG,CAAC,EAChDwE,EAAsB,OAAS/E,GACxCsC,EACE,IAAI/B,EACF,mDAAqDwE,EAAsB,OAAS,UACpF,MACA,GACF,CACF,EACSA,IAA0B,aAAeA,IAA0B,OAE5EzC,EAAO,IAAI/B,EAAU,0CAA2C,MAAO,GAAG,CAAC,EAE3EwE,EAAsB,CAAC,IAAM,KAC7B,EAAErB,GAAeA,EAAY,QAAQ,iBAAiB,EAAI,IAE1DpB,EACE,IAAI/B,EACF,2GACA,MACA,GACF,CACF,EAEA8B,EAAQ,CAAE,MAAO0C,CAAsB,CAAqB,EAE9D,MACF,CACA,GAAI,OAAOA,GAA0B,UAAYA,IAA0B,KAAM,CAC/E,IAAMpD,EACJ,+GACA,OAAOoD,EACTrD,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,sBAAuBC,CAAG,EAC1EW,EAAO,IAAI/B,EAAUoB,EAAK,MAAO,GAAG,CAAC,EACrC,MACF,CACA,IAAMqD,EAAa,KAAK,UAAUD,CAAqB,EAAE,OACzD,GAAIC,EAAahF,IAAoB,CAACwC,EAAoB,uBAAwB,CAChFF,EACE,IAAI/B,EACF,6EAA+EyE,EAAa,UAC5F,MACA,GACF,CACF,EACA,MACF,CACA,GAAI,WAAYD,EAAuB,CAErC1C,EAAQ0C,CAAqB,EAC7B,MACF,CACA,GAAI,EAAE,YAAaA,GAAwB,CACzC,IAAMpD,EACJ,kHACFD,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,sBAAuBC,CAAG,EAC1EW,EAAO,IAAI/B,EAAUoB,EAAK,MAAO,GAAG,CAAC,EACrC,MACF,CAEAwC,EAAaY,EAAuB,CAAC1E,EAAK4E,EAAeC,IAAa,CACpE,GAAI7E,EAAK,CACPqB,EAAO,UACL,KAAK,OACLA,EAAO,UACP,sBACA,gDAAwDlB,EAAaH,CAAG,CAC1E,EACAiC,EAAOlC,GAA2BC,CAAG,CAAC,EACtC,MACF,CACK6E,IAAUD,EAAgB,KAAK,MAAMA,CAAuB,GACjEvD,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,kBAAmB,gBAAgB,EACnFW,EAAQ4C,CAAiC,CAC3C,CAAC,CACH,CAAC,CACH,CAAC,CACH,CAmCA,MAAM,mBAAmB9C,EAAqCX,EAA6C,CAEzGA,EAAcA,GAAe,KAAK,YAClCW,EAAcA,GAAqBO,GAAsB,KAAK,WAAW,EAEzE,IAAM/B,EAAMa,EAAY,IACxB,GAAI,CAACb,EACH,MAAM,IAAIJ,EAAU,mBAAoB,MAAO,GAAG,EAEpD,IAAM4E,EAAWxE,EAAI,MAAM,GAAG,EAC5B2D,EAAUa,EAAS,CAAC,EACpBC,EAAYD,EAAS,CAAC,EAExB,GAAI,CAACC,EACH,MAAM,IAAI7E,EAAU,wBAAyB,MAAO,GAAG,EAGzD,GAAI4B,EAAY,WAAa,GAC3B,MAAM,IAAI5B,EAAU,yCAAqC,MAAO,GAAG,EAGjE,eAAgB4B,IAClBA,EAAY,WAAalB,GAAKkB,EAAY,UAAU,GAGtD,IAAMkD,EAA2CtC,EAAM,CAAE,QAASuB,CAAQ,EAAGnC,CAAW,EACtFmD,EAAWnD,EAAY,UAAY,GACnCoD,EAAMpD,EAAY,KAAO,GACzBjB,EAAaiB,EAAY,YAAc,GAEpCkD,EAAQ,YACXA,EAAQ,UAAY,MAAM,KAAK,cAAc7D,GAAeA,EAAY,SAAS,GAQnF,IAAMgE,EAAQH,EAAQ,QAAUA,EAAQ,MAAQpF,GAAO,GACrDwF,EAAYJ,EAAQ,UAEhBK,EACJL,EAAQ,QAAU;AAAA,EAAOE,EAAM;AAAA,EAAOrE,EAAa;AAAA,EAAOoE,EAAW;AAAA,EAAOG,EAAY;AAAA,EAAOD,EAAQ;AAAA,EAOzG,OAAAH,EAAQ,IAAMA,EAAQ,KAAO5E,GAAKiF,EAAUN,CAAS,EAErD1D,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,yBAA0B,0BAA0B,EAE7F2D,CACT,CAMA,MAAM,eAAiD,CACrD,GAAI,KAAK,QAAU,QAAS,MAAO,CAAE,IAAK,KAAK,GAAK,EAC/C,CACH,IAAIjD,EAAe,MAAM,KAAK,4BAA4B,EAAK,EAC/D,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,qFAAqF,EAEvG,MAAO,CAAE,aAAcA,EAAa,KAAM,CAC5C,CACF,CAMA,MAAM,gBAAkD,CACtD,GAAI,KAAK,QAAU,QACjB,MAAO,CAAE,cAAe,SAAW,KAAK,QAAS,EAC5C,CACL,IAAMA,EAAe,MAAM,KAAK,4BAA4B,EAAK,EACjE,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,qFAAqF,EAEvG,MAAO,CAAE,cAAe,UAAkBuD,GAASvD,EAAa,KAAK,CAAE,CACzE,CACF,CAEA,kBAAkBZ,EAA0B,CAC1C,KAAK,OAAS,QACd,KAAK,IAAMA,EAAY,IACvB,KAAK,SAAiBmE,GAASnE,EAAY,GAAa,EACxD,KAAK,YAAcA,GAAe,CAAC,EAC/B,aAAcA,GAChB,KAAK,iBAAiBA,EAAY,QAAQ,CAE9C,CAEA,kBAAkBW,EAAqCX,EAAiC,CACtF,KAAK,OAAS,QAEVW,IAIF,KAAK,YAAcA,GAGjBX,IAEEA,EAAY,QAEdA,EAAY,aACV,OAAOA,EAAY,OAAU,SACxB,CAAE,MAAOA,EAAY,KAAM,EAC5BA,EAAY,OAGhBA,EAAY,eACd,KAAK,aAAeA,EAAY,cAG9B,aAAcA,GAChB,KAAK,iBAAiBA,EAAY,QAAQ,EAG5C,KAAK,YAAcA,EAEvB,CAIA,MAAM,4BAA4BoE,EAAoD,CACpF,IAAMC,EAAQ,KAAK,aAEnB,GAAIA,EAAO,CACT,GAAI,KAAK,uBAAuBA,EAAM,QAAQ,EAE5C,MAAM,IAAItF,EACR,uCAAyCsF,EAAM,SAAW,2BAA6B,KAAK,SAAW,IACvG,MACA,GACF,EAKF,GAAI,CAAC,KAAK,OAAO,gBAAgB,GAAK,CAACA,EAAM,SAAWA,EAAM,SAAW,KAAK,OAAO,wBAAwB,EAC3G,OAAAnE,EAAO,UACL,KAAK,OACLA,EAAO,UACP,kBACA,iCAAmCmE,EAAM,OAC3C,EACOA,EAGTnE,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,kBAAmB,wBAAwB,EAC3F,KAAK,aAAe,IACtB,CAEA,IAAMoE,GACJ,KAAK,yBAA2B,KAAK,uBAAyBC,GAAY,OAAO,KAAK,MAAM,IAC5F,cAAc,EAChB,GAAI,KAAK,wBAA0B,MAAQ,CAACH,EAC1C,OAAOE,EAIT,IAAME,EAAkB,KAAK,sBAAwB/D,GAAkB,EAEnEgD,EACFgB,EAAgC,KAClC,GAAI,CACFhB,EAAgB,MAAM,KAAK,aAAa,KAAK,YAAa,KAAK,WAAW,CAC5E,OAAS5E,EAAK,CACZ4F,EAAc5F,CAChB,CAEA,GAAK,KAAK,sBAAmC2F,EAC3C,OAAAtE,EAAO,UACL,KAAK,OACLA,EAAO,UACP,qCACA,2DACF,EACOoE,EAGT,KAAK,sBAAwB,KAC7B,IAAMI,EAAc,KAAK,uBAEzB,OADA,KAAK,uBAAyB,KAC1BD,GACFC,GAAA,MAAAA,EAAa,UAAUD,GAChBH,IAETI,GAAA,MAAAA,EAAa,WAAY,KAAK,aAAejB,GAEtCa,EACT,CAGA,iBAAiBR,EAA8B,CAC7C,GAAM,OAAOA,GAAa,UAAYA,IAAa,KAE5C,IAAIA,IAAa,IACtB,MAAM,IAAI/E,EACR,8SACA,MACA,GACF,EACK,CACL,IAAMF,EAAM,KAAK,sBAAsBiF,CAAQ,EAC/C,GAAIjF,EAAK,MAAMA,CACjB,MAVE,OAAM,IAAIE,EAAU,2CAA4C,MAAO,GAAG,CAW9E,CAGA,sBAAsB+E,EAA8B,CAClD,GAAI,KAAK,uBAAuBA,CAAQ,EAAG,CAGzC,IAAM3D,EAAM,4CAA8C,KAAK,SAAW,eAAiB2D,EACrFjF,EAAM,IAAIE,EAAUoB,EAAK,MAAO,GAAG,EACzC,OAAAD,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,+BAAgCC,CAAG,EAC5EtB,CACT,KAGE,aAAK,SAAW,KAAK,YAAY,SAAWiF,EACrC,IAEX,CAEA,uBAAuBa,EAAwC,CAC7D,MAAO,CAAC,EACN,KAAK,UACL,KAAK,WAAa,KAClBA,GACAA,IAAkB,KAClB,KAAK,WAAaA,EAEtB,CAEA,OAAO,WAAWC,EAA0B,CAC1C,OAAOA,EAAM,MAAQA,EAAM,MAAQ,OAASA,EAAM,KAAO,KAC3D,CAEA,aACEC,EACAxE,EACgC,CAChC,OAAO,KAAK,OAAO,KAAK,aAAawE,EAAYxE,CAAO,CAC1D,CAKA,MAAc,cAAcyE,EAAqC,CAC/D,OAAO,KAAK,OAAO,aAAaA,GAAa,CAAC,CAAC,KAAK,YAAY,SAAS,CAC3E,CACF,EAEOC,EAAQrE,GCr7BR,SAASsE,GAAYC,EAAoC,CAC9D,IAAMC,EAAa,CAAC,EACpB,GAAID,EACF,QAAWE,KAAUF,EACnBC,EAAW,KAAKC,EAAS,IAAMF,EAAOE,CAAM,CAAC,EAGjD,OAAOD,EAAW,KAAK,GAAG,CAC5B,CAEO,SAASE,GAAgBC,EAAaJ,EAAoC,CAC/E,OAAOI,GAAOJ,EAAS,IAAM,IAAMD,GAAYC,CAAM,CACvD,CAEA,SAASK,GACPC,EACAC,EACAH,EACAJ,EACAQ,EACA,CACIF,EAAO,MACTG,EAAO,iBACLD,EACAC,EAAO,UACP,QAAUF,EAAS,KACnB,mBAAqBJ,GAAgBC,EAAKJ,CAAM,EAAI,YAAoBU,EAAaJ,EAAO,KAAK,CACnG,EAEAG,EAAO,iBACLD,EACAC,EAAO,UACP,QAAUF,EAAS,KACnB,aACEJ,GAAgBC,EAAKJ,CAAM,EAC3B,cACAD,GAAYO,EAAO,OAA8B,EACjD,iBACAA,EAAO,WACP,UACCK,EAAS,YAAY,SAASL,EAAO,IAAI,EACtC,cAAgBK,EAAS,YAAY,aAAaL,EAAO,IAAI,EAC7D,KAAOA,EAAO,KACtB,CAEJ,CAEA,SAASM,GAAWL,EAAqBH,EAAaS,EAA0Bb,EAAuBQ,EAAgB,CACjHA,EAAO,UAAUC,EAAO,SAAS,GACnCA,EAAO,iBACLD,EACAC,EAAO,UACP,QAAUF,EAAS,KACnB,YACEJ,GAAgBC,EAAKJ,CAAM,EAC3B,UACCW,EAAS,YAAY,SAASE,CAAI,EAAI,cAAgBF,EAAS,YAAY,aAAaE,CAAI,EAAI,KAAOA,EAC5G,CAEJ,CAEO,IAAMC,GAAN,KAAW,CAIhB,YAA6BC,EAAqB,CAArB,YAAAA,EAC3B,KAAK,aAAe,IAAIJ,EAAS,KAAKI,CAAM,EAE5C,KAAK,kBAAoB,KAAK,aAAa,kBACvC,IAAM,KAAK,aAAa,kBAAmB,EAC3C,MACN,CAEA,IAAI,QAAiB,CArIvB,IAAAC,EAAAC,EAsII,OAAOA,GAAAD,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,KAAAC,EAAuBR,EAAO,aACvC,CAEA,IAAI,qBAAsB,CACxB,OAAO,KAAK,aAAa,mBAC3B,CAEA,IAAI,qBAAsB,CACxB,OAAO,KAAK,aAAa,mBAC3B,CAEA,UAAUM,EAAoB,CAI5B,IAAMG,EAAcH,EAAwB,WAC1CI,EAAiBD,GAAcA,EAAW,kBAAkB,KAE9D,OAAIC,EACK,CAACA,CAAc,EAAE,OAAOC,EAAS,iBAAiBL,EAAO,OAAO,CAAC,EAGnEK,EAAS,SAASL,EAAO,OAAO,CACzC,CAKA,MAAM,GACJR,EACAc,EACAC,EACAT,EACAb,EACwB,CACxB,GAAI,CAEF,IAAMe,EAAS,KAAK,OACpB,GAAI,CAACA,EACH,MAAO,CAAE,MAAO,IAAIQ,EAAU,gCAAiC,IAAO,GAAG,CAAE,EAG7E,IAAMC,EACJ,OAAOH,GAAS,WACZA,EACA,SAAUI,EAAc,CACtB,OAAOV,EAAO,QAAQU,CAAI,EAAIJ,CAChC,EAEAK,EAAkBX,EAAO,iBAC/B,GAAIW,EACF,GAAIA,EAAgB,WAAa,KAAK,IAAI,EAAG,CAE3C,IAAMpB,EAAS,MAAM,KAAK,MAAMC,EAAQiB,EAAYE,EAAgB,IAAI,EAAGJ,EAAST,EAAMb,CAAM,EAChG,OAAIM,EAAO,OAAS,KAAK,aAAa,eAAeA,EAAO,KAAuB,GAEjFS,EAAO,iBAAmB,KACnB,KAAK,GAAGR,EAAQc,EAAMC,EAAST,EAAMb,CAAM,GAE7CM,CACT,MAEES,EAAO,iBAAmB,KAI9B,IAAMY,EAAQ,KAAK,UAAUZ,CAAM,EAGnC,GAAIY,EAAM,SAAW,EACnB,OAAO,KAAK,MAAMpB,EAAQiB,EAAYG,EAAM,CAAC,CAAC,EAAGL,EAAST,EAAMb,CAAM,EAGxE,IAAI4B,EAAiC,KAC/BC,EAAW,MAAOC,EAA+BC,IAAuD,CAC5G,IAAMN,EAAOK,EAAe,MAAM,EAClCF,EAAoBA,GAAA,KAAAA,EAAqB,IAAI,KAC7C,IAAMtB,EAAS,MAAM,KAAK,MAAMC,EAAQiB,EAAYC,CAAc,EAAGH,EAAST,EAAMb,CAAM,EAC1F,OAAIM,EAAO,OAAS,KAAK,aAAa,eAAeA,EAAO,KAAuB,GAAKwB,EAAe,OAEjF,KAAK,IAAI,EAAIF,EAAkB,QAAQ,EACzCb,EAAO,QAAQ,SAAS,qBACjC,CACL,MAAO,IAAIQ,EACT,8EAA8ER,EAAO,QAAQ,SAAS,oBAAoB,WAC1H,MACA,GACF,CACF,EAGKc,EAASC,EAAgB,EAAI,GAElCC,IAEFhB,EAAO,iBAAmB,CACxB,KAAMU,EACN,WAAY,KAAK,IAAI,EAAIV,EAAO,QAAQ,SAAS,oBACnD,GAEKT,EACT,EACA,OAAOuB,EAASF,CAAK,CACvB,OAASK,EAAK,CAEZ,MAAO,CAAE,MAAO,IAAIT,EAAU,gCAAsCb,EAAasB,CAAG,CAAC,GAAI,IAAK,GAAK,CAAE,CACvG,CACF,CAKA,MAAM,MACJzB,EACAH,EACAkB,EACAT,EACAb,EACwB,CACxB,GAAI,CACFY,GAAWL,EAAQH,EAAKS,EAAMb,EAAQ,KAAK,MAAM,EAEjD,IAAMM,EAAS,MAAM,KAAK,aAAa,MAAMC,EAAQH,EAAKkB,EAAST,EAAMb,CAAM,EAE/E,OAAI,KAAK,OAAO,UAAUS,EAAO,SAAS,GACxCJ,GAAUC,EAAQC,EAAQH,EAAKJ,EAAQ,KAAK,MAAM,EAG7CM,CACT,OAAS0B,EAAK,CAEZ,MAAO,CAAE,MAAO,IAAIT,EAAU,mCAAyCb,EAAasB,CAAG,CAAC,GAAI,IAAK,GAAK,CAAE,CAC1G,CACF,CACF,ECvQA,SAASC,GAAaC,EAAgBC,EAA8BC,EAAoBC,EAAiB,CACvG,GAAI,CACFD,EAAS,MAAMD,EAAWE,CAAI,CAChC,OAASC,EAAG,CACVC,EAAO,UACLL,EACAK,EAAO,UACP,sBACA,kCAAoCD,EAAI,cAAgBA,GAAMA,EAAY,MAC5E,CACF,CACF,CAQA,SAASE,GAAeC,EAAsBL,EAAoBM,EAAsB,CACtF,IAAIC,EACAC,EACAC,EAEJ,QAASC,EAAuB,EAAGA,EAAuBL,EAAgB,OAAQK,IAMhF,GALAH,EAAYF,EAAgBK,CAAoB,EAC5CJ,IACFC,EAAYA,EAAUD,CAAW,GAG/B,MAAM,QAAQC,CAAS,EAAG,CAC5B,MAAQC,EAAQD,EAAU,QAAQP,CAAQ,KAAO,IAC/CO,EAAU,OAAOC,EAAO,CAAC,EAIvBF,GAAeC,EAAU,SAAW,GACtC,OAAOF,EAAgBK,CAAoB,EAAEJ,CAAW,CAE5D,SAAiBK,GAASJ,CAAS,EAEjC,IAAKE,KAAaF,EACZ,OAAO,UAAU,eAAe,KAAKA,EAAWE,CAAS,GAAK,MAAM,QAAQF,EAAUE,CAAS,CAAC,GAClGL,GAAe,CAACG,CAAS,EAAGP,EAAUS,CAAS,CAKzD,CAEA,IAAMG,GAAN,KAAmB,CAMjB,YAAqBd,EAAgB,CAAhB,YAAAA,EACnB,KAAK,IAAM,CAAC,EACZ,KAAK,OAAS,OAAO,OAAO,IAAI,EAChC,KAAK,QAAU,CAAC,EAChB,KAAK,WAAa,OAAO,OAAO,IAAI,CACtC,CAeA,MAAMG,EAAiB,CACrB,GAAIA,EAAK,SAAW,EAAG,CACrB,IAAMD,EAAWC,EAAK,CAAC,EACvB,GAAI,OAAOD,GAAa,WACtB,KAAK,IAAI,KAAKA,CAAQ,MAEtB,OAAM,IAAI,MAAM,0CAA4Ca,EAAS,OAAO,QAAQZ,CAAI,CAAC,CAE7F,CACA,GAAIA,EAAK,SAAW,EAAG,CACrB,GAAM,CAACa,EAAOd,CAAQ,EAAIC,EAC1B,GAAI,OAAOD,GAAa,WACtB,MAAM,IAAI,MAAM,0CAA4Ca,EAAS,OAAO,QAAQZ,CAAI,CAAC,EAE3F,GAAUc,EAAMD,CAAK,EACnB,KAAK,IAAI,KAAKd,CAAQ,UACb,MAAM,QAAQc,CAAK,EAC5BA,EAAM,QAASL,GAAc,CAC3B,KAAK,GAAGA,EAAWT,CAAQ,CAC7B,CAAC,MACI,CACL,GAAI,OAAOc,GAAU,SACnB,MAAM,IAAI,MAAM,0CAA4CD,EAAS,OAAO,QAAQZ,CAAI,CAAC,GAEzE,KAAK,OAAOa,CAAK,IAAM,KAAK,OAAOA,CAAK,EAAI,CAAC,IACrD,KAAKd,CAAQ,CACzB,CACF,CACF,CAmBA,OAAOC,EAAiB,CACtB,GAAIA,EAAK,QAAU,GAAYc,EAAMd,EAAK,CAAC,CAAC,GAAWc,EAAMd,EAAK,CAAC,CAAC,EAAI,CACtE,KAAK,IAAM,CAAC,EACZ,KAAK,OAAS,OAAO,OAAO,IAAI,EAChC,KAAK,QAAU,CAAC,EAChB,KAAK,WAAa,OAAO,OAAO,IAAI,EACpC,MACF,CACA,GAAM,CAACe,EAAUC,CAAS,EAAIhB,EAC1BD,EAA4B,KAC5Bc,EAAiB,KACrB,GAAIb,EAAK,SAAW,GAAK,CAACgB,EACpB,OAAOD,GAAa,WAEtBhB,EAAWgB,EAEXF,EAAQE,MAGL,CACL,GAAI,OAAOC,GAAc,WACvB,MAAM,IAAI,MAAM,yCAA2CJ,EAAS,OAAO,QAAQZ,CAAI,CAAC,EAE1F,CAACa,EAAOd,CAAQ,EAAI,CAACgB,EAAUC,CAAS,CAC1C,CAEA,GAAIjB,GAAkBe,EAAMD,CAAK,EAAG,CAClCV,GAAe,CAAC,KAAK,IAAK,KAAK,OAAQ,KAAK,QAAS,KAAK,UAAU,EAAGJ,CAAQ,EAC/E,MACF,CAEA,GAAI,MAAM,QAAQc,CAAK,EAAG,CACxBA,EAAM,QAASL,GAAc,CAC3B,KAAK,IAAIA,EAAWT,CAAQ,CAC9B,CAAC,EACD,MACF,CAGA,GAAI,OAAOc,GAAU,SACnB,MAAM,IAAI,MAAM,yCAA2CD,EAAS,OAAO,QAAQZ,CAAI,CAAC,EAEtFD,EACFI,GAAe,CAAC,KAAK,OAAQ,KAAK,UAAU,EAAGJ,EAAUc,CAAK,GAE9D,OAAO,KAAK,OAAOA,CAAK,EACxB,OAAO,KAAK,WAAWA,CAAK,EAEhC,CAOA,UAAUA,EAAe,CACvB,GAAIA,EAAO,CACT,IAAMP,EAAY,KAAK,OAAOO,CAAK,GAAK,CAAC,EACzC,OAAI,KAAK,WAAWA,CAAK,GAAG,MAAM,UAAU,KAAK,MAAMP,EAAW,KAAK,WAAWO,CAAK,CAAC,EACjFP,EAAU,OAASA,EAAY,IACxC,CACA,OAAO,KAAK,IAAI,OAAS,KAAK,IAAM,IACtC,CAOA,KAAKO,KAAkBb,EAAiC,CACtD,IAAMF,EAAY,CAAE,MAAAe,CAAM,EACpBP,EAAwB,CAAC,EAE3B,KAAK,QAAQ,SACf,MAAM,UAAU,KAAK,MAAMA,EAAW,KAAK,OAAO,EAClD,KAAK,QAAU,CAAC,GAEd,KAAK,IAAI,QACX,MAAM,UAAU,KAAK,MAAMA,EAAW,KAAK,GAAG,EAEhD,IAAMW,EAAsB,KAAK,WAAWJ,CAAK,EAC7CI,IACF,MAAM,UAAU,KAAK,MAAMX,EAAWW,CAAmB,EACzD,OAAO,KAAK,WAAWJ,CAAK,GAE9B,IAAMK,EAAkB,KAAK,OAAOL,CAAK,EACrCK,GACF,MAAM,UAAU,KAAK,MAAMZ,EAAWY,CAAe,EAGvDZ,EAAU,QAASP,GAAa,CAC9BH,GAAa,KAAK,OAAQE,EAAWC,EAAUC,CAAI,CACrD,CAAC,CACH,CAqBA,QAAQA,EAAuC,CAC7C,IAAMmB,EAAWnB,EAAK,OACtB,GAAImB,IAAa,GAAMA,IAAa,GAAK,OAAOnB,EAAK,CAAC,GAAM,WAAa,CACvE,IAAMa,EAAQb,EAAK,CAAC,EACpB,OAAO,IAAI,QAASoB,GAAY,CAC9B,KAAK,KAAKP,EAAmCO,CAAO,CACtD,CAAC,CACH,CAEA,GAAM,CAACL,EAAUC,CAAS,EAAIhB,EAC9B,GAAIA,EAAK,SAAW,GAAK,OAAOe,GAAa,WAC3C,KAAK,QAAQ,KAAKA,CAAQ,UACXD,EAAMC,CAAQ,EAAG,CAChC,GAAI,OAAOC,GAAc,WACvB,MAAM,IAAI,MAAM,0CAA4CJ,EAAS,OAAO,QAAQZ,CAAI,CAAC,EAE3F,KAAK,QAAQ,KAAKgB,CAAS,CAC7B,SAAW,MAAM,QAAQD,CAAQ,EAAG,CAClC,IAAMM,EAAO,KACPC,EAAkB,UAAqB,CAC3C,IAAMC,EAAY,MAAM,UAAU,MAAM,KAAK,SAAS,EAItD,GAHAR,EAAS,QAAQ,SAAUP,EAAW,CACpCa,EAAK,IAAIb,EAAWc,CAAe,CACrC,CAAC,EACG,OAAON,GAAc,WACvB,MAAM,IAAI,MAAM,0CAA4CJ,EAAS,OAAO,QAAQZ,CAAI,CAAC,EAE3FgB,EAAU,MAAM,KAAMO,CAAS,CACjC,EACAR,EAAS,QAAQ,SAAUP,EAAW,CACpCa,EAAK,GAAGb,EAAWc,CAAe,CACpC,CAAC,CACH,KAAO,CACL,GAAI,OAAOP,GAAa,SACtB,MAAM,IAAI,MAAM,0CAA4CH,EAAS,OAAO,QAAQZ,CAAI,CAAC,EAE3F,IAAMM,EAAY,KAAK,WAAWS,CAAQ,IAAM,KAAK,WAAWA,CAAQ,EAAI,CAAC,GAC7E,GAAIC,EAAW,CACb,GAAI,OAAOA,GAAc,WACvB,MAAM,IAAI,MAAM,0CAA4CJ,EAAS,OAAO,QAAQZ,CAAI,CAAC,EAE3FM,EAAU,KAAKU,CAAS,CAC1B,CACF,CACF,CAOA,MAAM,UAAUQ,EAAqBC,EAAsB,CACzD,GAAI,OAAOD,GAAgB,UAAY,OAAOC,GAAiB,SAC7D,MAAM,IAAI,MAAM,kDAAkD,EAEpE,OAAID,IAAgBC,EACX,KAEA,KAAK,KAAKD,CAAW,CAEhC,CACF,EAEOE,EAAQf,GC7SR,IAAMgB,EAAU,CACrB,UAAW,EACX,IAAK,EACL,KAAM,EACN,QAAS,EACT,UAAW,EACX,WAAY,EACZ,aAAc,EACd,MAAO,EACP,OAAQ,EACR,MAAO,EACP,OAAQ,GACR,SAAU,GACV,OAAQ,GACR,SAAU,GACV,SAAU,GACV,QAAS,GACT,KAAM,GACN,KAAM,GACN,SAAU,GACV,OAAQ,GACR,YAAa,GACb,WAAY,EACd,EAEaC,GAAuB,CAAC,EACrC,OAAO,KAAKD,CAAO,EAAE,QAAQ,SAAUE,EAAM,CAC3CD,GAAYD,EAAsCE,CAAI,CAAC,EAAIA,CAC7D,CAAC,EAGM,IAAMC,EAAmC,CAE9C,aAAc,EACd,YAAa,EACb,QAAS,EACT,UAAW,GACX,cAAe,GACf,YAAa,IAEb,SAAU,MACV,QAAS,GAAK,GACd,UAAW,GAAK,GAChB,mBAAoB,GAAK,GACzB,mBAAoB,GAAK,GACzB,qBAAsB,GAAK,GAC3B,iBAAkB,GAAK,GACvB,eAAgB,GAAK,EACvB,EAEaC,GAAY,OAAO,KAAKD,CAAK,EAE1CA,EAAM,SACJA,EAAM,SACNA,EAAM,QACNA,EAAM,UACNA,EAAM,mBACNA,EAAM,mBACNA,EAAM,qBACNA,EAAM,iBACNA,EAAM,eAED,IAAME,GAAe,CAC1B,WACA,UACA,YACA,qBACA,qBACA,uBACA,mBACA,gBACF,ECxCA,SAASC,GAAiBC,EAA4F,CACpH,MAAI,CAACA,GAAW,CAAEA,EAAoC,eAC7C,CACL,eAAgBA,EAChB,QAAS,CAAC,EACV,2BAA4B,MAC9B,EAEKA,CACT,CAEO,SAASC,GACdC,EACAC,EACAC,EACgB,CAChB,GAAIA,GAAWA,EAAQ,OAAQ,CACxBF,GAAcG,EAAwB,QAAQ,EACnD,IAAMC,EAASJ,EAAO,UAAUE,EAAQ,OAAQD,CAAM,EACtD,MAAO,CACL,OAAQG,EAAO,aACf,cAAeA,EAAO,MACxB,CACF,CACA,OAAOF,GAAA,KAAAA,EAAW,CAAC,CACrB,CAEA,eAAeG,GAA+BC,EAAQC,EAA0C,CAC9F,GAAM,CAAE,KAAAC,EAAM,SAAAC,CAAS,EAAI,MAAMC,GAAYJ,EAAI,KAAMA,EAAI,SAAUC,CAAa,EAClF,OAAAD,EAAI,KAAOE,EACXF,EAAI,SAAWG,EACRH,CACT,CAEA,eAAsBI,GACpBF,EACAC,EACAF,EAC6D,CAC7D,IAAIH,EAASG,EAAc,cACvBI,EAAgBH,EAChBI,EAAgBH,EAAWA,EAAW,IAAM,GAE3CI,EAAS,YAAY,SAASF,CAAa,IAC9CA,EAAgBE,EAAS,YAAY,WAAW,OAAOF,CAAa,CAAC,EACrEC,EAAgBA,EAAgB,UAGlC,IAAME,EAAa,MAAMV,EAAO,QAAQO,CAAa,EACrD,OAAAC,EAAgBA,EAAgB,UAAYR,EAAO,UAE5C,CACL,KAAMU,EACN,SAAUF,CACZ,CACF,CAMA,eAAsBG,GAA8BT,EAAQJ,EAA8B,CAExF,IAAMc,EACJ,OAAOV,EAAI,MAAQ,UACnBO,EAAS,YAAY,SAASP,EAAI,IAAI,GACtCA,EAAI,OAAS,MACbA,EAAI,OAAS,OACT,CAAE,KAAAE,EAAM,SAAAC,CAAS,EAAIQ,GAAWX,EAAI,KAAMA,EAAI,SAAUU,CAAgB,EAK9E,OAHAV,EAAI,KAAOE,EACXF,EAAI,SAAWG,EAEXP,GAAW,MAASA,EAA0B,OACzCG,GAAQC,EAAKJ,CAAwB,EAErCI,CAEX,CAEO,SAASW,GACdT,EACAC,EACAO,EACoD,CACpD,GAAIA,EAEF,MAAO,CACL,KAAAR,EACA,SAAAC,CACF,EAGF,GAAUS,GAASV,CAAI,GAAK,MAAM,QAAQA,CAAI,EAE5C,MAAO,CACL,KAAM,KAAK,UAAUA,CAAI,EACzB,SAAUC,EAAWA,EAAW,QAAU,MAC5C,EAIF,MAAM,IAAIU,EAAU,2BAA4B,MAAO,GAAG,CAC5D,CAEA,eAAsBC,GACpBC,EACAC,EACe,CAGf,GAAM,CAAE,KAAAd,EAAM,SAAAC,EAAU,MAAAc,CAAM,EAAI,MAAMC,GAAWH,EAAQ,KAAMA,EAAQ,SAAUC,CAAY,EAI/F,GAHAD,EAAQ,KAAOb,EACfa,EAAQ,SAAWZ,EAEfc,EACF,MAAMA,CAEV,CAKA,eAAsBC,GACpBhB,EACAC,EACAa,EAKC,CACD,IAAMxB,EAAUD,GAAiByB,CAAY,EACzCG,EAAcjB,EACdkB,EAAclB,EACdI,EAAgBH,EAChBkB,EAEJ,GAAIlB,EAAU,CACZ,IAAMmB,EAASnB,EAAS,MAAM,GAAG,EAC7BoB,EACAC,EAAqBF,EAAO,OAC5BG,EAAQ,GAEZ,GAAI,CACF,MAAQF,EAA6BC,GAAsB,GAAG,CAE5D,IAAME,EAAQJ,EAAO,EAAEE,CAAkB,EAAE,MAAM,uBAAuB,EACxE,GAAI,CAACE,EAAO,MAEZ,OADAD,EAAQC,EAAM,CAAC,EACPD,EAAO,CACb,IAAK,SACHL,EAAcb,EAAS,YAAY,aAAa,OAAOa,CAAW,CAAC,EAC/DG,GAA8BD,EAAO,SACvCH,EAAcC,GAEhB,SACF,IAAK,QACHA,EAAcb,EAAS,YAAY,WAAWa,CAAW,EACzD,SACF,IAAK,OACHA,EAAc,KAAK,MAAMA,CAAW,EACpC,SACF,IAAK,SACH,GACE5B,EAAQ,gBAAkB,MAC1BA,EAAQ,eAAe,QACvBA,EAAQ,eAAe,cACvB,CACA,IAAMmC,EAAiBD,EAAM,CAAC,EAC5B5B,EAASN,EAAQ,eAAe,cAElC,GAAImC,GAAkB7B,EAAO,UAC3B,MAAM,IAAI,MAAM,yEAAyE,EAE3FsB,EAAc,MAAMtB,EAAO,QAAQsB,CAAW,EAC9C,QACF,KACE,OAAM,IAAI,MAAM,qDAAqD,EAEzE,IAAK,SACH,GAAI,CAAC5B,EAAQ,SAAW,CAACA,EAAQ,QAAQ,OACvC,MAAM,IAAIqB,EAAU,wEAAyE,MAAO,GAAG,EAEzG,GAAI,OAAO,YAAe,YACxB,MAAM,IAAIA,EACR,+EACA,MACA,GACF,EAEF,GAAI,CACF,IAAIe,EAAYpC,EAAQ,2BACpB,OAAOoC,GAAc,WACvBA,EAAYrB,EAAS,YAAY,WAAWqB,CAAS,GAIvD,IAAMC,EAAkBtB,EAAS,YAAY,SAASqB,CAAmB,EACzER,EAAcb,EAAS,YAAY,SAASa,CAAW,EAEvDA,EAAcb,EAAS,YAAY,wBACjCf,EAAQ,QAAQ,OAAO,OAAO4B,EAAaS,CAAe,CAC5D,EACAV,EAAcC,CAChB,OAASU,EAAG,CACV,MAAM,IAAIjB,EAAU,mCAAqCiB,EAAG,MAAO,GAAG,CACxE,CACA,SACF,QACE,MAAM,IAAI,MAAM,kBAAkB,CACtC,CACF,CACF,OAASA,EAAG,CACV,IAAMC,EAAMD,EACZT,EAAgB,IAAIR,EAClB,wBAAwBY,CAAK,qCAAgCM,EAAI,OAAO,SACxEA,EAAI,MAAQ,MACZ,GACF,CACF,QAAE,CACAzB,EACGiB,GAAyC,EAAI,KAAOD,EAAO,MAAM,EAAGC,CAA0B,EAAE,KAAK,GAAG,CAC7G,CACF,CAEA,OAAIF,EACK,CACL,MAAOA,EACP,KAAMD,EACN,SAAUd,CACZ,GAGFd,EAAQ,2BAA6B2B,EAC9B,CACL,KAAMC,EACN,SAAUd,CACZ,EACF,CAEO,SAAS0B,MAAiCC,EAAkB,CAIjE,IAAMC,EAASD,EAAK,OAAS,mBACvB,CAAE,KAAA/B,EAAM,SAAAC,CAAS,EAAIgC,GAAkB,KAAK,KAAM,KAAK,SAAUD,CAAM,EAE7E,OAAO,OAAO,OAAO,CAAC,EAAG,KAAM,CAAE,SAAA/B,EAAU,KAAAD,CAAK,CAAC,CACnD,CAQO,SAASiC,GACdjC,EACAC,EACA+B,EACoD,CACpD,MAAI,CAAChC,GAAQ,CAACK,EAAS,YAAY,SAASL,CAAI,EAEvC,CACL,KAAAA,EACA,SAAAC,CACF,EAGE+B,cAIK,CACL,KAAM3B,EAAS,YAAY,SAASL,CAAI,EACxC,SAAAC,CACF,EAIK,CACL,KAAMI,EAAS,YAAY,aAAaL,CAAI,EAC5C,SAAUC,EAAWA,EAAW,UAAY,QAC9C,CACF,CAEO,IAAMiC,GAAkB,CAC7B,YAAAhC,GACA,WAAAO,GACA,kBAAAwB,GACA,WAAAjB,EACF,EAGO,SAASmB,GAAyBC,EAAyB,CAChE,GAAM,CAAE,GAAAC,EAAI,aAAAC,EAAc,UAAAC,CAAU,EAAIH,EAEpCI,EACJ,OAAQJ,EAAO,OAAQ,CACrB,KAAKK,EAAQ,QAAS,CACpBD,EAAOJ,EAAO,SACd,KACF,CACA,KAAKK,EAAQ,SACb,KAAKA,EAAQ,KACXD,EAAOJ,EAAO,SACd,MACF,KAAKK,EAAQ,WACXD,EAAOJ,EAAO,YACd,MACF,KAAKK,EAAQ,OACb,KAAKA,EAAQ,YACXD,EAAOJ,EAAO,MACd,MACF,QACE,MAAM,IAAIzB,EAAU,qBAAuByB,EAAO,OAAQ,IAAO,GAAG,CACxE,CAEA,QAASM,EAAI,EAAGA,EAAIF,EAAK,OAAQE,IAAK,CACpC,IAAM5C,EAAM0C,EAAKE,CAAC,EACb5C,EAAI,eACPA,EAAI,aAAewC,GAEhBxC,EAAI,YACPA,EAAI,UAAYyC,GAEdF,GAAM,CAACvC,EAAI,KACbA,EAAI,GAAKuC,EAAK,IAAMK,EAExB,CACF,CAEO,SAASC,GAAOC,EAAQC,EAAa,CAC1C,IAAIC,EAAS,IAAMD,EACnB,QAAWE,KAAQH,EACbG,IAAS,OACP,OAAOH,EAAE,MAAQ,SACnBE,GAAU,UAAYF,EAAE,KACfvC,EAAS,YAAY,SAASuC,EAAE,IAAI,EAC7CE,GAAU,mBAAqBzC,EAAS,YAAY,aAAauC,EAAE,IAAI,EAC9D,OAAOA,EAAE,MAAS,cAC3BE,GAAU,iBAAmB,KAAK,UAAUF,EAAE,IAAI,GAE3CG,IAASA,IAAS,UAAYA,IAAS,aAChDD,GAAU,KAAOC,EAAO,IAAM,KAAK,UAAUH,EAAEG,CAAI,CAAC,EAC3CH,EAAEG,CAAI,IAAM,SACrBD,GAAU,KAAOC,EAAO,IAAMH,EAAEG,CAAI,GAGxC,OAAAD,GAAU,IACHA,CACT,CAEO,IAAeE,GAAf,KAA2B,CASlC,EC3WA,IAAMC,GAAN,KAAiB,CAoBf,YAAYC,EAAwB,CAqJpC,cAAWC,EACX,eAAYC,EACZ,YAASC,EACT,cAAWC,EACX,WAAQC,EACR,kBAAeC,EACf,qBAAkBC,GAlNpB,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAwDI,KAAK,uCAAwCT,EAAAR,EAAQ,UAAR,KAAAQ,EAAmB,KAEhE,KAAK,OAAS,IAAIL,EAClB,KAAK,OAAO,OAAOH,EAAQ,SAAUA,EAAQ,UAAU,EACvDG,EAAO,UACL,KAAK,OACLA,EAAO,UACP,eACA,kCAAoCF,EAAS,OAAO,QAAQD,CAAO,CACrE,EAEA,KAAK,UAAWU,GAAAD,EAAAT,EAAQ,UAAR,YAAAS,EAAiB,UAAjB,KAAAC,EAA4B,KAC5C,IAAMQ,EAAiB,KAAK,QAAUd,EAAS,iBAAiBJ,EAAS,KAAK,SAAU,KAAK,MAAM,EAGnG,GAAIkB,EAAc,IAAK,CACrB,IAAMC,EAAWD,EAAc,IAAI,MAAM,wBAAwB,EACjE,GAAI,CAACC,EAAU,CACb,IAAMC,EAAM,wBACZ,MAAAjB,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,eAAgBiB,CAAG,EAC7D,IAAIlB,EAAUkB,EAAK,MAAO,GAAG,CACrC,CACAF,EAAc,QAAUC,EAAS,CAAC,EAClCD,EAAc,UAAYC,EAAS,CAAC,CACtC,CAEA,GAAI,aAAcD,EAChB,GAAM,OAAOA,EAAc,UAAa,UAAYA,EAAc,WAAa,MAE1E,GAAIA,EAAc,WAAa,IAClC,MAAM,IAAIhB,EACR,qLACA,MACA,GACF,MANA,OAAM,IAAIA,EAAU,2CAA4C,MAAO,GAAG,EAS9EC,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,eAAgB,sBAAwBC,EAAS,OAAO,EAExG,KAAK,iBAAmB,KAExB,KAAK,iBAAmB,KACxB,KAAK,KAAO,IAAIiB,GAAK,IAAI,EACzB,KAAK,KAAO,IAAIC,EAAK,KAAMJ,CAAa,EAExC,KAAK,OAAQP,EAAAX,EAAQ,UAAR,MAAAW,EAAiB,KAAO,IAAIX,EAAQ,QAAQ,KAAK,IAAI,EAAI,KACtE,KAAK,SAAUa,GAAAD,EAAAZ,EAAQ,UAAR,YAAAY,EAAiB,SAAjB,KAAAC,EAA2B,KAC1C,KAAK,yBAA0BE,GAAAD,EAAAd,EAAQ,UAAR,YAAAc,EAAiB,sBAAjB,KAAAC,EAAwC,KACvE,KAAK,cAAeE,GAAAD,EAAAhB,EAAQ,UAAR,YAAAgB,EAAiB,cAAjB,KAAAC,EAAgC,IACtD,CAEA,IAAI,MAAa,CACf,OAAK,KAAK,OACRM,EAAwB,MAAM,EAEzB,KAAK,KACd,CAEA,IAAI,wBAAuD,CACzD,OAAK,KAAK,yBACRA,EAAwB,qBAAqB,EAExC,KAAK,uBACd,CAEA,IAAI,UAAW,CACb,OAAO,KAAK,KAAK,QACnB,CAEA,IAAI,MAAO,CACT,OAAO,KAAK,KAAK,IACnB,CAGA,QAAwC,CAlI1C,IAAAf,EAmII,OAAI,GAACA,EAAA,KAAK,QAAQ,UAAb,MAAAA,EAAsB,OAAQ,CAAC,KAAK,KAAK,cAC5Ce,EAAwB,MAAM,EAE3B,KAAK,UACR,KAAK,QAAU,KAAK,KAAK,YAAY,KAAK,IAAI,GAEzC,KAAK,OACd,CAEA,QAAQC,EAAc,CACpB,OAAOpB,EAAS,cAAc,KAAK,OAAO,EAAIoB,EAAO,IAAMpB,EAAS,QAAQ,KAAK,QAAS,EAAK,CACjG,CAEA,MAAM,MAAMqB,EAAwD,CAClE,OAAO,KAAK,KAAK,MAAMA,CAAM,CAC/B,CAEA,MAAM,KAAKA,EAAyC,CAClD,OAAO,KAAK,KAAK,KAAKA,CAAM,CAC9B,CAEA,MAAM,QACJC,EACAC,EACAC,EACAH,EACAI,EACAC,EACyC,CACzC,OAAO,KAAK,KAAK,QAAQJ,EAAQC,EAAMC,EAASH,EAAQI,EAAMC,CAAa,CAC7E,CAEA,aACEC,EACiF,CACjF,OAAO,KAAK,KAAK,aAAaA,CAAW,CAC3C,CAEA,cAAcC,EAAkD,CAC9D,OAAO,KAAK,KAAK,cAAcA,CAAQ,CACzC,CAEA,OAAOC,EAAiC,CACtC,KAAK,OAAO,OAAOA,EAAW,MAAOA,EAAW,OAAO,CACzD,CAQA,MAAM,aAAaC,EAAqC,CACtD,MAAI,CAAC,KAAK,gBAAgB,GAAKA,EACtB,KAAK,KAAK,EAGZ,KAAK,wBAAwB,CACtC,CAEA,yBAAkC,CAChC,OAAO,KAAK,IAAI,GAAK,KAAK,kBAAoB,EAChD,CAEA,iBAA2B,CACzB,OAAO,KAAK,mBAAqB,IACnC,CAcF,EAhLMnC,GAoKG,SAAWE,EAcpB,IAAOkC,GAAQpC,GCjKf,IAAMqC,GAAN,MAAMC,CAAc,CAUlB,QAAwB,CA9D1B,IAAAC,EAAAC,EAAAC,EA+DI,MAAO,CACL,GAAI,KAAK,GACT,aAAc,KAAK,aACnB,SAAU,KAAK,SACf,WAAY,KAAK,WACjB,SAAU,KAAK,SACf,SAAU,KAAK,SACf,oBAAqB,KAAK,oBAC1B,KAAM,CACJ,WAAWF,EAAA,KAAK,OAAL,YAAAA,EAAW,UACtB,OAAOC,EAAA,KAAK,OAAL,YAAAA,EAAW,MAClB,OAAOC,EAAA,KAAK,OAAL,YAAAA,EAAW,KACpB,CACF,CACF,CAEA,UAAmB,CA/ErB,IAAAF,EAAAC,EAAAC,EAAAC,EAgFI,IAAIC,EAAS,iBACb,OAAI,KAAK,KAAIA,GAAU,QAAU,KAAK,IAClC,KAAK,WAAUA,GAAU,cAAgB,KAAK,UAC9C,KAAK,aAAYA,GAAU,gBAAkB,KAAK,YAClD,KAAK,WAAUA,GAAU,cAAgB,KAAK,UAC9C,KAAK,WAAUA,GAAU,cAAgB,KAAK,UAC9C,KAAK,sBAAqBA,GAAU,yBAA2B,KAAK,UAAU,KAAK,mBAAmB,IACtGJ,EAAA,KAAK,OAAL,MAAAA,EAAW,YAAWI,GAAU,oBAAsB,KAAK,UAAU,KAAK,KAAK,SAAS,IACxFH,EAAA,KAAK,OAAL,MAAAA,EAAW,QAAOG,GAAU,gBAAkB,KAAK,KAAK,QACxDF,EAAA,KAAK,OAAL,MAAAA,EAAW,QAAOE,GAAU,gBAAkB,KAAK,UAAU,KAAK,KAAK,KAAK,IAC5ED,EAAA,KAAK,OAAL,MAAAA,EAAW,WAAUC,GAAU,mBAAqB,KAAK,KAAK,UAClEA,GAAU,IACHA,CACT,CAEA,OAAO,cAAcC,EAAeC,EAAyBC,EAAuB,CAClF,OAAaC,EAAWH,EAAMC,EAASC,CAAM,CAC/C,CAEA,OAAO,iBACLF,EACAC,EACAC,EACiC,CAKjC,OAJIA,IACFF,EAAaI,EAAWJ,EAAMC,EAASC,CAAM,GAG3C,MAAM,QAAQF,CAAI,EACbN,EAAc,gBAAgBM,CAAI,EAElCN,EAAc,WAAWM,CAAI,CAExC,CAEA,OAAO,WAAWK,EAAgD,CAChE,OAAAA,EAAO,MAAQA,EAAO,OAASC,EAAU,WAAWD,EAAO,KAAgC,EACpF,OAAO,OAAO,IAAIX,EAAiBW,CAAM,CAClD,CAEA,OAAO,gBAAgBE,EAAoC,CACzD,OAAO,OAAO,OAAO,IAAIb,EAAiBa,CAAM,CAClD,CAEA,OAAO,gBAAgBF,EAAyD,CAC9E,IAAMG,EAAQH,EAAO,OACnBN,EAAS,IAAI,MAAMS,CAAK,EAC1B,QAASC,EAAI,EAAGA,EAAID,EAAOC,IAAKV,EAAOU,CAAC,EAAIf,EAAc,WAAWW,EAAOI,CAAC,CAAC,EAC9E,OAAOV,CACT,CACF,EAEOW,GAAQjB,GCzHf,eAAekB,GACbC,EACAC,EACAC,EACAC,EAC4B,CAC5B,GAAIH,EAAO,KAAK,oBAAqB,CACnC,IAAMI,EAAc,MAAMJ,EAAO,KAAK,eAAe,EACrD,OAAOG,EAAiBE,EAAMD,EAAcH,CAAO,EAAGC,CAAM,CAC9D,KAAO,CACL,IAAMI,EAAa,MAAMN,EAAO,KAAK,cAAc,EACnD,OAAOG,EAAWF,EAAeI,EAAMC,EAAaJ,CAAM,CAAC,CAC7D,CACF,CAEA,SAASK,GACPC,EACAC,EACAC,EACmB,CACnB,GAAIF,EAAO,KAAO,CAACA,EAAO,KACxB,MAAO,CAAE,IAAKA,EAAO,GAAI,EAG3B,GAAIA,EAAO,aAAeG,GAAgB,UACxC,OAAOC,EAAAC,EAAA,GAAKL,GAAL,CAAa,KAAM,CAAC,EAAU,SAAU,EAAK,GAGtD,IAAIM,EAAON,EAAO,KAElB,GAAI,CAACA,EAAO,SACV,GAAI,CACFM,EAAaC,EAAWD,EAAML,EAASC,CAAM,CAC/C,OAASM,EAAG,CACV,OAAUC,GAA8BD,CAAC,EAChC,CAAE,IAAKA,CAAE,EAET,CAAE,IAAK,IAAIE,EAAuBC,EAAaH,CAAC,EAAG,IAAI,CAAE,CAEpE,CAGF,GAAI,CAACF,EACH,MAAO,CAAE,IAAK,IAAII,EAAiB,yCAA0C,IAAI,CAAE,EAGrF,GAAM,CAAE,WAAYE,EAAmB,SAAAC,EAAU,QAASC,CAAe,EAAIR,EAE7E,GAAIM,IAAsB,OAExB,OAAOR,EAAAC,EAAA,GAAKL,GAAL,CAAa,KAAAM,EAAM,SAAU,EAAK,GAG3C,GAAIM,EAAoB,KAAOA,GAAqB,IAAK,CAEvD,IAAIG,EAAcF,GAAYA,EAAS,OAAUb,EAAO,IACxD,OAAKe,IACHA,EAAa,IAAI,MAAM,yBAA2BT,CAAI,EACtDS,EAAW,WAAaH,GAEnB,CAAE,IAAKG,EAAY,KAAMF,EAAU,QAASC,EAAgB,SAAU,GAAM,WAAYF,CAAkB,CACnH,CAEA,MAAO,CAAE,IAAKZ,EAAO,IAAK,KAAMa,EAAU,QAASC,EAAgB,SAAU,GAAM,WAAYF,CAAkB,CACnH,CAEA,SAASI,GACPhB,EACAiB,EACAC,EACAxB,EACAyB,EACA,CACInB,EAAO,IACToB,EAAO,UACLD,EACAC,EAAO,UACP,YAAcH,EAAS,KACvB,mBAAqBI,GAAqBH,EAAMxB,CAAM,EAAI,YAAoBiB,EAAaX,EAAO,GAAG,CACvG,EAEAoB,EAAO,UACLD,EACAC,EAAO,UACP,YAAcH,EAAS,KACvB,aACEI,GAAqBH,EAAMxB,CAAM,EACjC,cACA4B,GAAYtB,EAAO,OAA8B,EACjD,iBACAA,EAAO,WACP,YACCuB,EAAS,YAAY,SAASvB,EAAO,IAAI,EACtC,cAAgBuB,EAAS,YAAY,aAAavB,EAAO,IAAI,EAC7D,KAAOuB,EAAS,OAAO,QAAQvB,EAAO,IAAI,EAClD,CAEJ,CAgBA,IAAMwB,GAAN,MAAMC,CAAS,CAsBb,aAAa,IACXjC,EACA0B,EACAzB,EACAC,EACAgC,EACAC,EACkD,CAClD,OAAOF,EAAS,GAAGG,EAAY,IAAKpC,EAAQ0B,EAAM,KAAMzB,EAASC,EAAQgC,EAAUC,GAAA,KAAAA,EAAc,EAAK,CACxG,CAuBA,aAAa,OACXnC,EACA0B,EACAzB,EACAC,EACAgC,EACAC,EACkD,CAClD,OAAOF,EAAS,GAAGG,EAAY,OAAQpC,EAAQ0B,EAAM,KAAMzB,EAASC,EAAQgC,EAAUC,CAAU,CAClG,CAyBA,aAAa,KACXnC,EACA0B,EACAZ,EACAb,EACAC,EACAgC,EACAC,EACkD,CAClD,OAAOF,EAAS,GAAGG,EAAY,KAAMpC,EAAQ0B,EAAMZ,EAAMb,EAASC,EAAQgC,EAAUC,CAAU,CAChG,CAyBA,aAAa,MACXnC,EACA0B,EACAZ,EACAb,EACAC,EACAgC,EACAC,EACkD,CAClD,OAAOF,EAAS,GAAGG,EAAY,MAAOpC,EAAQ0B,EAAMZ,EAAMb,EAASC,EAAQgC,EAAUC,CAAU,CACjG,CAyBA,aAAa,IACXnC,EACA0B,EACAZ,EACAb,EACAC,EACAgC,EACAC,EACkD,CAClD,OAAOF,EAAS,GAAGG,EAAY,IAAKpC,EAAQ0B,EAAMZ,EAAMb,EAASC,EAAQgC,EAAUC,CAAU,CAC/F,CAEA,aAAa,GACXV,EACAzB,EACA0B,EACAZ,EACAb,EACAC,EACAgC,EACAC,EACkD,CAC9CD,KACDhC,EAASA,GAAU,CAAC,GAAG,SAAcgC,GAGxC,IAAMP,EAAS3B,EAAO,OAEtB,eAAeqC,EAEbpC,EACAC,EAC4B,CA1TlC,IAAAoC,EA2TM,GAAIX,EAAO,UAAUC,EAAO,SAAS,EAAG,CACtC,IAAIW,EAAczB,EAClB,KAAIwB,EAAArC,EAAQ,cAAc,IAAtB,YAAAqC,EAAyB,QAAQ,YAAa,EAChD,GAAI,CACGtC,EAAO,UACJwC,EAAwB,SAAS,EAEzCD,EAAcvC,EAAO,SAAS,OAAOc,CAAc,CACrD,OAAS2B,EAAW,CAClBb,EAAO,UACLD,EACAC,EAAO,UACP,YAAcH,EAAS,KACvB,mCAA2CN,EAAasB,CAAS,CACnE,CACF,CAEFb,EAAO,UACLD,EACAC,EAAO,UACP,YAAcH,EAAS,KACvB,YAAcI,GAAqBH,EAAMxB,CAAM,EAAI,WAAaqC,CAClE,CACF,CAEA,IAAMG,EAAa,MAAM1C,EAAO,KAAK,GAAGyB,EAAQC,EAAMzB,EAASa,EAAMZ,CAAM,EAE3E,OAAIwC,EAAW,OAASC,EAAK,WAAWD,EAAW,KAAkB,GAEnE,MAAM1C,EAAO,KAAK,UAAU,KAAM,IAAI,EAE/BD,GAAgBC,EAAQC,EAASC,EAAQmC,CAAS,GAGpD,CACL,IAAKK,EAAW,MAChB,KAAMA,EAAW,KACjB,QAASA,EAAW,QACpB,SAAUA,EAAW,SACrB,WAAYA,EAAW,UACzB,CACF,CAEA,IAAIlC,EAAS,MAAMT,GAAmBC,EAAQC,EAASC,EAAQmC,CAAS,EAUxE,GARIH,IACF1B,EAASD,GAAWC,EAAQR,EAAO,SAAUkC,CAAQ,GAGnDP,EAAO,UAAUC,EAAO,SAAS,GACnCJ,GAAUhB,EAAQiB,EAAQC,EAAMxB,EAAQyB,CAAM,EAG5CQ,EAAY,CACd,GAAI3B,EAAO,IACT,MAAMA,EAAO,IACR,CACL,IAAMa,EAAqFR,EAAA,GAAKL,GAChG,cAAOa,EAAS,IACTA,CACT,CACF,CAEA,OAAOb,CACT,CACF,EAEOoC,EAAQZ,GCpXf,SAASa,GAAaC,EAAiB,CACrC,IAAMC,EAAWD,EAAQ,MAAM,mBAAmB,EAClD,OAAOC,GAAYA,EAAS,CAAC,GAAWC,GAAiBD,EAAS,CAAC,CAAC,CACtE,CAEA,SAASE,GAAcC,EAAoC,CACrD,OAAOA,GAAc,WAAUA,EAAaA,EAAW,MAAM,GAAG,GAEpE,IAAMC,EAAoD,CAAC,EAC3D,QAASC,EAAI,EAAGA,EAAIF,EAAW,OAAQE,IAAK,CAC1C,IAAMC,EAAYH,EAAWE,CAAC,EAAE,MAAM,4BAA4B,EAClE,GAAIC,EAAW,CACb,IAAMC,EAAST,GAAaQ,EAAU,CAAC,CAAC,EACpCC,IAAQH,EAAUE,EAAU,CAAC,CAAC,EAAIC,EACxC,CACF,CACA,OAAOH,CACT,CAEA,SAASI,GAAcC,EAAwBC,EAAeC,EAAkB,CAK9E,MAAO,EAAEA,IAAWD,GAAQ,OAAOD,EAAI,MAAS,UAClD,CAEA,IAAMG,GAAN,KAAwB,CAQtB,YACEC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA,CACA,KAAK,OAASL,EACd,KAAK,KAAOC,EACZ,KAAK,QAAUC,EACf,KAAK,SAAWC,GAAA,KAAAA,EAAY,KAC5B,KAAK,YAAcC,EACnB,KAAK,yBAA2BC,GAA4B,EAC9D,CAEA,IAAI,QAAiB,CACnB,OAAO,KAAK,OAAO,MACrB,CAEA,MAAM,IAAYX,EAA0D,CAC1E,IAAMY,EAAS,MAAMC,EAAS,IAAQ,KAAK,OAAQ,KAAK,KAAM,KAAK,QAASb,EAAQ,KAAK,SAAU,EAAK,EACxG,OAAO,KAAK,WAAWY,CAAM,CAC/B,CAEA,MAAM,OAAeZ,EAA0D,CAC7E,IAAMY,EAAS,MAAMC,EAAS,OAAW,KAAK,OAAQ,KAAK,KAAM,KAAK,QAASb,EAAQ,KAAK,SAAU,EAAK,EAC3G,OAAO,KAAK,WAAWY,CAAM,CAC/B,CAEA,MAAM,KAAaZ,EAA4BG,EAAwD,CACrG,IAAMS,EAAS,MAAMC,EAAS,KAAS,KAAK,OAAQ,KAAK,KAAMV,EAAM,KAAK,QAASH,EAAQ,KAAK,SAAU,EAAK,EAC/G,OAAO,KAAK,WAAWY,CAAM,CAC/B,CAEA,MAAM,IAAYZ,EAA4BG,EAAwD,CACpG,IAAMS,EAAS,MAAMC,EAAS,IAAQ,KAAK,OAAQ,KAAK,KAAMV,EAAM,KAAK,QAASH,EAAQ,KAAK,SAAU,EAAK,EAC9G,OAAO,KAAK,WAAWY,CAAM,CAC/B,CAEA,MAAM,MAAcZ,EAA4BG,EAAwD,CACtG,IAAMS,EAAS,MAAMC,EAAS,MAAU,KAAK,OAAQ,KAAK,KAAMV,EAAM,KAAK,QAASH,EAAQ,KAAK,SAAU,EAAK,EAChH,OAAO,KAAK,WAAWY,CAAM,CAC/B,CAEA,MAAM,WAAcA,EAAwD,CAC1E,GAAIA,EAAO,KAAOX,GAAcW,EAAO,IAAKA,EAAO,KAAM,KAAK,wBAAwB,EACpF,MAAAE,EAAO,UACL,KAAK,OACLA,EAAO,UACP,iCACA,4CAAoDC,EAAaH,EAAO,GAAG,CAC7E,EACMA,EAAO,IAGf,IAAII,EAAOpB,EAAYC,EAEvB,GAAI,CACFmB,EACEJ,EAAO,YAAcK,GAAgB,UACjC,CAAC,EACD,MAAM,KAAK,YAAYL,EAAO,KAAMA,EAAO,SAAW,CAAC,EAAGA,EAAO,QAAQ,CACjF,OAASM,EAAG,CAGV,MAAMN,EAAO,KAAOM,CACtB,CAMA,OAJIN,EAAO,UAAYhB,EAAagB,EAAO,QAAQ,MAAWA,EAAO,QAAQ,QAC3Ef,EAAYF,GAAcC,CAAU,GAGlC,KAAK,yBACA,IAAIuB,GACT,KACAH,EACAJ,EAAO,SAAW,CAAC,EACnBA,EAAO,WACPf,EACAe,EAAO,GACT,EAEO,IAAIQ,GAAgB,KAAMJ,EAAOnB,CAAS,CAErD,CACF,EAEauB,GAAN,KAAyB,CAK9B,YAAYC,EAA6BL,EAAYnB,EAAiC,CACpF,KAAK,SAAWwB,EAChB,KAAK,MAAQL,EACb,KAAK,WAAanB,CACpB,CAEA,MAAM,OAAqC,CACzC,GAAI,KAAK,SAAS,EAChB,OAAO,KAAK,IAAI,KAAK,WAAY,KAAK,EAGxC,MAAM,IAAIyB,EAAU,uCAAwC,MAAO,GAAG,CACxE,CAEA,MAAM,SAAuC,CAC3C,GAAI,KAAK,WAAW,EAClB,OAAO,KAAK,IAAI,KAAK,WAAY,OAAO,EAG1C,MAAM,IAAIA,EAAU,yCAA0C,MAAO,GAAG,CAC1E,CAEA,MAAM,MAA2C,CAC/C,OAAI,KAAK,QAAQ,EACR,KAAK,IAAI,KAAK,WAAY,IAAI,EAGhC,IACT,CAEA,UAAoB,CAClB,OAAO,KAAK,YAAc,MAAQ,UAAW,KAAK,UACpD,CAEA,YAAsB,CACpB,OAAO,KAAK,YAAc,MAAQ,YAAa,KAAK,UACtD,CAEA,SAAmB,CACjB,OAAO,KAAK,YAAc,MAAQ,SAAU,KAAK,UACnD,CAEA,QAAkB,CAChB,MAAO,CAAC,KAAK,QAAQ,CACvB,CAIA,MAAM,IAAItB,EAA0C,CAClD,IAAMuB,EAAM,KAAK,SACXX,EAAS,MAAMC,EAAS,IAAOU,EAAI,OAAQA,EAAI,KAAMA,EAAI,QAASvB,EAAQuB,EAAI,SAAU,EAAK,EACnG,OAAOA,EAAI,WAAWX,CAAM,CAC9B,CACF,EAEaO,GAAN,cAAuCC,EAAmB,CAO/D,YACEC,EACAL,EACAR,EACAgB,EACA3B,EACAK,EACA,CACA,MAAMmB,EAAUL,EAAOnB,CAAS,EAChC,KAAK,WAAa2B,EAClB,KAAK,QAAUA,EAAa,KAAOA,GAAc,IACjD,KAAK,QAAUhB,EACf,KAAK,UAAYN,GAAOA,EAAI,KAC5B,KAAK,aAAeA,GAAOA,EAAI,OACjC,CAEA,QAAS,CACP,MAAO,CACL,MAAO,KAAK,MACZ,WAAY,KAAK,WACjB,QAAS,KAAK,QACd,QAAS,KAAK,QACd,UAAW,KAAK,UAChB,aAAc,KAAK,YACrB,CACF,CACF,EAEOuB,EAAQpB,GC3Nf,IAAMqB,GAAN,MAAMA,EAAwB,CAY5B,QAAwC,CACtC,MAAO,CACL,QAAS,KAAK,QACd,SAAU,KAAK,SACf,SAAU,KAAK,QACjB,CACF,CAEA,UAAmB,CACjB,IAAIC,EAAS,2BACb,OAAI,KAAK,UAASA,GAAU,aAAe,KAAK,SAC5C,KAAK,WAAUA,GAAU,cAAgB,KAAK,UAC9C,KAAK,WAAUA,GAAU,cAAgB,KAAK,UAClDA,GAAU,IACHA,CACT,CAIA,OAAO,iBACLC,EACAC,EACAC,EACqD,CAKrD,OAJIA,IACFF,EAAaG,EAAWH,EAAMC,EAASC,CAAM,GAG3C,MAAM,QAAQF,CAAI,EACbF,GAAwB,gBAAgBE,CAAI,EAE5CF,GAAwB,WAAWE,CAAI,CAElD,CAEA,OAAO,WAAWI,EAA0D,CAC1E,OAAO,OAAO,OAAO,IAAIN,GAA2BM,CAAM,CAC5D,CAEA,OAAO,gBAAgBA,EAAmE,CACxF,IAAMC,EAAQD,EAAO,OACnBL,EAAS,IAAI,MAAMM,CAAK,EAC1B,QAASC,EAAI,EAAGA,EAAID,EAAOC,IAAKP,EAAOO,CAAC,EAAIR,GAAwB,WAAWM,EAAOE,CAAC,CAAC,EACxF,OAAOP,CACT,CACF,EAzDMD,GA6BG,cAAsBS,EA7B/B,IAAMC,GAANV,GA2DOW,GAAQD,GCnDf,IAAME,GAAN,KAAW,CAMT,YAAYC,EAAoB,CAvBlC,IAAAC,EAwBI,KAAK,OAASD,EACd,KAAK,MAAQ,IAAIE,GAAMF,CAAM,EACzBG,EAAS,OAAO,QAAQF,EAAAD,EAAO,QAAQ,UAAf,MAAAC,EAAwB,QAClD,KAAK,aAAe,IAAID,EAAO,QAAQ,QAAQ,KAAK,uBAAuBA,CAAM,EACjF,KAAK,YAAcA,EAAO,QAAQ,QAAQ,KAAK,mBAAmBI,EAAa,EAEnF,CAEA,MAAM,SAASC,EAAqCC,EAAoC,CACtF,MAAM,IAAI,QAAc,CAACC,EAASC,IAAW,CAjCjD,IAAAP,EAkCM,GAAI,GAACA,EAAA,KAAK,OAAO,QAAQ,UAApB,MAAAA,EAA6B,MAAM,CACtCO,EAAaC,GAAyB,MAAM,CAAC,EAC7C,MACF,CACA,GAAI,CAAC,KAAK,aAAc,CACtBD,EAAO,IAAIE,EAAU,mEAAoE,IAAO,GAAG,CAAC,EACpG,MACF,CACA,GAAI,KAAK,aAAa,kBAAmB,CACvCF,EAAO,IAAIE,EAAU,iCAAkC,IAAO,GAAG,CAAC,EAClE,MACF,CACA,KAAK,aAAa,kBAAqBC,GAAmB,CACxD,GAAIA,EAAK,CACPH,EAAOG,CAAG,EACV,MACF,CACAJ,EAAQ,CACV,EACA,KAAK,aAAa,qBAAuBD,EACzC,KAAK,aAAa,YAChB,IAAI,KAAK,OAAO,QAAQ,QAAQ,KAAK,eAAe,KAAK,aAAcD,CAAgB,CACzF,CACF,CAAC,CACH,CAEA,MAAM,WAAWO,EAAwC,CACvD,MAAM,IAAI,QAAc,CAACL,EAASC,IAAW,CA7DjD,IAAAP,EA8DM,GAAI,GAACA,EAAA,KAAK,OAAO,QAAQ,UAApB,MAAAA,EAA6B,MAAM,CACtCO,EAAaC,GAAyB,MAAM,CAAC,EAC7C,MACF,CACA,GAAI,CAAC,KAAK,aAAc,CACtBD,EAAO,IAAIE,EAAU,mEAAoE,IAAO,GAAG,CAAC,EACpG,MACF,CACA,GAAI,KAAK,aAAa,oBAAqB,CACzCF,EAAO,IAAIE,EAAU,mCAAoC,IAAO,GAAG,CAAC,EACpE,MACF,CACA,KAAK,aAAa,oBAAuBC,GAAmB,CAC1D,GAAIA,EAAK,CACPH,EAAOG,CAAG,EACV,MACF,CACAJ,EAAQ,CACV,EACA,KAAK,aAAa,YAChB,IAAI,KAAK,OAAO,QAAQ,QAAQ,KAAK,iBAAiB,KAAK,aAAcK,CAAkB,CAC7F,CACF,CAAC,CACH,CACF,EAEMV,GAAN,KAAY,CAKV,YAAYF,EAAoB,CAC9B,KAAK,OAASA,EACd,KAAK,oBAAsB,IAAIa,GAAoBb,CAAM,EACzD,KAAK,qBAAuB,IAAIc,GAAqBd,CAAM,CAC7D,CAEA,MAAM,QAAQe,EAAgBC,EAA6B,CACzD,IAAMhB,EAAS,KAAK,OACdiB,EAASjB,EAAO,QAAQ,mCAC5BkB,EAAUC,EAAS,mBAAmBnB,EAAO,QAAS,CAAE,OAAAiB,CAAO,CAAC,EAChEG,EAAS,CAAC,EACNC,EAAaC,EAAM,CAAE,UAAWP,CAAU,EAAGC,CAAO,EAEpDM,EAAMJ,EAASlB,EAAO,QAAQ,OAAO,EAEvCA,EAAO,QAAQ,cAAoBsB,EAAMF,EAAQ,CAAE,SAAU,MAAO,CAAC,EAEzE,IAAMG,EAAoBC,EAAWH,EAAMrB,EAAO,SAAUiB,CAAM,EAClE,MAAMQ,EAAS,KAAKzB,EAAQ,gBAAiBuB,EAAaL,EAASE,EAAQ,KAAM,EAAI,CACvF,CACF,EAEMP,GAAN,KAA0B,CAGxB,YAAYb,EAAoB,CAC9B,KAAK,OAASA,CAChB,CAEA,MAAM,KAAK0B,EAAqC,CAC9C,IAAM1B,EAAS,KAAK,OACdqB,EAAOjB,GAAc,WAAWsB,CAAM,EACtCT,EAASjB,EAAO,QAAQ,mCAC5BkB,EAAUC,EAAS,mBAAmBnB,EAAO,QAAS,CAAE,OAAAiB,CAAO,CAAC,EAChEG,EAAS,CAAC,EAENE,EAAMJ,EAASlB,EAAO,QAAQ,OAAO,EAEvCA,EAAO,QAAQ,cAAoBsB,EAAMF,EAAQ,CAAE,SAAU,MAAO,CAAC,EAEzE,IAAMG,EAAoBC,EAAWH,EAAMrB,EAAO,SAAUiB,CAAM,EAC5DU,EAAW,MAAMF,EAAS,IAC9BzB,EACA,6BAA+B,mBAAmB0B,EAAO,EAAE,EAC3DH,EACAL,EACAE,EACA,KACA,EACF,EAEA,OAAOhB,GAAc,iBACnBuB,EAAS,KACT3B,EAAO,SACP2B,EAAS,SAAW,OAAYV,CAClC,CACF,CAEA,MAAM,IAAIW,EAAgD,CACxD,IAAM5B,EAAS,KAAK,OAClBiB,EAASjB,EAAO,QAAQ,mCACxBkB,EAAUC,EAAS,kBAAkBnB,EAAO,QAAS,CAAE,OAAAiB,CAAO,CAAC,EAC/DY,EAAWD,EAAkB,IAAMA,EAErC,GAAI,OAAOC,GAAa,UAAY,CAACA,EAAS,OAC5C,MAAM,IAAInB,EACR,uFACA,IACA,GACF,EAGIY,EAAMJ,EAASlB,EAAO,QAAQ,OAAO,EAE3C,IAAM2B,EAAW,MAAMF,EAAS,IAC9BzB,EACA,6BAA+B,mBAAmB6B,CAAQ,EAC1DX,EACA,CAAC,EACD,KACA,EACF,EAEA,OAAOd,GAAc,iBACnBuB,EAAS,KACT3B,EAAO,SACP2B,EAAS,SAAW,OAAYV,CAClC,CACF,CAEA,MAAM,KAAKG,EAAgD,CACzD,IAAMpB,EAAS,KAAK,OAClBiB,EAASjB,EAAO,QAAQ,mCACxB8B,EAAW,KAAK,OAAO,KAAK,oBAAsB,OAAYb,EAC9DC,EAAUC,EAAS,kBAAkBnB,EAAO,QAAS,CAAE,OAAAiB,CAAO,CAAC,EAEjE,OAAMK,EAAMJ,EAASlB,EAAO,QAAQ,OAAO,EAEpC,IAAI+B,EAAkB/B,EAAQ,4BAA6BkB,EAASY,EAAU,eACnFT,EACAH,EACAc,EACA,CACA,OAAO5B,GAAc,iBACnBiB,EACArB,EAAO,SACPgC,EAAW,OAAYf,CACzB,CACF,CAAC,EAAE,IAAIG,CAAM,CACf,CAEA,MAAM,OAAOQ,EAAuC,CAClD,IAAM5B,EAAS,KAAK,OAClBiB,EAASjB,EAAO,QAAQ,mCACxBkB,EAAUC,EAAS,kBAAkBnB,EAAO,QAAS,CAAE,OAAAiB,CAAO,CAAC,EAC/DG,EAAS,CAAC,EACVS,EAAWD,EAAkB,IAAMA,EAErC,GAAI,OAAOC,GAAa,UAAY,CAACA,EAAS,OAC5C,MAAM,IAAInB,EACR,0FACA,IACA,GACF,EAGIY,EAAMJ,EAASlB,EAAO,QAAQ,OAAO,EAEvCA,EAAO,QAAQ,cAAoBsB,EAAMF,EAAQ,CAAE,SAAU,MAAO,CAAC,EAEzE,MAAMK,EAAS,OACbzB,EACA,6BAA+B,mBAAmB6B,CAAQ,EAC1DX,EACAE,EACA,KACA,EACF,CACF,CAEA,MAAM,YAAYA,EAA4B,CAC5C,IAAMpB,EAAS,KAAK,OAClBiB,EAASjB,EAAO,QAAQ,mCACxBkB,EAAUC,EAAS,kBAAkBnB,EAAO,QAAS,CAAE,OAAAiB,CAAO,CAAC,EAE3DK,EAAMJ,EAASlB,EAAO,QAAQ,OAAO,EAEvCA,EAAO,QAAQ,cAAoBsB,EAAMF,EAAQ,CAAE,SAAU,MAAO,CAAC,EAEzE,MAAMK,EAAS,OAAUzB,EAAQ,4BAA6BkB,EAASE,EAAQ,KAAM,EAAI,CAC3F,CACF,EAEMN,GAAN,MAAMmB,CAAqB,CAGzB,YAAYjC,EAAoB,CAmEhC,YAASiC,EAAqB,UAAU,YAlEtC,KAAK,OAASjC,CAChB,CAEA,MAAM,KAAKkC,EAAyE,CAClF,IAAMlC,EAAS,KAAK,OACdqB,EAAOc,GAAwB,WAAWD,CAAY,EACtDjB,EAASjB,EAAO,QAAQ,mCAC5BkB,EAAUC,EAAS,mBAAmBnB,EAAO,QAAS,CAAE,OAAAiB,CAAO,CAAC,EAChEG,EAAS,CAAC,EAENE,EAAMJ,EAASlB,EAAO,QAAQ,OAAO,EAEvCA,EAAO,QAAQ,cAAoBsB,EAAMF,EAAQ,CAAE,SAAU,MAAO,CAAC,EAEzE,IAAMG,EAAoBC,EAAWH,EAAMrB,EAAO,SAAUiB,CAAM,EAC5DU,EAAW,MAAMF,EAAS,KAC9BzB,EACA,6BACAuB,EACAL,EACAE,EACA,KACA,EACF,EAEA,OAAOe,GAAwB,iBAC7BR,EAAS,KACT3B,EAAO,SACP2B,EAAS,SAAW,OAAYV,CAClC,CACF,CAEA,MAAM,KAAKG,EAAgD,CACzD,IAAMpB,EAAS,KAAK,OAClBiB,EAASjB,EAAO,QAAQ,mCACxB8B,EAAW,KAAK,OAAO,KAAK,oBAAsB,OAAYb,EAC9DC,EAAUC,EAAS,kBAAkBnB,EAAO,QAAS,CAAE,OAAAiB,CAAO,CAAC,EAEjE,OAAMK,EAAMJ,EAASlB,EAAO,QAAQ,OAAO,EAEpC,IAAI+B,EAAkB/B,EAAQ,6BAA8BkB,EAASY,EAAU,eACpFT,EACAH,EACAc,EACA,CACA,OAAOG,GAAwB,iBAC7Bd,EACArB,EAAO,SACPgC,EAAW,OAAYf,CACzB,CACF,CAAC,EAAE,IAAIG,CAAM,CACf,CAEA,MAAM,YAAYA,EAA4B,CAC5C,IAAMpB,EAAS,KAAK,OAClBiB,EAASjB,EAAO,QAAQ,mCACxBkB,EAAUC,EAAS,kBAAkBnB,EAAO,QAAS,CAAE,OAAAiB,CAAO,CAAC,EAE3DK,EAAMJ,EAASlB,EAAO,QAAQ,OAAO,EAEvCA,EAAO,QAAQ,cAAoBsB,EAAMF,EAAQ,CAAE,SAAU,MAAO,CAAC,EAEzE,MAAMK,EAAS,OAAUzB,EAAQ,6BAA8BkB,EAASE,EAAQ,KAAM,EAAI,CAC5F,CAKA,MAAM,aAAaA,EAAgD,CACjE,IAAMpB,EAAS,KAAK,OAClBiB,EAASjB,EAAO,QAAQ,mCACxB8B,EAAW,KAAK,OAAO,KAAK,oBAAsB,OAAYb,EAC9DC,EAAUC,EAAS,kBAAkBnB,EAAO,QAAS,CAAE,OAAAiB,CAAO,CAAC,EAEjE,OAAMK,EAAMJ,EAASlB,EAAO,QAAQ,OAAO,EAEvCA,EAAO,QAAQ,cAAoBsB,EAAMF,EAAQ,CAAE,SAAU,MAAO,CAAC,EAElE,IAAIW,EAAkB/B,EAAQ,iBAAkBkB,EAASY,EAAU,eAAgBT,EAAMH,EAASc,EAAU,CACjH,IAAMI,EACJ,CAACJ,GAAYf,EAAeoB,EAAWhB,EAAMrB,EAAO,SAAUiB,CAAM,EAAII,EAG1E,QAASiB,EAAI,EAAGA,EAAIF,EAAW,OAAQE,IACrCF,EAAWE,CAAC,EAAI,OAAOF,EAAWE,CAAC,CAAC,EAEtC,OAAOF,CACT,CAAC,EAAE,IAAIhB,CAAM,CACf,CACF,EAEOmB,GAAQxC,GCzUf,IAAMyC,GAAU,CAAC,SAAU,UAAW,QAAS,QAAS,QAAQ,EAEhE,eAAsBC,GACpBC,EACAC,EACAC,EACAC,EAC0B,CAC1B,IAAMC,EAAUC,GAAuBJ,EAAQD,EAAQG,GAAA,KAAAA,EAAgB,IAAI,EAE3E,OADYG,GAAoB,WAAWJ,CAAO,EACvC,OAAOE,EAASJ,CAAM,CACnC,CAEA,eAAsBO,GACpBP,EACAC,EACAO,EACAJ,EAC4B,CAC5B,OAAO,QAAQ,IACbI,EAAa,IAAI,SAAUN,EAAS,CAClC,OAAOH,GAAYC,EAAQC,EAAQC,EAASE,CAAO,CACrD,CAAC,CACH,CACF,CAIA,eAAsBK,GACpBP,EACAQ,EAC0B,CAC1B,OAAOJ,GAAoB,WAAWJ,CAAO,EAAE,OAAOQ,EAAQ,eAAgBA,EAAQ,MAAM,CAC9F,CAEA,eAAsBC,GACpBH,EACAE,EAC4B,CAC5B,OAAO,QAAQ,IACbF,EAAa,IAAI,SAAUN,EAAS,CAClC,OAAOO,GAAaP,EAASQ,CAAO,CACtC,CAAC,CACH,CACF,CAOA,IAAME,GAAN,MAAMC,UAAwBC,EAAY,CAQxC,eAAyB,CACvB,MAAI,CAAC,KAAK,IAAM,CAAC,KAAK,aACb,GAEF,KAAK,GAAG,UAAU,KAAK,aAAa,OAAQ,CAAC,IAAM,KAAK,YACjE,CAGA,SAAsE,CACpE,GAAI,CAAC,KAAK,GAAI,MAAM,IAAI,MAAM,oDAAoD,EAClF,IAAMC,EAAQ,KAAK,GAAG,MAAM,GAAG,EAC/B,MAAO,CACL,aAAcA,EAAM,CAAC,EACrB,UAAW,SAASA,EAAM,CAAC,EAAG,EAAE,EAChC,MAAO,SAASA,EAAM,CAAC,EAAG,EAAE,CAC9B,CACF,CAEA,MAAM,OAAOC,EAAsD,CACjE,IAAMC,EAAM,OAAO,OAAO,IAAIC,GAAuB,KAAM,CACzD,OAAQC,GAAQ,QAAQ,KAAK,QAAU,SAAS,CAClD,CAAC,EACD,OAAOC,GAAOH,EAAKD,CAAO,CAC5B,CAEA,OAAO,WAAWK,EAAsD,CACtE,OAAO,OAAO,OAAO,IAAIR,EAAmBQ,CAAM,CACpD,CAEA,OAAO,gBAAgBA,EAA0D,CAC/E,OAAOA,EAAO,IAAKC,GAAMT,EAAgB,WAAWS,CAAC,CAAC,CACxD,CAEA,OAAO,SAASC,EAA4B,CAC1C,OAAIA,aAAgBV,EACXU,EAEFV,EAAgB,WAAW,CAChC,KAAAU,CACF,CAAC,CACH,CAEA,UAAW,CACT,OAAOC,GAAO,KAAM,iBAAiB,CACvC,CACF,EAEaN,GAAN,MAAMO,UAA4BX,EAAY,CAGnD,UAAUY,EAAa,CACrB,OAAOC,GAAW,KAAK,KAAM,GAAGD,CAAI,CACtC,CAEA,OAAO,WAAWL,EAA8D,CAC9E,OAAO,OAAO,OAAO,IAAII,EAAuBJ,CAAM,CACxD,CAEA,OAAO,gBAAgBA,EAAkE,CACvF,OAAOA,EAAO,IAAKC,GAAMG,EAAoB,WAAWH,CAAC,CAAC,CAC5D,CAEA,MAAM,OAAOM,EAAgCC,EAA0C,CACrF,IAAMZ,EAAM,OAAO,OAAO,IAAIL,GAAmBkB,EAAAC,EAAA,GAC5C,MAD4C,CAE/C,OAAQZ,GAAQ,KAAK,MAAO,CAC9B,EAAC,EACD,GAAI,CACF,MAAMa,GAAOf,EAAKW,CAAc,CAClC,OAASK,EAAG,CACVC,EAAO,UAAUL,EAAQK,EAAO,UAAW,+BAAsCC,EAAaF,CAAC,CAAC,CAClG,CACA,OAAOhB,CACT,CAEA,UAAW,CACT,OAAOO,GAAO,KAAM,qBAAqB,CAC3C,CACF,EAEOY,EAAQxB,GChJf,IAAMyB,GAAN,KAAmB,CAGjB,YAAYC,EAAsB,CAChC,KAAK,QAAUA,CACjB,CAEA,IAAI,QAAiB,CACnB,OAAO,KAAK,QAAQ,MACtB,CAEA,MAAM,IAAIC,EAAwD,CAChEC,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,qBAAsB,aAAe,KAAK,QAAQ,IAAI,EACtG,IAAMC,EAAS,KAAK,QAAQ,OAC1BC,EAASD,EAAO,QAAQ,mCACxBE,EAAW,KAAK,QAAQ,OAAO,KAAK,oBAAsB,OAAYD,EACtEE,EAAUC,EAAS,kBAAkBJ,EAAO,QAAS,CAAE,OAAAC,CAAO,CAAC,EAEjE,OAAMI,EAAMF,EAASH,EAAO,QAAQ,OAAO,EAEpC,IAAIM,EACTN,EACA,KAAK,QAAQ,OAAO,KAAK,cAAc,SAAS,IAAI,EACpDG,EACAD,EACA,MAAOK,EAAMJ,EAASK,IAAa,CACjC,IAAMC,EACJD,EAAWD,EAAaG,EAAWH,EAAMP,EAAO,SAAUC,CAAM,EAGlE,OAAOU,GAAkBF,EAAS,KAAK,OAAO,CAChD,CACF,EAAE,IAAIX,CAAM,CACd,CAEA,MAAM,QAAQA,EAAwD,CACpE,OAAAC,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,yBAA0B,aAAe,KAAK,QAAQ,IAAI,EACnG,KAAK,QAAQ,OAAO,KAAK,cAAc,QAAQ,KAAMD,CAAM,CACpE,CACF,EAEOc,GAAQhB,GC1Bf,IAAMiB,GAA+B,CAAC,iBAAkB,iBAAkB,iBAAkB,OAAQ,iBAAiB,EAErH,SAASC,GAAgBC,EAAoC,CAC3D,OAAOF,GAAQE,GAAU,CAAC,GAAK,SACjC,CAEA,SAASC,GAAeC,EAAkB,CACxC,IAAIC,EAAO,EACX,OAAID,EAAI,OACNC,GAAQD,EAAI,KAAK,QAEfA,EAAI,WACNC,GAAQD,EAAI,SAAS,QAEnBA,EAAI,SACNC,GAAQ,KAAK,UAAUD,EAAI,MAAM,EAAE,QAEjCA,EAAI,OACNC,GAAcC,GAAcF,EAAI,IAAI,GAE/BC,CACT,CAEA,eAAsBE,GACpBC,EACAC,EACAC,EACAC,EACkB,CAClB,IAAMC,EAAUC,GAAuBJ,EAAQD,EAAQG,GAAA,KAAAA,EAAgB,IAAI,EAE3E,OADWG,GAAY,WAAWJ,CAAO,EAC/B,OAAOE,EAASJ,CAAM,CAClC,CAEA,eAAsBO,GACpBP,EACAC,EACAO,EACAJ,EACoB,CACpB,OAAO,QAAQ,IACbI,EAAa,IAAI,SAAUN,EAAS,CAClC,OAAOH,GAAYC,EAAQC,EAAQC,EAASE,CAAO,CACrD,CAAC,CACH,CACF,CAIA,eAAsBK,GAAaP,EAAkCQ,EAAoC,CAEvG,OADWJ,GAAY,WAAWJ,CAAO,EAC/B,OAAOQ,EAAQ,eAAgBA,EAAQ,MAAM,CACzD,CAEA,eAAsBC,GAAkBH,EAAyCE,EAAsC,CACrH,OAAO,QAAQ,IACbF,EAAa,IAAI,SAAUN,EAAS,CAClC,OAAOO,GAAaP,EAASQ,CAAO,CACtC,CAAC,CACH,CACF,CAEA,eAAsBE,GAAYC,EAA0BT,EAAqD,CAC/G,OAAO,QAAQ,IAAIS,EAAS,IAAKC,GAAYA,EAAQ,OAAOV,CAAO,CAAC,CAAC,CACvE,CAEO,IAAMW,GAAkBC,EAIxB,SAASC,GAAgBJ,EAAiC,CAC/D,IAAIjB,EACFsB,EAAQ,EACV,QAASC,EAAI,EAAGA,EAAIN,EAAS,OAAQM,IACnCvB,EAAMiB,EAASM,CAAC,EAChBD,GAAStB,EAAI,OAASA,EAAI,KAAOD,GAAeC,CAAG,GAErD,OAAOsB,CACT,CAEA,IAAME,GAAN,MAAMC,UAAgBC,EAAY,CAYhC,cAAe,CACT,KAAK,SAAW,mBAEd,KAAK,SAAW,CAAC,KAAK,SACxB,KAAK,OAAS,KAAK,SAGjB,KAAK,WAAa,CAAC,KAAK,YAC1B,KAAK,UAAY,KAAK,WAG5B,CAEA,MAAM,OAAOlB,EAA8C,CACzD,IAAMmB,EAAM,OAAO,OAAO,IAAIjB,GAAe,KAAM,CACjD,OAAQd,GAAQ,QAAQ,KAAK,QAAU,gBAAgB,CACzD,CAAC,EACD,OAAOgC,GAAOD,EAAKnB,CAAO,CAC5B,CAEA,OAAO,WAAWqB,EAAsC,CACtD,OAAO,OAAO,OAAO,IAAIJ,EAAWI,CAAM,CAC5C,CAEA,OAAO,gBAAgBA,EAA0C,CAC/D,OAAOA,EAAO,IAAKC,GAAML,EAAQ,WAAWK,CAAC,CAAC,CAChD,CAEA,UAAW,CACT,OAAOC,GAAO,KAAM,SAAS,CAC/B,CACF,EAEarB,GAAN,MAAMsB,UAAoBN,EAAY,CAa3C,UAAUO,EAAa,CACrB,OAAOC,GAAW,KAAK,KAAM,GAAGD,CAAI,CACtC,CAEA,OAAO,WAAWJ,EAA8C,CAC9D,OAAO,OAAO,OAAO,IAAIG,EAAeH,CAAM,CAChD,CAEA,OAAO,gBAAgBA,EAAkD,CACvE,OAAOA,EAAO,IAAKC,GAAME,EAAY,WAAWF,CAAC,CAAC,CACpD,CAGA,MAAM,cACJK,EACA/B,EAC2D,CAC3D,IAAMuB,EAAe,OAAO,OAAO,IAAIH,GAAWY,EAAAC,EAAA,GAC7C,MAD6C,CAEhD,OAAQxC,GAAgB,KAAK,MAAM,CACrC,EAAC,EACGyC,EACJ,GAAI,CACF,MAAMC,GAAOZ,EAAKQ,CAAY,CAChC,OAASK,EAAG,CACVC,EAAO,UAAUrC,EAAQqC,EAAO,UAAW,uBAA8BC,EAAaF,CAAC,CAAC,EACxFF,EAAME,CACR,CACA,OAAAb,EAAI,aAAa,EACV,CAAE,QAASA,EAAK,IAAKW,CAAI,CAClC,CAEA,MAAM,OACJH,EACA/B,EACkB,CAClB,GAAM,CAAE,QAAAuC,CAAQ,EAAI,MAAM,KAAK,cAAcR,EAAc/B,CAAM,EACjE,OAAOuC,CACT,CAEA,UAAW,CACT,OAAOZ,GAAO,KAAM,aAAa,CACnC,CACF,EAEOa,GAAQpB,GCxLf,IAAMqB,GAAuB,EAE7B,SAASC,GAAYC,EAA0B,CAC7C,OAAOA,EAAS,MAAM,SAAUC,EAAkB,CAChD,MAAO,CAACA,EAAQ,EAClB,CAAC,CACH,CAEA,IAAMC,GAAN,KAAkB,CAchB,YAAYC,EAAkBC,EAAcC,EAAiC,CAR7E,KAAQ,aAAuC,KAnCjD,IAAAC,EAAAC,EA4CIC,EAAO,UAAUL,EAAO,OAAQK,EAAO,UAAW,gBAAiB,mBAAqBJ,CAAI,EAC5F,KAAK,KAAOA,EACZ,KAAK,OAASD,EACd,KAAK,SAAW,IAAIM,GAAa,IAAI,EACrC,KAAK,eAAiBC,IAAwBJ,EAAAH,EAAO,UAAP,KAAAG,EAAkB,KAAM,KAAK,OAAQD,CAAc,GAC7FE,EAAAJ,EAAO,QAAQ,UAAf,MAAAI,EAAwB,OAC1B,KAAK,MAAQ,IAAIJ,EAAO,QAAQ,QAAQ,KAAK,YAAY,IAAI,GAE3DA,EAAO,eACT,KAAK,aAAe,IAAIA,EAAO,aAAa,gBAAgB,IAAI,EAEpE,CAnBA,IAAI,aAA+B,CACjC,OAAK,KAAK,cACFQ,EAAwB,aAAa,EAEtC,KAAK,YACd,CAgBA,IAAI,MAAO,CACT,OAAK,KAAK,OACFA,EAAwB,MAAM,EAE/B,KAAK,KACd,CAEA,IAAI,QAAiB,CACnB,OAAO,KAAK,OAAO,MACrB,CAEA,WAAWC,EAAgC,CApE7C,IAAAN,EAqEI,KAAK,eAAiBI,IAAwBJ,EAAA,KAAK,OAAO,UAAZ,KAAAA,EAAuB,KAAM,KAAK,OAAQM,CAAO,CACjG,CAEA,MAAM,QAAQC,EAAqE,CACjF,OAAAL,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,wBAAyB,aAAe,KAAK,IAAI,EAC1F,KAAK,OAAO,KAAK,aAAa,QAAQ,KAAMK,CAAM,CAC3D,CAEA,MAAM,WAAWC,EAA4B,CAC3C,IAAMC,EAAQD,EAAK,CAAC,EAClBE,EAASF,EAAK,CAAC,EACbd,EACAa,EAEJ,GAAI,OAAOE,GAAU,UAAYA,IAAU,KAEzCf,EAAW,CAACiB,GAAQ,WAAW,CAAE,KAAMF,EAAO,KAAMC,CAAO,CAAC,CAAC,EAC7DH,EAASC,EAAK,CAAC,UACAI,GAASH,CAAK,EAC7Bf,EAAW,CAACiB,GAAQ,WAAWF,CAAK,CAAC,EACrCF,EAASC,EAAK,CAAC,UACN,MAAM,QAAQC,CAAK,EAC5Bf,EAAWiB,GAAQ,gBAAgBF,CAAK,EACxCF,EAASC,EAAK,CAAC,MAEf,OAAM,IAAIK,EACR,gGACA,MACA,GACF,EAGGN,IAEHA,EAAS,CAAC,GAGZ,IAAMV,EAAS,KAAK,OAClBS,EAAUT,EAAO,QACjBiB,EAASR,EAAQ,mCACjBS,EAA2BlB,EAAO,QAAQ,yBAC1CmB,EAAUC,EAAS,mBAAmBpB,EAAO,QAAS,CAAE,OAAAiB,CAAO,CAAC,EAIlE,GAFMI,EAAMF,EAASV,EAAQ,OAAO,EAEhCS,GAA4BtB,GAAYC,CAAQ,EAAG,CACrD,IAAMyB,EAAY,MAAYC,GAAa5B,EAAoB,EAC/DE,EAAS,QAAQ,SAAUC,EAAS0B,EAAO,CACzC1B,EAAQ,GAAKwB,EAAY,IAAME,EAAM,SAAS,CAChD,CAAC,CACH,CAEA,IAAMC,EAAe,MAAMC,GAAoB7B,EAAU,KAAK,cAA+B,EAGvF8B,EAAOC,GAAgBH,CAAY,EACvCI,EAAiBpB,EAAQ,eAC3B,GAAIkB,EAAOE,EACT,MAAM,IAAIb,EACR,wEAAwEW,CAAI,oBAAoBE,CAAc,UAC9G,MACA,GACF,EAGF,MAAM,KAAK,SAASC,GAAiBL,EAAczB,EAAO,SAAUiB,CAAM,EAAGE,EAAST,CAAM,CAC9F,CAEA,MAAM,SAASqB,EAAiCZ,EAAiCT,EAA4B,CAC3G,MAAMsB,EAAS,KACb,KAAK,OACL,KAAK,OAAO,KAAK,aAAa,SAAS,IAAI,EAAI,YAC/CD,EACAZ,EACAT,EACA,KACA,EACF,CACF,CAEA,MAAM,QAAsC,CAC1C,OAAO,KAAK,OAAO,KAAK,aAAa,OAAO,IAAI,CAClD,CACF,EAEOuB,GAAQlC,GCjJf,IAAMmC,GAAN,MAAMC,CAAM,CAQV,YAAYC,EAAsB,CAChC,KAAK,QAAWA,GAAUA,EAAO,SAAY,OAC7C,KAAK,OAAUA,GAAUA,EAAO,QAAW,OAC3C,KAAK,MAASA,GAAUA,EAAO,OAAU,OACzC,KAAK,WAAcA,GAAUA,EAAO,YAAe,OACnD,KAAK,KAAQA,GAAUA,EAAO,MAAS,OACvC,KAAK,WAAcA,GAAUA,EAAO,YAAe,MACrD,CAEA,OAAO,WAAWA,EAA4B,CAC5C,OAAO,IAAID,EAAMC,CAAM,CACzB,CACF,EAEOC,GAAQH,GCfR,IAAMI,GAAN,KAAuB,CAC5B,OAAO,SAASC,EAAwC,CACtD,MAAO,aAAe,mBAAmBA,EAAQ,IAAI,CACvD,CAEA,OAAO,QACLA,EACAC,EACmC,CACnC,IAAMC,EAASF,EAAQ,OACrBG,EAASD,EAAO,QAAQ,mCACxBE,EAAWJ,EAAQ,OAAO,KAAK,oBAAsB,OAAYG,EACjEE,EAAUC,EAAS,kBAAkBJ,EAAO,QAAS,CAAE,OAAAC,CAAO,CAAC,EAEjE,OAAMI,EAAMF,EAASH,EAAO,QAAQ,OAAO,EAEpC,IAAIM,EAAkBN,EAAQ,KAAK,SAASF,CAAO,EAAI,YAAaK,EAASD,EAAU,eAC5FK,EACAJ,EACAK,EACA,CACA,IAAMC,EACJD,EAAWD,EAAaG,EAAWH,EAAMP,EAAO,SAAUC,CAAM,EAGlE,OAAOU,GAAkBF,EAASX,CAAO,CAC3C,CAAC,EAAE,IAAIC,CAAiC,CAC1C,CAEA,aAAa,OAAOD,EAAqE,CACvF,IAAMG,EAASH,EAAQ,OAAO,QAAQ,mCAChCK,EAAUC,EAAS,mBAAmBN,EAAQ,OAAO,QAAS,CAAE,OAAAG,CAAO,CAAC,EAW9E,OATiB,MAAMW,EAAS,IAC9Bd,EAAQ,OACR,KAAK,SAASA,CAAO,EACrBK,EACA,CAAC,EACDF,EACA,EACF,GAEgB,IAClB,CACF,ECpDO,IAAMY,GAAN,KAAwB,CAC7B,OAAO,SAASC,EAA2C,CACzD,OAAOC,GAAiB,SAASD,EAAS,OAAO,EAAI,WACvD,CAEA,aAAa,QACXA,EACAE,EAC2C,CAC3C,IAAMC,EAASH,EAAS,QAAQ,OAC9BI,EAASD,EAAO,QAAQ,mCACxBE,EAAWL,EAAS,QAAQ,OAAO,KAAK,oBAAsB,OAAYI,EAC1EE,EAAUC,EAAS,kBAAkBJ,EAAO,QAAS,CAAE,OAAAC,CAAO,CAAC,EAEjE,OAAMI,EAAMF,EAASH,EAAO,QAAQ,OAAO,EAEpC,IAAIM,EACTN,EACA,KAAK,SAASH,CAAQ,EAAI,WAC1BM,EACAD,EACA,MAAOK,EAAMJ,EAASK,IAAa,CACjC,IAAMC,EACJD,EAAWD,EAAaG,EAAWH,EAAMP,EAAO,SAAUC,CAAM,EAGlE,OAAOU,GAAkBF,EAASZ,EAAS,OAAO,CACpD,CACF,EAAE,IAAIE,CAAM,CACd,CACF,ECDO,IAAMa,GAAN,KAAW,CAchB,YAAYC,EAAoB,CAThC,KAAS,aAAeC,GACxB,KAAS,cAAgBC,GAGzB,cAAWC,EACX,uBAAoBC,EACpB,mBAAgBC,GAChB,6BAA0BC,GAGxB,KAAK,OAASN,EACd,KAAK,SAAW,IAAIO,GAAS,KAAK,MAAM,EACxC,KAAK,KAAO,IAAIC,GAAK,KAAK,MAAM,CAClC,CAEA,MAAM,MAAMC,EAAwD,CAClE,IAAMC,EAAUC,EAAS,kBAAkB,KAAK,OAAO,OAAO,EAC5DC,EAAS,KAAK,OAAO,QAAQ,mCAC7BC,EAAW,KAAK,OAAO,KAAK,oBAAsB,OAAYD,EAEhE,OAAME,EAAMJ,EAAS,KAAK,OAAO,QAAQ,OAAO,EAEzC,IAAIN,EAAkB,KAAK,OAAQ,SAAUM,EAASG,EAAU,SAAUE,EAAML,EAASM,EAAU,CACxG,IAAMC,EAAcD,EAAWD,EAAO,KAAK,MAAMA,CAAc,EAC/D,QAASG,EAAI,EAAGA,EAAID,EAAY,OAAQC,IAAKD,EAAYC,CAAC,EAAIC,GAAM,WAAWF,EAAYC,CAAC,CAAC,EAC7F,OAAOD,CACT,CAAC,EAAE,IAAIR,CAAgC,CACzC,CAEA,MAAM,KAAKA,EAAyC,CAClD,IAAMC,EAAUC,EAAS,kBAAkB,KAAK,OAAO,OAAO,EAC1D,KAAK,OAAO,QAAQ,SAAeG,EAAMJ,EAAS,KAAK,OAAO,QAAQ,OAAO,EACjF,IAAMU,EAAWC,GACR,KAAK,OAAO,QAAQA,CAAI,EAAI,QAGjC,CAAE,MAAAC,EAAO,KAAAP,EAAM,SAAAC,CAAS,EAAI,MAAM,KAAK,OAAO,KAAK,GACrDO,EAAY,IACZH,EACAV,EACA,KACAD,CACF,EAEA,GAAIa,EACF,MAAMA,EAEHN,IAAUD,EAAO,KAAK,MAAMA,CAAc,GAC/C,IAAMS,EAAQT,EAAkB,CAAC,EACjC,GAAI,CAACS,EACH,MAAM,IAAIC,EAAU,yDAA0D,IAAO,GAAG,EAG1F,YAAK,OAAO,iBAAmBD,EAAO,KAAK,IAAI,EACxCA,CACT,CAEA,MAAM,QACJE,EACAC,EACAC,EACAnB,EACAM,EACAc,EACyC,CA1G7C,IAAAC,EA2GI,GAAM,CAACC,EAASC,EAASpB,CAAM,GAAK,IAC9B,KAAK,OAAO,QAAQ,mBACjB,KAAK,OAAO,UACTqB,EAAwB,SAAS,EAElC,CAAC,KAAK,OAAO,SAAS,OAAQ,KAAK,OAAO,SAAS,gBAA4B,GAE/E,CAAC,KAAK,UAAW,KAAK,YAAwB,GAEtD,EACGpB,EAAW,KAAK,OAAO,KAAK,oBAAsB,OAAYD,EACpEH,EAASA,GAAU,CAAC,EACpB,IAAMyB,EAAUR,EAAO,YAAY,EAC7BhB,EACJwB,GAAW,MACPvB,EAAS,kBAAkB,KAAK,OAAO,QAAS,CAAE,OAAAC,EAAQ,gBAAiBgB,CAAQ,CAAC,EACpFjB,EAAS,mBAAmB,KAAK,OAAO,QAAS,CAAE,OAAAC,EAAQ,gBAAiBgB,CAAQ,CAAC,EAEvF,OAAOb,GAAS,WAClBA,GAAOe,EAAAC,EAAQhB,CAAI,IAAZ,KAAAe,EAAiB,MAEpBhB,EAAMJ,EAAS,KAAK,OAAO,QAAQ,OAAO,EAC5CmB,GACIf,EAAMJ,EAASmB,CAAa,EAEpC,IAAMM,EAAoB,IAAI/B,EAC5B,KAAK,OACLuB,EACAjB,EACAG,EACA,eAAgBuB,EAAS1B,EAASM,EAAU,CAC1C,OAAaqB,GAAYrB,EAAWoB,EAAUJ,EAAQI,CAA0B,CAAC,CACnF,EACgC,EAClC,EAEA,GAAI,CAACE,EAAS,KAAK,QAAQ,SAASJ,CAAO,EACzC,MAAM,IAAIT,EAAU,sBAAwBS,EAAS,MAAO,GAAG,EAGjE,OAAII,EAAS,KAAK,gBAAgB,SAASJ,CAAO,EACzCC,EAAkBD,CAA2B,EAAEzB,EAAQM,CAAmB,EAI1EoB,EAAkBD,CAA+C,EAAEzB,CAAM,CAIpF,CAEA,MAAM,aACJ8B,EACiF,CACjF,IAAIC,EACAC,EACA,MAAM,QAAQF,CAAW,GAC3BC,EAAiBD,EACjBE,EAAiB,KAEjBD,EAAiB,CAACD,CAAW,EAC7BE,EAAiB,IAGnB,IAAM7B,EAAS,KAAK,OAAO,QAAQ,mCACjCF,EAAUC,EAAS,mBAAmB,KAAK,OAAO,QAAS,CAAE,OAAAC,CAAO,CAAC,EAEnE,KAAK,OAAO,QAAQ,SAAeE,EAAMJ,EAAS,KAAK,OAAO,QAAQ,OAAO,EAEjF,IAAMgC,EAAoBC,EAAWH,EAAgB,KAAK,OAAO,SAAU5B,CAAM,EAE3EgC,EAAW,MAAMzC,EAAS,KAAK,KAAK,OAAQ,YAAauC,EAAahC,EAAS,CAAC,EAAG,KAAM,EAAI,EAE7FmC,EACJD,EAAS,SAAWA,EAAS,KAAaE,EAAWF,EAAS,KAAM,KAAK,OAAO,SAAUhC,CAAM,EAIlG,OAAI6B,EACKI,EAAa,CAAC,EAEdA,CAEX,CAEA,MAAM,cAAcE,EAAkD,CACpE,IAAMnC,EAAS,KAAK,OAAO,QAAQ,mCACjCF,EAAUC,EAAS,mBAAmB,KAAK,OAAO,QAAS,CAAE,OAAAC,CAAO,CAAC,EAEnE,KAAK,OAAO,QAAQ,SAAeE,EAAMJ,EAAS,KAAK,OAAO,QAAQ,OAAO,EAEjF,IAAMsC,EAAgBD,EAAS,KAAK,GAAG,EAEjCH,EAAW,MAAMzC,EAAS,IAAI,KAAK,OAAQ,YAAaO,EAAS,CAAE,SAAUsC,CAAc,EAAG,KAAM,EAAI,EAE9G,OACEJ,EAAS,SAAWA,EAAS,KAAaE,EAAWF,EAAS,KAAM,KAAK,OAAO,SAAUhC,CAAM,CAEpG,CAEA,MAAM,aACJqC,EACAC,EACgC,CAChC,GAAIC,GAAa,KAAK,OAAO,OAAO,EAClC,MAAM,IAAI1B,EAAU,6CAA8C,MAAO,GAAG,EAG9E,IAAM2B,EAAU,KAAK,OAAO,QAAQ,QAEhCC,EAAkBH,GAAA,KAAAA,EAAW,CAAC,EAE5BV,EAAiBc,EAAA,CACrB,QAASL,EAAW,IAAKM,GAAc,GAAGA,EAAU,IAAI,IAAIA,EAAU,KAAK,EAAE,GAC1EF,GAGCzC,EAAS,KAAK,OAAO,QAAQ,mCACjCF,EAAUC,EAAS,mBAAmB,KAAK,OAAO,QAAS,CAAE,OAAAC,CAAO,CAAC,EAEnE,KAAK,OAAO,QAAQ,SAAeE,EAAMJ,EAAS,KAAK,OAAO,QAAQ,OAAO,EAEjF,IAAMgC,EAAoBC,EAAWH,EAAgB,KAAK,OAAO,SAAU5B,CAAM,EAE3EgC,EAAW,MAAMzC,EAAS,KAC9B,KAAK,OACL,SAASiD,CAAO,gBAChBV,EACAhC,EACA,CAAC,EACD,KACA,EACF,EAEA,OACEkC,EAAS,SAAWA,EAAS,KAAaE,EAAWF,EAAS,KAAM,KAAK,OAAO,SAAUhC,CAAM,CAEpG,CACF,EAEML,GAAN,KAAe,CAKb,YAAYP,EAAoB,CAC9B,KAAK,OAASA,EACd,KAAK,IAAM,OAAO,OAAO,IAAI,CAC/B,CAEA,IAAIwD,EAAcC,EAAiC,CACjDD,EAAO,OAAOA,CAAI,EAClB,IAAIE,EAAU,KAAK,IAAIF,CAAI,EAC3B,OAAKE,EAEMD,GACTC,EAAQ,WAAWD,CAAc,EAFjC,KAAK,IAAID,CAAI,EAAIE,EAAU,IAAIC,GAAY,KAAK,OAAQH,EAAMC,CAAc,EAKvEC,CACT,CAIA,QAAQF,EAAc,CACpB,OAAO,KAAK,IAAI,OAAOA,CAAI,CAAC,CAC9B,CACF,ECvQO,IAAMI,GAAN,cAAuBC,EAAW,CASvC,YAAYC,EAAkC,CAC5C,MAAMC,EAAS,iBAAiBD,EAAS,GAAO,WAAYE,EAAO,cAAe,CAAE,KAAAC,EAAK,CAAC,CAAC,CAC7F,CACF,ECuBO,IAAMC,GAA0C,CAAE,KAAAC,EAAK,ECrCvD,IAAMC,GAAN,cAA6BC,EAAQ,CAC1C,aAAa,YAAYC,EAAkBC,EAAqD,CAC9F,OAAOC,GAAYC,EAAO,cAAeC,EAAS,OAAQJ,EAAwBC,CAAY,CAChG,CAEA,aAAa,iBAAiBI,EAA8BC,EAAkD,CAC5G,OAAOC,GAAiBJ,EAAO,cAAeC,EAAS,OAAQC,EAA+BC,CAAO,CACvG,CAEA,OAAO,WAAWE,EAAsC,CACtD,OAAOT,GAAQ,WAAWS,CAAM,CAClC,CACF,ECZO,IAAMC,GAAN,cAAqCC,CAAgB,CAC1D,aAAa,YAAYC,EAAkBC,EAA6D,CACtG,OAAOC,GAAYC,EAAO,cAAeC,EAAS,OAAQJ,EAAgCC,CAAY,CACxG,CAEA,aAAa,iBACXI,EACAC,EAC4B,CAC5B,OAAOC,GAAiBJ,EAAO,cAAeC,EAAS,OAAQC,EAAuCC,CAAO,CAC/G,CAEA,OAAO,WAAWE,EAAsD,CACtE,OAAOT,EAAgB,WAAWS,CAAM,CAC1C,CACF,ECbA,IAAMC,GAAU,CAAC,oBAAqB,mBAAmB,EAEzD,eAAsBC,GACpBC,EACAC,EACAC,EACqB,CAErB,OADWC,GAAe,WAAWF,CAAO,EAClC,OAAOC,GAAW,CAAC,EAAGF,CAAM,CACxC,CAEA,eAAsBI,GACpBJ,EACAK,EACAH,EACuB,CACvB,OAAO,QAAQ,IACbG,EAAa,IAAI,SAAUJ,EAAS,CAClC,OAAOF,GAAYC,EAAQC,EAASC,CAAO,CAC7C,CAAC,CACH,CACF,CAIA,eAAsBI,GAAaL,EAAqCM,EAAuC,CAC7G,OAAOJ,GAAe,WAAWF,CAAO,EAAE,OAAOM,EAAQ,eAAgBA,EAAQ,MAAM,CACzF,CAEA,eAAsBC,GACpBH,EACAE,EACuB,CACvB,OAAO,QAAQ,IACbF,EAAa,IAAI,SAAUJ,EAAS,CAClC,OAAOK,GAAaL,EAASM,CAAO,CACtC,CAAC,CACH,CACF,CAOA,IAAME,GAAN,MAAMC,UAAmBC,EAAY,CAQnC,MAAM,QAAkC,CACtC,IAAMC,EAAM,OAAO,OAAO,IAAIC,GAAkB,KAAM,CACpD,OAAQC,GAAQ,QAAQ,KAAK,QAAU,mBAAmB,CAC5D,CAAC,EAGD,OAAOC,GAAOH,EAAK,CAAC,CAAC,CACvB,CAEA,OAAO,WAAWI,EAA4C,CAC5D,OAAO,OAAO,OAAO,IAAIN,EAAcM,CAAM,CAC/C,CAEA,OAAO,gBAAgBA,EAAgD,CACrE,OAAOA,EAAO,IAAKC,GAAMP,EAAW,WAAWO,CAAC,CAAC,CACnD,CAEA,UAAW,CACT,OAAOC,GAAO,KAAM,YAAY,CAClC,CACF,EAEaL,GAAN,MAAMM,UAAuBR,EAAY,CAQ9C,UAAUS,EAAa,CACrB,OAAOC,GAAW,KAAK,KAAM,GAAGD,CAAI,CACtC,CAEA,OAAO,WAAWJ,EAAoD,CACpE,OAAO,OAAO,OAAO,IAAIG,EAAkBH,CAAM,CACnD,CAEA,OAAO,gBAAgBA,EAAwD,CAC7E,OAAOA,EAAO,IAAKC,GAAME,EAAe,WAAWF,CAAC,CAAC,CACvD,CAEA,MAAM,OAAOK,EAAgCC,EAAqC,CAChF,IAAMX,EAAM,OAAO,OAAO,IAAIH,GAAce,EAAAC,EAAA,GACvC,MADuC,CAE1C,OAAQX,GAAQ,KAAK,MAAO,CAC9B,EAAC,EACD,GAAI,CACF,MAAMY,GAAOd,EAAKU,CAAc,CAClC,OAASK,EAAG,CACVC,EAAO,UAAUL,EAAQK,EAAO,UAAW,0BAAiCC,EAAaF,CAAC,CAAC,CAC7F,CACA,OAAOf,CACT,CAEA,UAAW,CACT,OAAOM,GAAO,KAAM,gBAAgB,CACtC,CACF,EAEOY,GAAQrB,GCpHR,IAAMsB,GAAN,cAAgCC,EAAW,CAChD,aAAa,YAAYC,EAAkBC,EAAwD,CACjG,OAAOC,GAAYC,EAAO,cAAeH,EAA2BC,CAAY,CAClF,CAEA,aAAa,iBAAiBG,EAA8BC,EAAqD,CAC/G,OAAOC,GAAiBH,EAAO,cAAeC,EAAkCC,CAAO,CACzF,CAEA,OAAO,WAAWE,EAA4C,CAC5D,OAAOR,GAAW,WAAWQ,CAAM,CACrC,CACF,ECLO,SAASC,GAAsBC,EAAuC,CAC3E,IAAIC,EACJ,OAAQ,OAAOD,EAAa,CAC1B,IAAK,SACHC,EAAgBD,EAChB,MACF,IAAK,SACHC,EAAgBD,EAAY,OAC5B,KACJ,CACA,GAAI,CAACC,GAAiB,OAAOA,GAAkB,SAC7C,MAAM,IAAIC,EACR,wJACA,MACA,GACF,EAEF,OAAOD,CACT,CAEO,SAASE,GACdH,EACAI,EACY,CACZ,IAAMH,EAAgBF,GAAsBC,CAAW,EAEvD,GAAI,CAACI,GAAoB,OAAOA,GAAqB,SACnD,MAAM,IAAIF,EACR,kGACA,MACA,GACF,EAGF,IAAMG,EAAaC,GAAW,WAAWF,CAAgB,EACzD,OAAAC,EAAW,cAAgBJ,EACtBI,EAAW,SACdA,EAAW,OAAS,qBAEfA,CACT,CAEA,SAASE,GAAkBC,EAAwCC,EAAgB,CACjF,OACED,EAAQ,OAAO,KAAK,aAAa,SAASA,CAAO,EAAI,aAAe,mBAAmBC,CAAM,EAAI,cAErG,CAEA,IAAMC,GAAN,KAAsB,CAGpB,YAAYF,EAAsB,CAChC,KAAK,QAAUA,CACjB,CAEA,MAAM,QAAQR,EAA+BI,EAAkE,CAC7G,IAAMC,EAAaF,GAA4BH,EAAaI,CAAgB,EACtEO,EAAiB,MAAMN,EAAW,OAAO,EAEzCO,EAAS,KAAK,QAAQ,OAC1BC,EAAUD,EAAO,QACjBE,EAASD,EAAQ,mCACjBE,EAAUC,EAAS,mBAAmBJ,EAAO,QAAS,CAAE,OAAAE,CAAO,CAAC,EAChEG,EAAS,CAAC,EAENC,EAAMH,EAASH,EAAO,QAAQ,OAAO,EAE3C,IAAMO,EAAoBC,EAAW,CAACT,CAAc,EAAGC,EAAO,SAAUE,CAAM,EAE9E,MAAMO,EAAS,KACbT,EACAL,GAAkB,KAAK,QAASF,EAAW,aAAc,EACzDc,EACAJ,EACAE,EACA,KACA,EACF,CACF,CAEA,MAAM,OAAOjB,EAA+BI,EAAkE,CAC5G,OAAAA,EAAiB,OAAS,oBACnB,KAAK,QAAQJ,EAAaI,CAAgB,CACnD,CAEA,MAAM,IACJJ,EACAiB,EACsC,CACtC,IAAML,EAAS,KAAK,QAAQ,OAC1BX,EAAgBF,GAAsBC,CAAW,EACjDc,EAASF,EAAO,QAAQ,mCACxBU,EAAWV,EAAO,KAAK,oBAAsB,OAAYE,EACzDC,EAAUC,EAAS,kBAAkBJ,EAAO,QAAS,CAAE,OAAAE,CAAO,CAAC,EAEjE,OAAMI,EAAMH,EAASH,EAAO,QAAQ,OAAO,EAEpC,IAAIW,EACTX,EACAL,GAAkB,KAAK,QAASN,CAAa,EAC7Cc,EACAO,EACA,MAAOE,EAAMC,EAAGC,IAAa,CAC3B,IAAMC,EACJD,EAAWF,EAAaI,EAAWJ,EAAMZ,EAAO,SAAUE,CAAM,EAGlE,OAAOe,GAAkBF,EAAS,KAAK,OAAO,CAChD,CACF,EAAE,IAAIV,CAAiC,CACzC,CACF,EAEOa,GAAQpB,GChHR,IAAMqB,GAAkBC,EAE/B,SAASC,GAAcC,EAAuB,CAC5C,IAAMC,EAAS,CAAC,EAChB,GAAID,EACF,QAASE,EAAI,EAAGA,EAAIF,EAAM,OAAQE,IAChCD,EAAO,KAAKD,EAAME,CAAC,EAAE,SAAS,CAAC,EAGnC,MAAO,KAAOD,EAAO,KAAK,IAAI,EAAI,IACpC,CAEO,SAASE,GACdC,EACAC,EACAC,EACAC,EACAC,EACAC,EACiB,CACjB,IAAMC,EAAqBC,EAAoCP,EAAYC,EAASI,CAAM,EAC1F,OAAOG,GAAiBF,EAAcJ,EAAuBC,EAAmBC,CAAa,CAC/F,CAEO,SAASI,GACdF,EACAJ,EACAC,EACAC,EACiB,CACjB,IAAIK,EACAH,EAAa,QACfG,EAAQC,EAAU,WAAWJ,EAAa,KAAkB,GAG9D,IAAIK,EACAL,EAAa,WACfK,EAAWC,GAAY,gBAAgBN,EAAa,QAA0C,GAGhG,IAAIO,EACAX,GAAyBI,EAAa,WACxCO,EAAWX,EAAsB,oBAAoB,gBACnDI,EAAa,QACf,GAGF,IAAIQ,EACAX,GAAqBG,EAAa,cACpCQ,EAAcX,EAAkB,eAAe,gBAC7CG,EAAa,WACf,GAGF,IAAIS,EACJ,OAAIX,GAAiBE,EAAa,QAChCS,EAAQX,EAAc,cAAc,gBAClCE,EAAa,MACbU,EACAC,EACF,GAGK,OAAO,OAAO,IAAIC,GAAmBC,EAAAC,EAAA,GAAKd,GAAL,CAAmB,SAAAO,EAAU,SAAAF,EAAU,YAAAG,EAAa,MAAAC,EAAO,MAAAN,CAAM,EAAC,CAChH,CAQO,SAASY,GAAqCC,EAA+D,CAClH,OAAQhB,GAA2D,CAzFrE,IAAAiB,EA0FI,OAAOf,GACLF,EACA,CACE,gBAAAkB,EACA,oBAAAC,EACF,EACA,CAAE,WAAAC,GAAY,eAAAC,GAAgB,oBAAAC,GAAqB,gBAAAC,EAAgB,GACnEN,EAAAD,GAAA,YAAAA,EAAc,gBAAd,KAAAC,EAA+B,IACjC,CACF,CACF,CAEO,SAASO,EAAWC,EAAsD,CAC/E,OAAO,OAAO,OAAO,IAAIb,GAAmBa,CAAM,CACpD,CAEO,SAASC,GACdC,EACA/B,EACAC,EACAC,EACQ,CACR,IAAIP,EAAS,mBACToC,EAAI,SAAW,SAAWpC,GAAU,YAAcqC,GAAWD,EAAI,MAAM,GAAKA,EAAI,QAEpF,IAAME,EAAmB,CAAC,KAAM,UAAW,gBAAiB,eAAgB,QAAS,YAAa,WAAW,EACzGC,EACJ,QAASC,EAAc,EAAGA,EAAcF,EAAiB,OAAQE,IAC/DD,EAAYD,EAAiBE,CAAW,EACpCJ,EAAIG,CAAS,IAAM,SAAWvC,GAAU,KAAOuC,EAAY,IAAMH,EAAIG,CAAS,GAgBpF,GAbIH,EAAI,WAAUpC,GAAU,cAAgBF,GAAciB,GAAY,gBAAgBqB,EAAI,QAAQ,CAAC,GAC/FA,EAAI,UAAY/B,IAClBL,GAAU,cAAgBF,GAAcO,EAAsB,oBAAoB,gBAAgB+B,EAAI,QAAQ,CAAC,GAC7GA,EAAI,aAAe9B,IACrBN,GAAU,iBAAmBF,GAAcQ,EAAkB,eAAe,gBAAgB8B,EAAI,WAAW,CAAC,GAE1GA,EAAI,OAAS7B,IACfP,GACE,WAAaF,GAAcS,EAAc,cAAc,gBAAgB6B,EAAI,MAAOjB,EAAOC,EAAe,CAAC,GAEzGgB,EAAI,QAAOpC,GAAU,WAAaa,EAAU,WAAWuB,EAAI,KAAK,EAAE,SAAS,GAC3EA,EAAI,MAAQA,EAAI,KAAK,cAAapC,GAAU,WAAaoC,EAAI,KAAK,aAClEA,EAAI,QAAOpC,GAAU,WAAayC,GAAU,OAAOL,EAAI,OAAO,EAAE,KAAK,GAAG,GACxEA,EAAI,OAAQ,CACd,IAAIM,EAAoB,GAClBC,GAA0BP,EAAI,OAAQ,SAAUQ,EAAc,CAC9DF,EAAkB,OAAS,IAC7BA,GAAqB,MAEvBA,GAAqBE,EAAO,IAAMR,EAAI,OAAOQ,CAAI,CACnD,CAAC,EACGF,EAAkB,OAAS,IAC7B1C,GAAU,aAAe0C,EAAoB,IAEjD,CACA,OAAA1C,GAAU,IACHA,CACT,CAEA,IAAMqB,GAAN,KAAsB,CAAtB,cAyBE,aAAWwB,IACA,KAAK,MAAmBC,EAAMD,CAAI,GAAK,EAGlD,QAAQA,EAAkC,CACxC,OAAQ,KAAK,MAAS,KAAK,MAAmBC,EAAMD,CAAI,CAC1D,CAEA,SAAkB,CAChB,OAAQ,KAAK,OAAS,GAAKC,EAAM,QACnC,CAEA,mBAAmBC,EAAgC,CACjDA,EAAM,QAASC,GAAS,KAAK,QAAQA,CAAI,CAAC,CAC5C,CAEA,sBAA6C,CAC3C,IAAMD,EAAkB,CAAC,EACzB,OAAAE,GAAa,QAASD,GAAS,CACzB,KAAK,QAAQA,CAAI,GACnBD,EAAM,KAAKC,CAAI,CAEnB,CAAC,EACMD,EAAM,OAAS,EAAIA,EAAQ,MACpC,CACF,EAEOG,GAAQ7B,GCzMf,IAAM8B,GAAN,KAAyB,CAOvB,YACEC,EACAC,EACAC,EACAC,EACAC,EACA,CACA,KAAK,SAAWJ,EAChB,KAAK,QAAUC,EACXA,IAAY,aACd,KAAK,QAAUC,EACf,KAAK,WAAaC,GAEhBC,IAAQ,KAAK,OAASA,EAC5B,CACF,EAEOC,GAAQN,GCMf,IAAMO,GAAO,UAAY,CAAC,EAE1B,SAASC,GAAuBC,EAA8B,CAC5D,GAAIA,GAAW,WAAYA,GAAW,CAAOC,GAASD,EAAQ,MAAM,EAClE,OAAO,IAAIE,EAAU,mCAAoC,IAAO,GAAG,EAErE,GAAIF,GAAW,UAAWA,EAAS,CACjC,GAAI,CAAC,MAAM,QAAQA,EAAQ,KAAK,EAC9B,OAAO,IAAIE,EAAU,iCAAkC,IAAO,GAAG,EAEnE,QAASC,EAAI,EAAGA,EAAIH,EAAQ,MAAM,OAAQG,IAAK,CAC7C,IAAMC,EAAcJ,EAAQ,MAAMG,CAAC,EACnC,GACE,CAACC,GACD,OAAOA,GAAgB,UACvB,CAACC,GAAa,SAAS,OAAO,UAAU,YAAY,KAAKD,CAAW,CAAC,EAErE,OAAO,IAAIF,EAAU,yBAA2BE,EAAa,IAAO,GAAG,CAE3E,CACF,CACF,CAEA,IAAME,GAAN,MAAMC,UAAwBC,CAAa,CA6CzC,YAAYC,EAAsBC,EAAcV,EAA8B,CApGhF,IAAAW,EAAAC,EAAAC,EAqGI,MAAMJ,EAAO,MAAM,EAzCrB,KAAQ,aAA2C,KAuBnD,WAAQ,EAaR,gBAAqB,EAg2BrB,aAAU,eAERK,EACmC,CACnCC,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,4BAA6B,aAAe,KAAK,IAAI,EAGrG,IAAMC,EAAY,KAAK,OAAO,KAAK,aAEnC,GAAIF,GAAUA,EAAO,YAAa,CAChC,GAAI,KAAK,QAAU,WACjB,MAAM,IAAIZ,EAAU,yDAA0D,IAAO,GAAG,EAE1F,GAAI,CAAC,KAAK,WAAW,aACnB,MAAM,IAAIA,EACR,qFACA,IACA,GACF,EAEF,OAAOY,EAAO,YACdA,EAAO,YAAc,KAAK,WAAW,YACvC,CAEA,OAAOE,EAAU,QAAQ,KAAMF,CAAM,CACvC,EAEA,eAAcG,GACLT,EAAa,UAAU,UAAU,KAAK,KAAMS,EAAO,KAAK,KAAK,EAt3BpEF,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,oBAAqB,mBAAqBL,CAAI,EAC9F,KAAK,KAAOA,EACZ,KAAK,eAAiBQ,IAAwBP,EAAAF,EAAO,UAAP,KAAAE,EAAkB,KAAM,KAAK,OAAQX,CAAO,EAC1F,KAAK,OAASS,EACd,KAAK,UAAYA,EAAO,kBAAoB,IAAIA,EAAO,kBAAkB,iBAAiB,IAAI,EAAI,KAC9FA,EAAO,eACT,KAAK,aAAe,IAAIA,EAAO,aAAa,oBAAoB,IAAI,GAEtE,KAAK,kBAAoBA,EAAO,WAAW,kBAC3C,KAAK,MAAQ,cACb,KAAK,cAAgB,IAAID,EAAa,KAAK,MAAM,EACjD,KAAK,kBAAoB,OACzB,KAAK,WAAa,CAChB,aAAc,OACd,cAAe,MACjB,EACA,KAAK,WAAWR,CAAO,EACvB,KAAK,YAAc,KACnB,KAAK,cAAgB,GACrB,KAAK,iBAAmB,CACtB,eAAgB,KAAK,eACrB,QAASS,EAAO,QAAQ,SAAW,CAAC,EACpC,2BAA4B,MAC9B,EACA,KAAK,aAAe,CAClB,UAAW,KACX,6BAA8B,KAC9B,gCAAiC,IACnC,EAGA,KAAK,mBAAqB,IAAID,EAAa,KAAK,MAAM,GAElDI,EAAAH,EAAO,QAAQ,UAAf,MAAAG,EAAwB,OAC1B,KAAK,MAAQ,IAAIH,EAAO,QAAQ,QAAQ,KAAK,YAAY,IAAI,IAG3DI,EAAAJ,EAAO,QAAQ,UAAf,MAAAI,EAAwB,UAC1B,KAAK,SAAW,IAAIJ,EAAO,QAAQ,QAAQ,QAAQ,QAAQ,IAAI,EAEnE,CAjFA,IAAI,UAA6B,CAC/B,OAAK,KAAK,WACFU,EAAwB,kBAAkB,EAE3C,KAAK,SACd,CACA,IAAI,aAAmC,CACrC,OAAK,KAAK,cACFA,EAAwB,aAAa,EAEtC,KAAK,YACd,CAwEA,IAAI,MAAO,CACT,OAAK,KAAK,OACFA,EAAwB,MAAM,EAE/B,KAAK,KACd,CAGA,IAAI,SAAU,CACZ,OAAK,KAAK,UACFA,EAAwB,SAAS,EAElC,KAAK,QACd,CAEA,mBAA+B,CAC7B,OAAO,IAAIjB,EACT,gDAAkD,KAAK,MACvD,MACA,IACA,KAAK,aAAe,MACtB,CACF,CAEA,OAAO,oBAAoBkB,EAAwB,CAEjD,OAAAA,EAAO,MAAM,UAAU,MAAM,KAAKA,CAAI,EAClC,OAAOA,EAAK,CAAC,GAAM,YACrBA,EAAK,QAAQ,IAAI,EAEZA,CACT,CAEA,MAAM,WAAWpB,EAA6C,CAjLhE,IAAAW,EAkLI,IAAMU,EAAyB,KAAK,eAC9BC,EAAMvB,GAAuBC,CAAO,EAC1C,GAAIsB,EACF,MAAMA,EAIR,GAFA,KAAK,eAAiBJ,IAAwBP,EAAA,KAAK,OAAO,UAAZ,KAAAA,EAAuB,KAAM,KAAK,OAAQX,CAAO,EAC3F,KAAK,mBAAkB,KAAK,iBAAiB,eAAiB,KAAK,gBACnE,KAAK,4BAA4BA,EAASqB,CAAsB,EAOlE,YAAK,WAAW,EACT,IAAI,QAAQ,CAACE,EAASC,IAAW,CAItC,KAAK,mBAAmB,KACtB,CAAC,WAAY,SAAU,WAAY,QAAQ,EAC3C,SAAmCC,EAAoC,CACrE,OAAQ,KAAK,MAAO,CAClB,IAAK,SACL,IAAK,WACHF,EAAQ,EACR,MACF,QACEC,EAAOC,EAAY,MAAM,CAC7B,CACF,CACF,CACF,CAAC,CAEL,CAEA,4BAA4BzB,EAAyC0B,EAAiC,CACpG,GAAI,EAAE,KAAK,QAAU,YAAc,KAAK,QAAU,aAChD,MAAO,GAET,GAAI1B,GAAA,MAAAA,EAAS,OAAQ,CAEnB,IAAM2B,EAAkBC,GAAU5B,EAAQ,MAAM,EAC1C6B,EAAiBD,GAAUF,EAAY,MAAM,EAMnD,GAJI,OAAO,KAAKC,CAAe,EAAE,SAAW,OAAO,KAAKE,CAAc,EAAE,QAIpE,CAAOC,GAAcD,EAAgBF,CAAe,EACtD,MAAO,EAEX,CACA,MAAI,GAAA3B,GAAA,MAAAA,EAAS,QACP,CAAC0B,EAAY,OAAS,CAAOK,GAAU/B,EAAQ,MAAO0B,EAAY,KAAK,GAK/E,CAEA,MAAM,WAAWN,EAA4B,CAC3C,IAAIY,EAGJ,GAFeZ,EAAK,QAEJ,EACd,GAAUnB,GAASmB,EAAK,CAAC,CAAC,EACxBY,EAAW,CAACC,GAAQ,WAAWb,EAAK,CAAC,CAAC,CAAC,UAC9B,MAAM,QAAQA,EAAK,CAAC,CAAC,EAC9BY,EAAWC,GAAQ,gBAAgBb,EAAK,CAAC,CAAC,MAE1C,OAAM,IAAIlB,EACR,gGACA,MACA,GACF,OAGF8B,EAAW,CAACC,GAAQ,WAAW,CAAE,KAAMb,EAAK,CAAC,EAAG,KAAMA,EAAK,CAAC,CAAE,CAAC,CAAC,EAElE,IAAMc,EAAiB,KAAK,OAAO,QAAQ,eAErCC,EAAe,MAAMC,GAAoBJ,EAAU,KAAK,cAA+B,EAEvFK,EAAOC,GAAgBH,CAAY,EACzC,GAAIE,EAAOH,EACT,MAAM,IAAIhC,EACR,wEAAwEmC,CAAI,oBAAoBH,CAAc,UAC9G,MACA,GACF,EAGF,KAAK,0BAA0B,EAE/BnB,EAAO,UACL,KAAK,OACLA,EAAO,UACP,4BACA,qCAAuC,KAAK,MAAQ,qBAAuBoB,EAAa,MAC1F,EAEA,IAAMI,EAAKC,EAA0B,CAAE,OAAQC,EAAQ,QAAS,QAAS,KAAK,KAAM,SAAUN,CAAa,CAAC,EAC5G,OAAO,KAAK,YAAYI,CAAE,CAC5B,CAEA,2BAAkC,CAChC,GAAI,CAAC,KAAK,kBAAkB,YAAY,EACtC,MAAM,KAAK,kBAAkB,SAAS,EAExC,GAAI,KAAK,QAAU,UAAY,KAAK,QAAU,YAC5C,MAAM,KAAK,kBAAkB,CAEjC,CAEA,QAAQP,EAA4B,CAClCjB,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,4BAA6B,kBAAkB,EAC/F,IAAM2B,EAAgB,KAAK,cAC3B,QAASvC,EAAI,EAAGA,EAAI6B,EAAS,OAAQ7B,IAAK,CACxC,IAAMwC,EAAUX,EAAS7B,CAAC,EAC1BuC,EAAc,KAAKC,EAAQ,KAAMA,CAAO,CAC1C,CACF,CAEA,MAAM,QAA6C,CACjD,OAAI,KAAK,QAAU,WACV,KAGF,IAAI,QAAQ,CAACpB,EAASC,IAAW,CACtC,KAAK,QAAQ,GAAO,KAAM,CAACF,EAAKsB,IAAYtB,EAAME,EAAOF,CAAG,EAAIC,EAAQqB,CAAO,CAAE,CACnF,CAAC,CACH,CAEA,QACEC,EACAC,EACAC,EACM,CACDA,IACHA,EAAYzB,GAA2B,CACjCA,GACFP,EAAO,UACL,KAAK,OACLA,EAAO,UACP,4BACA,0BAA4BO,EAAI,SAAS,CAC3C,CAEJ,GAGF,IAAM0B,EAAoB,KAAK,kBAC/B,GAAI,CAACA,EAAkB,YAAY,EAAG,CACpCD,EAASC,EAAkB,SAAS,CAAC,EACrC,MACF,EAEI,KAAK,QAAU,aAAeH,IAChC,KAAK,aAAa,YAAaC,CAAY,EAG7C,KAAK,KAAK,SAAmCrB,EAAiC,CAC5E,OAAQ,KAAK,MAAO,CAClB,IAAK,WACHsB,GAAA,MAAAA,EAAW,KAAMtB,GACjB,MACF,IAAK,WACL,IAAK,YACL,IAAK,SACHsB,GAAA,MAAAA,EACEtB,EAAY,QACVuB,EAAkB,SAAS,GAC3B,IAAI9C,EAAU,6CAA+C,KAAK,MAAO,IAAO,GAAG,GAEvF,MACF,IAAK,YACH6C,GAAA,MAAAA,EAAW,IAAI7C,EAAU,2DAA4D,IAAO,GAAG,GAC/F,KACJ,CACF,CAAC,CACH,CAEA,YAAmB,CACjBa,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,+BAAgC,wBAAwB,EACxG,IAAMkC,EAAYT,EAA0B,CAC1C,OAAQC,EAAQ,OAChB,QAAS,KAAK,KACd,OAAQ,KAAK,eAAe,OAG5B,cAAe,KAAK,WAAW,aACjC,CAAC,EACG,KAAK,eAAe,OACtBQ,EAAU,mBAAyBC,GAAe,KAAK,eAAe,KAAK,CAAsB,EAE/F,KAAK,eACPD,EAAU,QAAQ,eAAe,EAE/B,KAAK,aAAa,kCACpBA,EAAU,cAAgB,KAAK,aAAa,8BAE9C,KAAK,YAAYA,CAAS,EAAE,MAAMnD,EAAI,CACxC,CAEA,MAAM,QAAwB,CAC5B,IAAMkD,EAAoB,KAAK,kBAC/B,GAAI,CAACA,EAAkB,YAAY,EACjC,MAAMA,EAAkB,SAAS,EAEnC,OAAQ,KAAK,MAAO,CAClB,IAAK,YACH,KAAK,YAAY,UAAU,EAC3B,OACF,IAAK,WACH,OACF,IAAK,SACH,MAAM,IAAI9C,EAAU,2CAA4C,MAAO,GAAG,EAC5E,QACE,KAAK,aAAa,WAAW,EAE/B,IAAK,YACH,OAAO,IAAI,QAAQ,CAACqB,EAASC,IAAW,CACtC,KAAK,KAAK,SAAmCC,EAAiC,CAC5E,OAAQ,KAAK,MAAO,CAClB,IAAK,WACHF,EAAQ,EACR,MACF,IAAK,WACL,IAAK,YACL,IAAK,SACHC,EACEC,EAAY,QACVuB,EAAkB,SAAS,GAC3B,IAAI9C,EAAU,6CAA+C,KAAK,MAAO,IAAO,GAAG,CACvF,EACA,MACF,IAAK,YACHsB,EAAO,IAAItB,EAAU,2DAA4D,IAAO,GAAG,CAAC,EAC5F,KACJ,CACF,CAAC,CACH,CAAC,CACL,CACF,CAEA,YAAmB,CACjBa,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,2BAA4B,wBAAwB,EACpG,IAAMoC,EAAMX,EAA0B,CAAE,OAAQC,EAAQ,OAAQ,QAAS,KAAK,IAAK,CAAC,EACpF,KAAK,YAAYU,CAAG,EAAE,MAAMrD,EAAI,CAClC,CAEA,MAAM,aAAasB,EAA6E,CAC9F,GAAM,CAACgC,EAAOC,CAAQ,EAAI9C,EAAgB,oBAAoBa,CAAI,EAElE,GAAI,KAAK,QAAU,SACjB,MAAMlB,EAAU,WAAW,KAAK,kBAAkB,CAAC,EAWrD,OAPIkD,GAAS,OAAOA,GAAU,UAAY,CAAC,MAAM,QAAQA,CAAK,EAC5D,KAAK,OAAO,uBAAuB,gBAAgB,KAAMA,EAAOC,CAAQ,EAExE,KAAK,cAAc,GAAGD,EAAOC,CAAQ,EAInC,KAAK,eAAe,oBAAsB,GACrC,KAAK,OAAO,EAEZ,IAEX,CAEA,eAAejC,EAA+C,CApchE,IAAAT,EAqcI,GAAM,CAACyC,EAAOC,CAAQ,EAAI9C,EAAgB,oBAAoBa,CAAI,EAGlE,GAAK,OAAOgC,GAAU,UAAY,CAACC,IAAa1C,EAAA,KAAK,wBAAL,MAAAA,EAA4B,IAAI0C,GAAW,CACzF,KAAK,OAAO,uBACT,kCAAkC,KAAMD,EAAOC,CAAQ,EACvD,QAASC,GAAM,KAAK,cAAc,IAAIA,CAAC,CAAC,EAC3C,MACF,CAEA,KAAK,cAAc,IAAIF,EAAOC,CAAQ,CACxC,CAEA,MAAa,CAEX,OAAQ,KAAK,MAAO,CAClB,IAAK,cACL,IAAK,YACL,IAAK,WACH,MAAM,IAAIE,EAAiB,0CAA2C,GAAK,EAC7E,QACF,CACA,IAAMP,EAAoB,KAAK,kBAC/B,GAAI,CAACA,EAAkB,YAAY,EACjC,MAAMA,EAAkB,SAAS,EAInC,IAAMQ,EAAchB,EAA0B,CAAE,OAAQC,EAAQ,KAAM,QAAS,KAAK,IAAK,CAAC,EACtF,KAAK,oBACPe,EAAY,cAAgB,KAAK,mBAEnCR,EAAkB,KAAKQ,CAAW,CACpC,CAEA,MAAM,YAAYL,EAAqC,CACrD,OAAO,IAAI,QAAQ,CAAC5B,EAASC,IAAW,CACtC,KAAK,kBAAkB,KAAK2B,EAAK,KAAK,OAAO,QAAQ,cAAgB7B,GAAQ,CACvEA,EACFE,EAAOF,CAAG,EAEVC,EAAQ,CAEZ,CAAC,CACH,CAAC,CACH,CAEA,MAAM,aAAakC,EAAgD,CACjE,IAAMN,EAAMX,EAA0B,CACpC,OAAQC,EAAQ,SAChB,QAAS,KAAK,KACd,SAAUgB,CACZ,CAAC,EACD,OAAO,KAAK,YAAYN,CAAG,CAC7B,CAEA,UAAUO,EAAgD,CACxD,IAAMP,EAAMX,EAA0B,CACpC,OAAQC,EAAQ,OAChB,QAAS,KAAK,KACd,MAAOiB,CACT,CAAC,EACD,OAAO,KAAK,YAAYP,CAAG,CAC7B,CAGA,MAAM,eAAeR,EAAyC,EAE1DA,EAAQ,SAAWF,EAAQ,UAC3BE,EAAQ,SAAWF,EAAQ,SAC3BE,EAAQ,SAAWF,EAAQ,UAC3BE,EAAQ,SAAWF,EAAQ,QAC3BE,EAAQ,SAAWF,EAAQ,aAG3B,KAAK,iBAAiBE,EAAQ,aAAa,EAG7C,IAAIgB,EACFC,EAAS,GACX,OAAQjB,EAAQ,OAAQ,CACtB,KAAKF,EAAQ,SAAU,CACrB,KAAK,WAAW,aAAeE,EAAQ,cACvC,KAAK,MAAQA,EAAQ,QAAQ,EAC7B,KAAK,OAAUA,EAAgB,QAAU,CAAC,EAC1C,IAAMkB,EAAiBlB,EAAQ,qBAAqB,EACpD,KAAK,MAASkB,GAAyBC,GAAeD,CAAc,GAA4B,OAChG,IAAME,EAAUpB,EAAQ,QAAQ,SAAS,EACnCqB,EAAcrB,EAAQ,QAAQ,cAAc,EAC5CsB,EAAatB,EAAQ,QAAQ,aAAa,EAC1CuB,EAAavB,EAAQ,QAAQ,aAAa,EAChD,GAAI,KAAK,QAAU,WAAY,CACxBoB,IAGC,KAAK,WACP,KAAK,UAAU,WAAWC,CAAW,EAGnC,KAAK,UACP,KAAK,SAAS,WAAWE,CAAU,GAGvC,IAAMC,EAAS,IAAIC,GAAmB,KAAK,MAAO,KAAK,MAAOL,EAASE,EAAYtB,EAAQ,KAAK,EAChG,KAAK,mBAAmB,KAAK,SAAUwB,CAAM,GACzC,CAACJ,GAAW,KAAK,eAAe,mBAClC,KAAK,KAAK,SAAUI,CAAM,CAE9B,MAAW,KAAK,QAAU,YAExB,KAAK,kBAAkB,EAEvB,KAAK,YAAY,WAAYxB,EAAQ,MAAOoB,EAASC,EAAaC,EAAYC,CAAU,EAE1F,KACF,CAEA,KAAKzB,EAAQ,SAAU,CACrB,IAAM4B,EAAY1B,EAAQ,MACtBzC,EAAU,WAAWyC,EAAQ,KAAK,EAClC,IAAIzC,EAAU,mBAAoB,MAAO,GAAG,EAC5C,KAAK,QAAU,YACjB,KAAK,YAAY,WAAYmE,CAAS,EAC7B,KAAK,QAAU,YAIxB,KAAK,YAAY,YAAaA,CAAS,GAC9B,KAAK,QAAU,YAAc,KAAK,QAAU,cAErD,KAAK,aAAa,YAAaA,CAAS,EAG1C,KACF,CAEA,KAAK5B,EAAQ,KAMX,GAJAmB,EAAS,GACTD,EAAoB,KAAK,kBAAoBhB,EAAQ,cAGjD,CAACA,EAAQ,SAAU,MAEzB,KAAKF,EAAQ,SAAU,CACrB,GAAI,CAACE,EAAQ,SACX,MAGF2B,GAAyB3B,CAAO,EAChC,IAAM3C,EAAU,KAAK,eACrB,GAAI,KAAK,UAAW,CAClB,IAAMuE,EAAmB,MAAM,QAAQ,IACrC5B,EAAQ,SAAS,IAAK6B,GACbA,EAAI,OAAOxE,EAAS,KAAK,MAAM,CACvC,CACH,EAEA,KAAK,UAAU,YAAYuE,EAAkBX,EAAQD,CAAwB,CAC/E,CACA,KACF,CAIA,KAAKlB,EAAQ,OACb,KAAKA,EAAQ,YAAa,CACxB,GAAI,CAAC,KAAK,UAAY,CAACE,EAAQ,MAC7B,OAGF2B,GAAyB3B,CAAO,EAChC,IAAMe,EAAiBf,EAAQ,MAKzB8B,EAAS,KAAK,OAAO,WAAW,kBAAkB,yBAAyB,EACjF,MAAM,QAAQ,IACZf,EAAe,IAAKgB,GAClB,KAAK,OAAO,eAAgB,cAAc,OAAOA,EAAI,KAAK,OAAQ,KAAK,OAAQ3D,EAAQ4D,EAAOF,CAAM,CACtG,CACF,EAEI9B,EAAQ,SAAWF,EAAQ,OAC7B,KAAK,SAAS,qBAAqBiB,CAAc,EAEjD,KAAK,SAAS,yBAAyBA,EAAgBf,EAAQ,aAAa,EAG9E,KACF,CAEA,KAAKF,EAAQ,QAAS,CAEpB,GAAI,KAAK,QAAU,WAAY,CAC7B1B,EAAO,UACL,KAAK,OACLA,EAAO,UACP,mCACA,YACE4B,EAAQ,GACR,8BACA,KAAK,KACL,wCACA,KAAK,MACL,KACJ,EACA,MACF,CAEA2B,GAAyB3B,CAAO,EAEhC,IAAMiC,EAAUjC,EAAQ,SACtBkC,EAAeD,EAAQ,CAAC,EACxBE,EAAcF,EAAQA,EAAQ,OAAS,CAAC,EAE1C,GACEC,EAAa,QACbA,EAAa,OAAO,OACpBA,EAAa,OAAO,MAAM,OAAS,KAAK,aAAa,UACrD,CACA,IAAM1B,EACJ,8EACAR,EAAQ,GACR,sBACA,KAAK,KACL,KACF5B,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,mCAAoCoC,CAAG,EACvF,KAAK,4BAA4B,IAAIjD,EAAUiD,EAAK,MAAO,GAAG,CAAC,EAC/D,KACF,CAEA,IAAInB,EAAsB,CAAC,EAC3B,QAAS7B,EAAI,EAAGA,EAAIyE,EAAQ,OAAQzE,IAAK,CACvC,GAAM,CAAE,QAAA4E,EAAS,IAAAzD,CAAI,EAAI,MAAMsD,EAAQzE,CAAC,EAAE,cAAc,KAAK,iBAAkB,KAAK,MAAM,EAG1F,GAFA6B,EAAS7B,CAAC,EAAI4E,EAEVzD,EACF,OAAQA,EAAI,KAAM,CAChB,IAAK,OAEH,KAAK,4BAA4BA,CAAG,EACpC,OAEF,IAAK,OACL,IAAK,OAEH,KAAK,YAAY,SAAUA,CAAG,EAC9B,OAEF,QAEF,CAEJ,CAEA,KAAK,aAAa,UAAYwD,EAAY,GAC1C,KAAK,aAAa,6BAA+BnC,EAAQ,cACzD,KAAK,QAAQX,CAAQ,EACrB,KACF,CAEA,KAAKS,EAAQ,WAAY,CACvB6B,GAAyB3B,CAAO,EAChC,IAAM3C,EAAU,KAAK,eACrB,GAAI,KAAK,aAAc,CACrB,IAAMgF,EAAc,MAAM,QAAQ,KAC/BrC,EAAQ,aAAe,CAAC,GAAG,IAAK6B,GACxBA,EAAI,OAAOxE,EAAS,KAAK,MAAM,CACvC,CACH,EAEA,KAAK,aAAa,iBAAiBgF,CAAW,CAChD,CACA,KACF,CAEA,KAAKvC,EAAQ,MAAO,CAElB,IAAMnB,EAAMqB,EAAQ,MAChBrB,GAAOA,EAAI,MAAQ,MAErB,KAAK,kBAAkB,EAEvB,KAAK,YAAY,SAAUpB,EAAU,WAAWoB,CAAG,CAAC,EAEtD,KACF,CAEA,QAEEP,EAAO,UACL,KAAK,OACLA,EAAO,UACP,mCACA,gDAAkD4B,EAAQ,OAAS,GACrE,CACJ,CACF,CAEA,4BAA4BsC,EAAyB,CAC9C,KAAK,aAAa,kCACrBlE,EAAO,UACL,KAAK,OACLA,EAAO,UACP,mCACA,2CACF,EACA,KAAK,aAAa,gCAAkC,GACpD,KAAK,QAAQ,GAAMkE,EAAQ,IAAM,CAC/B,KAAK,aAAa,gCAAkC,EACtD,CAAC,EAEL,CAEA,YAAmB,CACjBlE,EAAO,UACL,KAAK,OACLA,EAAO,UACP,6BACA,8BAAgC,KAAK,IACvC,CACF,CAEA,YACEE,EACAgE,EACAlB,EACAC,EACAC,EACAC,EACM,CAcN,GAbAnD,EAAO,UACL,KAAK,OACLA,EAAO,UACP,8BACA,UAAY,KAAK,KAAO,qBAAuB,KAAK,MAAQ,qBAAuBE,CACrF,EACA,KAAK,gBAAgB,EAGjB,CAAC,WAAY,YAAa,QAAQ,EAAE,SAASA,CAAK,IACpD,KAAK,WAAW,cAAgB,MAG9BA,IAAU,KAAK,MACjB,OAEE,KAAK,WACP,KAAK,UAAU,kBAAkBA,EAAO+C,EAAaiB,CAAM,EAEzD,KAAK,UACP,KAAK,SAAS,kBAAkBhE,EAAOiD,CAAU,EAE/CjD,IAAU,aAAe,KAAK,kBAAkB,MAAM,WACxD,KAAK,gBAAgB,EAErB,KAAK,iBAAiB,EAEpBgE,IACF,KAAK,YAAcA,GAErB,IAAMd,EAAS,IAAIC,GAAmB,KAAK,MAAOnD,EAAO8C,EAASE,EAAYgB,CAAM,EAC9EC,EAAS,8BAAgC,KAAK,KAAO,IACrDvC,EAAU1B,GAASgE,EAAS,aAAeA,EAAS,IACtDhE,IAAU,SACZF,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAWmE,EAAQvC,CAAO,EAE/D5B,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAWmE,EAAQvC,CAAO,EAG7D1B,IAAU,aAAeA,IAAU,cACrC,KAAK,WAAa,GAIhBA,IAAU,YACZ,KAAK,WAAW,EAGdA,IAAU,WACZ,KAAK,cAAgB,IACZA,IAAU,aAAeA,IAAU,YAC5C,KAAK,cAAgB,IAGvB,KAAK,MAAQA,EACb,KAAK,mBAAmB,KAAKA,EAAOkD,CAAM,EAC1C,KAAK,KAAKlD,EAAOkD,CAAM,CACzB,CAEA,aAAalD,EAAyBgE,EAAiC,CACrElE,EAAO,UACL,KAAK,OACLA,EAAO,UACP,+BACA,UAAY,KAAK,KAAO,aAAeE,CACzC,EACA,KAAK,YAAYA,EAAOgE,CAAM,EAE9B,KAAK,kBAAkB,CACzB,CAEA,mBAA0B,CAGxB,GAAI,CADY,KAAK,kBAAkB,MAC1B,WAAY,CACvBlE,EAAO,UACL,KAAK,OACLA,EAAO,UACP,oCACA,iCAAmC,KAAK,kBAAkB,MAAM,KAClE,EACA,MACF,CASA,OAPAA,EAAO,UACL,KAAK,OACLA,EAAO,UACP,oCACA,UAAY,KAAK,KAAO,aAAe,KAAK,KAC9C,EAEQ,KAAK,MAAO,CAClB,IAAK,YACH,KAAK,4BAA4B,EACjC,KAAK,WAAW,EAChB,MACF,IAAK,YACH,KAAK,4BAA4B,EACjC,KAAK,WAAW,EAChB,MACF,IAAK,WAEH,KAAK,KAAK,EACV,MACF,QACE,KACJ,CACF,CAEA,qBAA4B,CAC1B,OAAQ,KAAK,MAAO,CAClB,IAAK,YAAa,CAChB,IAAMO,EAAM,IAAIpB,EAAU,2BAA4B,MAAO,GAAG,EAChE,KAAK,YAAY,YAAaoB,CAAG,EACjC,KACF,CACA,IAAK,YAAa,CAChB,IAAMA,EAAM,IAAIpB,EAAU,2BAA4B,MAAO,GAAG,EAChE,KAAK,YAAY,WAAYoB,CAAG,EAChC,KACF,CACA,QACE,KAAK,kBAAkB,EACvB,KACJ,CACF,CAEA,6BAAoC,CAC7B,KAAK,aACR,KAAK,WAAa,WAAW,IAAM,CACjCP,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,8CAA+C,eAAe,EAC9G,KAAK,WAAa,KAClB,KAAK,oBAAoB,CAC3B,EAAG,KAAK,OAAO,QAAQ,SAAS,sBAAsB,EAE1D,CAEA,iBAAwB,CACtB,IAAMoE,EAAa,KAAK,WACpBA,IACF,aAAaA,CAAU,EACvB,KAAK,WAAa,KAEtB,CAEA,iBAAwB,CACtB,GAAI,KAAK,WAAY,OAErB,KAAK,aACL,IAAMC,EAAmBC,GAAa,KAAK,OAAO,QAAQ,SAAS,oBAAqB,KAAK,UAAU,EAEvG,KAAK,WAAa,WAAW,IAAM,CAG7B,KAAK,QAAU,aAAe,KAAK,kBAAkB,MAAM,aAC7D,KAAK,WAAa,KAClBtE,EAAO,UACL,KAAK,OACLA,EAAO,UACP,sCACA,yBACF,EACA,KAAK,aAAa,WAAW,EAEjC,EAAGqE,CAAU,CACf,CAEA,kBAAyB,CACnB,KAAK,aACP,aAAa,KAAK,UAA4B,EAC9C,KAAK,WAAa,KAEtB,CAkCA,eAAkC,CAChC,IAAME,EAAI,KAAK,MACf,OAAIA,IAAM,eAAiBA,IAAM,YAAcA,IAAM,SAC5C,KAEF,IAAIpF,EACT,iKACEoF,EACF,MACA,GACF,CACF,CAEA,iBAAiBC,EAAqC,CACpDxE,EAAO,UACL,KAAK,OACLA,EAAO,UACP,qCACA,qCAAuCwE,EAAgB,gBAAkB,KAAK,WAAW,aAC3F,EAIIA,IACF,KAAK,WAAW,cAAgBA,EAEpC,CAEA,MAAM,QAAsC,CAC1C,OAAO,KAAK,OAAO,KAAK,aAAa,OAAO,IAAI,CAClD,CACF,EAEA,SAAS3D,GAAU4D,EAAmC,CACpD,IAA4C7E,EAAA6E,GAAiB,CAAC,EAAtD,OAAOC,CAlgCjB,EAkgC8C9E,EAC5C,OADqB+E,GAAuB/E,EAAvB,CAAb,SAEV,CAEA,IAAOgF,GAAQrF,GC1/Bf,IAAMsF,GAAN,KAA0B,CAKxB,YAAYC,EAA0B,CACpC,KAAK,QAAUA,EACf,KAAK,OAASA,EAAQ,OACtB,KAAK,cAAgB,IAAIC,EAAa,KAAK,MAAM,CACnD,CAEA,MAAM,QAAQC,EAA+BC,EAAkE,CAC7G,IAAMC,EAAc,KAAK,QAAQ,KAC3BC,EAAaC,GAA4BJ,EAAaC,CAAgB,EACtEI,EAAiB,MAAMF,EAAW,OAAO,EAE/C,KAAK,QAAQ,0BAA0B,EAEvCG,EAAO,UACL,KAAK,OACLA,EAAO,UACP,gCACA,iBACEJ,EACA,6CACAC,EAAW,cACX,YACAA,EAAW,IACf,EAEA,IAAMI,EAAKC,EAA0B,CACnC,OAAQC,EAAQ,WAChB,QAASP,EACT,YAAa,CAACG,CAAc,CAC9B,CAAC,EACD,OAAO,KAAK,QAAQ,YAAYE,CAAE,CACpC,CAEA,MAAM,OAAOP,EAA+BC,EAAkE,CAC5G,OAAAA,EAAiB,OAAS,oBACnB,KAAK,QAAQD,EAAaC,CAAgB,CACnD,CAEA,MAAM,aAAaS,EAAwD,CACzE,IAAMC,EAAOC,GAAgB,oBAAoBF,CAAK,EAChDG,EAAQF,EAAK,CAAC,EACdG,EAAWH,EAAK,CAAC,EACjBb,EAAU,KAAK,QAErB,GAAIA,EAAQ,QAAU,SACpB,MAAMiB,EAAU,WAAWjB,EAAQ,kBAAkB,CAAC,EAUxD,GAPA,KAAK,cAAc,GAAGe,EAAOC,CAAQ,EAEjC,KAAK,QAAQ,eAAe,oBAAsB,IACpD,MAAMhB,EAAQ,OAAO,GAIlB,KAAK,QAAQ,QAAU,YAAc,KAAK,QAAQ,MAAQkB,EAAM,wBAA0B,EAC7F,MAAM,IAAID,EACR,yOACA,MACA,GACF,CAEJ,CAEA,eAAeL,EAAgD,CAC7D,IAAMC,EAAOC,GAAgB,oBAAoBF,CAAK,EAChDG,EAAQF,EAAK,CAAC,EACdG,EAAWH,EAAK,CAAC,EACvB,KAAK,cAAc,IAAIE,EAAOC,CAAQ,CACxC,CAEA,iBAAiBG,EAAiC,CAChD,QAAWd,KAAcc,EACvB,KAAK,cAAc,KAAKd,EAAW,MAAQ,GAAIA,CAAU,CAE7D,CAEA,MAAM,IACJH,EACAkB,EACsC,CACtC,OAAOC,GAAgB,UAAU,IAAI,KAAK,KAAMnB,EAAakB,CAAM,CACrE,CACF,EAEOE,GAAQvB,GCpFR,IAAMwB,GAAN,MAAMA,WAAoBC,EAAS,CAExC,YAAYC,EAAkC,CApBhD,IAAAC,EAAAC,EAsBI,GAAI,CADYJ,GAAY,SAE1B,MAAM,IAAI,MAAM,gDAAgD,EAGlE,MACEK,EAAS,iBAAiBH,EAAS,GAAM,OAAQI,EAAO,cAAeC,EAAAC,EAAA,GAClEC,IADkE,CAErE,QAAQN,EAAAH,GAAY,SAAZ,KAAAG,EAAsB,OAC9B,SAASC,EAAAJ,GAAY,WAAZ,KAAAI,EAAwB,OACjC,YAAa,CACX,WAAAM,GACA,eAAAC,GACA,oBAAAC,GACA,gBAAAC,EACF,CACF,EAAC,CACH,CACF,CAGA,WAAW,QAAS,CAClB,GAAI,KAAK,UAAY,KACnB,MAAM,IAAI,MAAM,wDAAwD,EAG1E,OAAO,KAAK,OACd,CACA,WAAW,OAAOC,EAAkC,CAClD,KAAK,QAAUA,CACjB,CAUF,EA3Cad,GAuBI,QAAkC,KAvBtCA,GAmCJ,QAAUe,GAnCNf,GAoCJ,gBAAkBgB,GApCdhB,GAqCJ,WAAaiB,GArCTjB,GAuCJ,SAA2B,KAvCvBA,GA0CJ,MAAQkB,GA1CV,IAAMC,GAANnB,GCbP,IAAMoB,GAAN,cAA2BC,CAAa,CAGtC,YAAYC,EAAgB,CAC1B,MAAMA,CAAM,EACZ,KAAK,SAAW,CAAC,CACnB,CAEA,OAAgB,CACd,OAAO,KAAK,SAAS,MACvB,CAEA,KAAKC,EAA+B,CAClC,KAAK,SAAS,KAAKA,CAAO,CAC5B,CAEA,OAAoC,CAClC,OAAO,KAAK,SAAS,MAAM,CAC7B,CAEA,MAAuB,CACrB,OAAO,KAAK,SAAS,KAAK,SAAS,OAAS,CAAC,CAC/C,CAEA,SAA4B,CAC1B,OAAO,KAAK,SAAS,MAAM,CAC7B,CAEA,OAAOC,EAAuC,CAC5C,KAAK,SAAS,KAAK,MAAM,KAAK,SAAUA,CAAQ,CAClD,CAEA,QAAQA,EAAuC,CAC7C,KAAK,SAAS,QAAQ,MAAM,KAAK,SAAUA,CAAQ,CACrD,CAEA,iBAAiBC,EAAgBC,EAAeC,EAA8B,CAC5EC,EAAO,UACL,KAAK,OACLA,EAAO,UACP,kCACA,YAAcH,EAAS,aAAeC,CACxC,EACAC,EAAMA,GAAO,KACb,IAAMH,EAAW,KAAK,SACtB,GAAIA,EAAS,SAAW,EACtB,MAAM,IAAI,MAAM,oFAAoF,EAEtG,IAAMK,EAAQL,EAAS,CAAC,EACxB,GAAIK,EAAO,CACT,IAAMC,EAAcD,EAAM,QAAQ,UAC5BE,EAAYN,EAASC,EAC3B,GAAIK,EAAYD,EAAa,CAC3B,IAAME,EAAmBR,EAAS,OAAO,EAAGO,EAAYD,CAAW,EACnE,QAAWP,KAAWS,EACnBT,EAAQ,SAAsBI,CAAG,CAEtC,CACIH,EAAS,QAAU,GAAG,KAAK,KAAK,MAAM,CAC5C,CACF,CAEA,oBAAoBG,EAAsB,CACxC,KAAK,iBAAiB,EAAG,OAAO,kBAAoB,OAAO,UAAWA,CAAG,CAC3E,CAEA,oBAA2B,CACzB,QAASM,KAAO,KAAK,SACnBA,EAAI,cAAgB,EAExB,CAEA,OAAc,CACZL,EAAO,UACL,KAAK,OACLA,EAAO,UACP,uBACA,YAAc,KAAK,SAAS,OAAS,WACvC,EACA,KAAK,SAAW,CAAC,EACjB,KAAK,KAAK,MAAM,CAClB,CACF,EAEOM,GAAQd,GC/ER,IAAMe,GAAN,KAAqB,CAO1B,YAAYC,EAA0BC,EAAwB,CAC5D,KAAK,QAAUD,EACf,KAAK,SAAWC,EAChB,KAAK,OAAS,GACd,IAAMC,EAASF,EAAQ,OACvB,KAAK,cAAgB,GACrB,KAAK,YACH,OAAOE,GAAW,UAClB,CAACC,EAAQ,QAASA,EAAQ,SAAUA,EAAQ,WAAYA,EAAQ,MAAM,EAAE,SAASD,CAAM,CAC3F,CACF,EAEME,GAAN,cAAuBC,CAAa,CAIlC,YAAYC,EAAsB,CAChC,MAAMA,EAAU,MAAM,EACtB,KAAK,UAAYA,EACjB,KAAK,aAAe,IAAIC,GAAa,KAAK,MAAM,EAChDD,EAAU,GAAG,MAAO,CAACE,EAAgBC,IAAkB,CACrD,KAAK,MAAMD,EAAQC,CAAK,CAC1B,CAAC,EACDH,EAAU,GAAG,OAAQ,CAACE,EAAgBC,EAAeC,IAAmB,CACtE,KAAK,OAAOF,EAAQC,EAAOC,CAAG,CAChC,CAAC,CACH,CAEA,MAAMF,EAAgBC,EAAqB,CACzCE,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,mBAAoB,YAAcH,EAAS,aAAeC,CAAK,EAC/G,KAAK,aAAa,iBAAiBD,EAAQC,CAAK,CAClD,CAEA,OAAOD,EAAgBC,EAAeC,EAAsB,CAC1DC,EAAO,UACL,KAAK,OACLA,EAAO,UACP,oBACA,YAAcH,EAAS,aAAeC,EAAQ,WAAmBG,EAAaF,CAAG,CACnF,EACKA,IACHA,EAAM,IAAIG,EAAU,iDAAkD,MAAO,GAAG,GAElF,KAAK,aAAa,iBAAiBL,EAAQC,EAAOC,CAAG,CACvD,CAEA,SAASI,EAA6B,CACpC,IAAMC,EAAe,KAAK,aAC1B,GAAIA,EAAa,MAAM,IAAM,EAAG,CAC9BD,EAAS,EACT,MACF,CACAC,EAAa,KAAK,OAAQD,CAAQ,CACpC,CAEA,KAAKE,EAAsC,CACrCA,EAAe,aACjB,KAAK,aAAa,KAAKA,CAAc,EAEnC,KAAK,OAAO,UAAUL,EAAO,SAAS,GACxCA,EAAO,iBACL,KAAK,OACLA,EAAO,UACP,kBACA,gBACEM,GACED,EAAe,QACf,KAAK,UAAU,kBAAkB,SAAS,kBAC1C,KAAK,UAAU,kBAAkB,SAAS,aAC1C,KAAK,UAAU,kBAAkB,SAAS,cAC5C,CACJ,EAEFA,EAAe,cAAgB,GAC/B,KAAK,UAAU,KAAKA,EAAe,OAAO,CAC5C,CAEA,cAA0B,CACxB,OAAO,KAAK,SACd,CAEA,oBAAuC,CACrC,OAAO,KAAK,aAAa,QAAQ,CACnC,CAEA,sBAA6B,CAC3B,OAAO,KAAK,aAAa,MAAM,CACjC,CAEA,QAAe,CACb,IAAMV,EAAY,KAAK,UACvB,KAAK,SAAS,UAAY,CACxBA,EAAU,WAAW,CACvB,CAAC,CACH,CACF,EAEOY,GAAQd,GChHf,IAAMe,GAAN,KAA4B,CAM1B,YAAYC,EAAmBC,EAAkBC,EAAyBC,EAA4B,CACpG,KAAK,SAAWH,EAChB,KAAK,QAAUC,EACXC,IAAS,KAAK,QAAUA,GACxBC,IAAQ,KAAK,OAASA,EAC5B,CACF,EAEOC,GAAQL,GCdf,IAAMM,GAAuB,CAC3B,aAAc,MACd,UAAW,MACX,OAAQ,IACR,QAAS,MACT,OAAQ,MACR,uBAAwB,MACxB,oBAAqB,KACvB,EAEMC,GAAmB,CACvB,aAAc,IACZC,EAAU,WAAW,CACnB,WAAY,IACZ,KAAMF,GAAqB,aAC3B,QAAS,8CACX,CAAC,EACH,UAAW,IACTE,EAAU,WAAW,CACnB,WAAY,IACZ,KAAMF,GAAqB,UAC3B,QAAS,kCACX,CAAC,EACH,OAAQ,IACNE,EAAU,WAAW,CACnB,WAAY,IACZ,KAAMF,GAAqB,OAC3B,QAAS,6CACX,CAAC,EACH,QAAS,IACPE,EAAU,WAAW,CACnB,WAAY,IACZ,KAAMF,GAAqB,QAC3B,QAAS,oBACX,CAAC,EACH,OAAQ,IACNE,EAAU,WAAW,CACnB,WAAY,IACZ,KAAMF,GAAqB,OAC3B,QAAS,mBACX,CAAC,EACH,qBAAsB,IACpBE,EAAU,WAAW,CACnB,WAAY,IACZ,KAAMF,GAAqB,uBAC3B,QAAS,2BACX,CAAC,EACH,kBAAmB,IACjBE,EAAU,WAAW,CACnB,WAAY,IACZ,KAAMF,GAAqB,uBAC3B,QAAS,wBACX,CAAC,CACL,EAEO,SAASG,GAAYC,EAAgB,CAC1C,MAAI,CAACA,EAAI,YAAc,CAACA,EAAI,MAAQA,EAAI,YAAc,IAC7C,GAEF,OAAO,OAAOJ,EAAoB,EAAE,SAASI,EAAI,IAAI,CAC9D,CAEA,IAAOC,GAAQJ,GChCf,IAAMK,GAAeC,EAA0B,CAAE,OAAQC,EAAQ,KAAM,CAAC,EAClEC,GAAoBF,EAA0B,CAAE,OAAQC,EAAQ,UAAW,CAAC,EAanEE,GAAf,cAAiCC,CAAa,CAa5C,YAAYC,EAAsCC,EAAYC,EAAyBC,EAA6B,CAClH,MAAMH,EAAkB,MAAM,EAC1BG,IACFD,EAAO,OAAS,OAChBA,EAAO,WAAa,IAEtB,KAAK,kBAAoBF,EACzB,KAAK,KAAOC,EACZ,KAAK,OAASC,EACd,KAAK,SAAWA,EAAO,QAAQ,SAC/B,KAAK,OAASA,EAAO,OACrB,KAAK,YAAc,GACnB,KAAK,WAAa,GAClB,KAAK,WAAa,GAClB,KAAK,gBAAkB,KACvB,KAAK,UAAY,KACjB,KAAK,aAAe,IACtB,CAKA,SAAgB,CAAC,CAEjB,OAAc,CACR,KAAK,aACP,KAAK,aAAa,EAEpB,KAAK,OAAO,SAAUE,GAAiB,OAAO,CAAC,CACjD,CAEA,WAAWC,EAA+B,CAGpC,KAAK,aACP,KAAK,kBAAkB,EAEzB,KAAK,OAAO,eAAgBA,GAAOD,GAAiB,aAAa,CAAC,CACpE,CAEA,KAAKC,EAAsB,CAErB,KAAK,aACP,KAAK,kBAAkB,EAEzB,KAAK,OAAO,SAAUA,GAAOD,GAAiB,OAAO,CAAC,CACxD,CAEA,OAAOE,EAAeD,EAA+B,CA3GvD,IAAAE,EA4GQ,KAAK,aAIT,KAAK,WAAa,GAClB,KAAK,YAAc,GACnB,KAAK,gBAAkB,KACvB,cAAaA,EAAA,KAAK,YAAL,KAAAA,EAAkB,MAAS,EACxC,KAAK,UAAY,KACjB,KAAK,KAAKD,EAAOD,CAAG,EACpB,KAAK,QAAQ,EACf,CAEA,kBAAkBG,EAAgC,CAqBhD,OApBI,KAAK,OAAO,UAAUC,EAAO,SAAS,GACxCA,EAAO,iBACL,KAAK,OACLA,EAAO,UACP,gCACA,eACE,KAAK,UACL,KACAC,GACEF,EACA,KAAK,kBAAkB,SAAS,kBAChC,KAAK,kBAAkB,SAAS,aAChC,KAAK,kBAAkB,SAAS,cAClC,EACA,oBACA,KAAK,kBAAkB,YAC3B,EAEF,KAAK,WAAW,EAERA,EAAQ,OAAQ,CACtB,KAAKZ,EAAQ,UACXa,EAAO,iBACL,KAAK,OACLA,EAAO,UACP,gCACA,KAAK,UAAY,8BAAgC,KAAK,kBAAkB,YAC1E,EACA,KAAK,KAAK,YAAaD,EAAQ,EAAE,EACjC,MACF,KAAKZ,EAAQ,UACX,KAAK,UAAUY,CAAO,EACtB,KAAK,KAAK,YAAaA,EAAQ,MAAOA,EAAQ,aAAcA,EAAQ,kBAAmBA,CAAO,EAC9F,MACF,KAAKZ,EAAQ,OACX,KAAK,QAAQY,CAAO,EACpB,MACF,KAAKZ,EAAQ,aACX,KAAK,aAAaY,CAAO,EACzB,MACF,KAAKZ,EAAQ,IACX,KAAK,KAAK,MAAOY,EAAQ,UAAWA,EAAQ,KAAK,EACjD,MACF,KAAKZ,EAAQ,KACX,KAAK,KAAK,OAAQY,EAAQ,UAAWA,EAAQ,MAAOA,EAAQ,KAAK,EACjE,MACF,KAAKZ,EAAQ,KACX,KAAK,kBAAkB,iBAAiBY,EAAS,IAAI,EACrD,MACF,KAAKZ,EAAQ,SAEX,MACF,KAAKA,EAAQ,KACLe,EAAmB,KAAK,KAAK,UAAU,EAAIN,GAA0B,CACrEA,GACFI,EAAO,UACL,KAAK,OACLA,EAAO,UACP,gCACA,uEAA+EG,EAAaP,CAAG,CACjG,CAEJ,CAAC,EACD,MACF,KAAKT,EAAQ,MAWX,GAVAa,EAAO,UACL,KAAK,OACLA,EAAO,UACP,gCACA,yCACE,KAAK,kBAAkB,aACvB,WACAI,EAAS,OAAO,QAAQL,EAAQ,KAAK,GACpCA,EAAQ,QAAU,cAAgBA,EAAQ,QAAU,GACzD,EACIA,EAAQ,UAAY,OAAW,CACjC,KAAK,aAAaA,CAAO,EACzB,KACF,CAEA,KAAK,kBAAkB,iBAAiBA,EAAS,IAAI,EACrD,MACF,QAEE,KAAK,kBAAkB,iBAAiBA,EAAS,IAAI,CACzD,CACF,CAEA,UAAUA,EAAgC,CAExC,GADA,KAAK,YAAc,GACf,CAACA,EAAQ,kBACX,MAAM,IAAI,MAAM,2EAA2E,EAE7F,IAAMM,EAAkBN,EAAQ,kBAAkB,gBAC9CM,IACF,KAAK,gBAAkBA,EAAkB,KAAK,SAAS,uBACvD,KAAK,WAAW,EAGpB,CAEA,aAAaN,EAAgC,CAG3C,IAAMH,EAAMG,GAAWA,EAAQ,MAC/BC,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,2BAA4B,SAAiBG,EAAaP,CAAG,CAAC,EAC9G,KAAK,OAAO,eAAgBA,CAAG,CACjC,CAEA,aAAaG,EAAgC,CAI3C,IAAMH,EAAMG,GAAWA,EAAQ,MAC/BC,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,2BAA4B,SAAiBG,EAAaP,CAAG,CAAC,EAC9G,KAAK,OAAO,SAAUA,CAAG,CAC3B,CAEA,QAAQG,EAAgC,CACtC,IAAMH,EAAMG,GAAWA,EAAQ,MAC/BC,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,sBAAuB,SAAiBG,EAAaP,CAAG,CAAC,EACzG,KAAK,OAAO,SAAUA,CAAG,CAC3B,CAEA,cAAqB,CACnBI,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,2BAA4B,EAAE,EAC9E,KAAK,KAAKf,EAAY,CACxB,CAEA,mBAA0B,CACxBe,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,gCAAiC,EAAE,EACnF,KAAK,KAAKZ,EAAiB,CAC7B,CAEA,KAAKkB,EAAkB,CACrB,IAAMC,EAAuC,CAAE,OAAQpB,EAAQ,SAAU,EACrEmB,IAAIC,EAAI,GAAKD,GACjB,KAAK,KAAKpB,EAA0BqB,CAAG,CAAC,CAC1C,CAEA,SAAgB,CACdP,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,sBAAuB,EAAE,EACzE,KAAK,WAAa,GAClB,KAAK,IAAI,CACX,CAEA,YAAmB,CACZ,KAAK,kBAGV,KAAK,aAAe,KAAK,kBAAkB,aAAe,KAAK,IAAI,EACnE,KAAK,aAAa,KAAK,gBAAkB,GAAG,EAC9C,CAEA,aAAaQ,EAAuB,CAC7B,KAAK,YACR,KAAK,UAAY,WAAW,IAAM,CAChC,KAAK,kBAAkB,CACzB,EAAGA,CAAO,EAEd,CAEA,mBAA0B,CACxB,GAAI,CAAC,KAAK,cAAgB,CAAC,KAAK,gBAC9B,MAAM,IAAI,MAAM,qEAAqE,EAEvF,KAAK,UAAY,KACjB,IAAMC,EAAY,KAAK,IAAI,EAAI,KAAK,aAC9BC,EAAgB,KAAK,gBAAkBD,EAC7C,GAAIC,GAAiB,EAAG,CACtB,IAAMH,EAAM,qCAAuCE,EAAY,sCAC/DT,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,gCAAiCO,CAAG,EACpF,KAAK,WAAW,IAAII,EAAUJ,EAAK,MAAO,GAAG,CAAC,CAChD,MACE,KAAK,aAAaG,EAAgB,GAAG,CAEzC,CAEA,OAAO,WACLE,EACArB,EACAC,EACAqB,EACAC,EACW,CACX,IAAMC,EAAY,IAAIH,EAAcrB,EAAmBC,EAAMqB,CAAe,EAExEG,EAEEC,EAAU,SAAmCrB,EAAgB,CACjE,aAAaoB,CAAqB,EAClCF,EAAS,CAAE,MAAO,KAAK,MAAO,MAAOlB,CAAI,CAAC,CAC5C,EAEMsB,EAAyB3B,EAAkB,QAAQ,SAAS,uBAClE,OAAAyB,EAAwB,WAAW,IAAM,CACvCD,EAAU,IAAI,CAAC,aAAc,eAAgB,QAAQ,CAAC,EACtDA,EAAU,QAAQ,EAClBE,EAAQ,KACN,CAAE,MAAO,cAAe,EACxB,IAAIN,EAAU,0DAA2D,IAAO,GAAG,CACrF,CACF,EAAGO,CAAsB,EAEzBH,EAAU,GAAG,CAAC,SAAU,cAAc,EAAGE,CAAO,EAChDF,EAAU,GAAG,aAAc,UAAY,CACrCf,EAAO,UACLT,EAAkB,OAClBS,EAAO,UACP,yBACA,oBAAsBe,CACxB,EACA,aAAaC,CAAqB,EAClCD,EAAU,IAAI,CAAC,SAAU,cAAc,EAAGE,CAAO,EACjDH,EAAS,KAAMC,CAAS,CAC1B,CAAC,EACDA,EAAU,QAAQ,EACXA,CACT,CAIA,OAAO,aAAuB,CAC5B,MAAM,IAAIJ,EAAU,4CAA6C,IAAO,GAAG,CAC7E,CACF,EAEOQ,GAAQ9B,GC7VR,IAAU+B,OACFA,EAAA,UAAY,aACZA,EAAA,MAAQ,QACRA,EAAA,WAAa,gBAHXA,MAAA,KC0BjB,IAAIC,GAAe,OAAO,QAAW,YAAc,OAAS,OAAO,QAAW,YAAc,OAAS,KAE/FC,GAAiB,IAAG,CA5B1B,IAAAC,EA4B6B,cAAOC,EAAS,YAAe,eAAeD,EAAAC,EAAS,aAAT,YAAAD,EAAqB,iBAC1FE,GAAqB,IAAG,CA7B9B,IAAAF,EA6BiC,cAAOC,EAAS,YAAe,eAAeD,EAAAC,EAAS,aAAT,YAAAD,EAAqB,mBAC9FG,GAAO,UAAY,CAAC,EACpBC,GAA0B,4BAEhC,SAASC,GAAWC,EAAuBC,EAAsBC,EAAiB,CAChF,IAAIC,EASJ,GARIH,EAAK,UAAYC,EAAI,UAIpBE,EAASH,EAAK,UAAYI,EAAQ,UAAYD,IAAWC,EAAQ,SAIlED,IAAWF,EAAI,OAEjB,MAAO,GAET,IAAMI,EAAOF,IAAWC,EAAQ,SAAW,WAAa,WACtDE,EAAYN,EAA6BK,CAAI,EAAE,OAAQJ,EAA4BI,CAAI,CAAC,EAU1F,OATSE,GAAgBD,CAAQ,EACtBJ,GAIP,CAAOM,GAAQF,EAAU,UAAU,GAKrC,CAACA,EAAS,MAAM,SAAUG,EAAc,CACtC,MAAO,CAACA,EAAI,EACd,CAAC,EAGM,IAGRT,EAA6BK,CAAI,EAAIC,EAC/B,GACT,CAQA,SAASI,GAAkBC,EAAyE,CAClG,GAAI,CACF,OAAO,KAAK,MAAMA,CAAqB,CACzC,OAASC,EAAG,CACV,OAAO,IACT,CACF,CAEO,IAAMC,GAAN,KAAsB,CAS3B,YAAYC,EAAkCC,EAAqBC,EAAcC,EAAwB,CACvG,KAAK,QAAUH,EACf,KAAK,KAAOC,EACZ,KAAK,KAAOC,EACZ,KAAK,cAAgBC,EACrB,KAAK,OAASH,EAAQ,kCACxB,CAEA,iBAAiBI,EAA6D,CAC5E,IAAMC,EAASD,EAAmBE,GAAKF,CAAU,EAAI,CAAC,EAChDJ,EAAU,KAAK,QACrB,OAAQ,KAAK,KAAM,CACjB,IAAK,SACHK,EAAO,OAAS,KAAK,cACrB,MACF,IAAK,UAAW,CACd,IAAME,EAAkBX,GAAkBI,EAAQ,OAAO,EACrDO,IACFF,EAAO,QAAUE,EAAgB,eAEnC,KACF,CACA,QACF,CACA,OAAIP,EAAQ,WAAa,SACvBK,EAAO,SAAWL,EAAQ,UAExBA,EAAQ,eAAiB,KAC3BK,EAAO,KAAO,SAEZ,KAAK,SAAW,SAClBA,EAAO,OAAS,KAAK,QAEnB,KAAK,SAAW,SAClBA,EAAO,OAAS,KAAK,QAEnB,KAAK,aAAe,SACtBA,EAAO,WAAa,KAAK,YAE3BA,EAAO,EAAIG,EAAS,gBACpBH,EAAO,MAAQI,GAAe,KAAK,OAAO,EACtCT,EAAQ,kBAAoB,QACxBU,EAAML,EAAQL,EAAQ,eAAe,EAEtCK,CACT,CAEA,UAAmB,CACjB,IAAIM,EAAS,SAAW,KAAK,KAC7B,OAAI,KAAK,OACPA,GAAU,SAAW,KAAK,MAExB,KAAK,gBACPA,GAAU,kBAAoB,KAAK,eAEjC,KAAK,SACPA,GAAU,WAAa,KAAK,QAE9BA,GAAU,IAEHA,CACT,CACF,EAaMC,GAAN,MAAMC,UAA0BC,CAAa,CA0C3C,YAAYC,EAAwBf,EAAkC,CACpE,MAAMe,EAAS,MAAM,EA1CvB,yBAAqE,CAAC,EA4BtE,4BAAiC,EACjC,iCAKI,CAAE,aAAc,GAAO,MAAO,CAAC,CAAE,EASnC,KAAK,SAAWA,EAChB,KAAK,eAAe,EACpB,KAAK,QAAUf,EACf,IAAMgB,EAAWhB,EAAQ,SAInBiB,EAAoBD,EAAS,wBAA0BA,EAAS,uBA0GtE,GAzGA,KAAK,OAAS,CACZ,YAAa,CACX,MAAO,cACP,SAAU,GACV,YAAa,GACb,WAAY,GACZ,UAAW,cACb,EACA,WAAY,CACV,MAAO,aACP,SAAU,GACV,YAAa,GACb,WAAY,GACZ,WAAYC,EACZ,UAAW,cACb,EACA,UAAW,CACT,MAAO,YACP,SAAU,GACV,YAAa,GACb,WAAY,GACZ,UAAW,cACb,EACA,aAAc,CACZ,MAAO,eACP,SAAU,GACV,YAAa,GACb,WAAY,GACZ,WAAYD,EAAS,yBACrB,UAAW,cACb,EACA,UAAW,CACT,MAAO,YACP,SAAU,GACV,YAAa,GACb,WAAY,GACZ,WAAYA,EAAS,sBACrB,UAAW,WACb,EACA,QAAS,CACP,MAAO,UACP,SAAU,GACV,YAAa,GACb,WAAY,GACZ,WAAYA,EAAS,uBACrB,UAAW,QACb,EACA,OAAQ,CAAE,MAAO,SAAU,SAAU,GAAM,YAAa,GAAO,WAAY,GAAO,UAAW,QAAS,EACtG,OAAQ,CAAE,MAAO,SAAU,SAAU,GAAM,YAAa,GAAO,WAAY,GAAO,UAAW,QAAS,CACxG,EACA,KAAK,MAAQ,KAAK,OAAO,YACzB,KAAK,YAAc,KAEnB,KAAK,eAAiB,IAAIE,GAAa,KAAK,MAAM,EAClD,KAAK,UAAY,EACjB,KAAK,kBAAoB,OACzB,KAAK,aAAe,OACpB,KAAK,cAAgB,OACrB,KAAK,mBAAqBF,EAAS,mBACnC,KAAK,gBAAkB,KAEvB,KAAK,WAAmBG,GAAUnB,EAAQ,YAAcQ,EAAS,kBAAmB,KAAK,mBAAmB,EAC5G,KAAK,oBAAsB,KAEvB,KAAK,WAAW,SAASY,EAAe,SAAS,IACnD,KAAK,4BAA8B,IAEjC,KAAK,WAAW,SAASA,EAAe,UAAU,EACpD,KAAK,cAAgBA,EAAe,WAC3B,KAAK,WAAW,SAASA,EAAe,KAAK,IACtD,KAAK,cAAgBA,EAAe,OAGtC,KAAK,QAAUZ,EAAS,SAASR,CAAO,EACxC,KAAK,eAAiB,KACtB,KAAK,KAAO,KACZ,KAAK,yBAA2B,KAChC,KAAK,aAAe,KACpB,KAAK,kBAAoB,GACzB,KAAK,eAAiB,EACtB,KAAK,cAAgB,KACrB,KAAK,mBAAqB,KAC1B,KAAK,qBAAuB,KAC5B,KAAK,mBAAqB,GAE1BqB,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,+BAAgC,SAAS,EACzFA,EAAO,UACL,KAAK,OACLA,EAAO,UACP,+BACA,4BAA8BrB,EAAQ,YAAcQ,EAAS,mBAAqB,GACpF,EACAa,EAAO,UACL,KAAK,OACLA,EAAO,UACP,+BACA,2BAA6B,KAAK,WAAa,GACjD,EACAA,EAAO,UACL,KAAK,OACLA,EAAO,UACP,+BACA,mBAAqB,KAAK,QAAU,GACtC,EAEI,CAAC,KAAK,WAAW,OAAQ,CAC3B,IAAM1B,EAAM,oCACZ,MAAA0B,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,+BAAgC1B,CAAG,EAC7E,IAAI,MAAMA,CAAG,CACrB,CAEA,IAAM2B,EAAmBzC,EAAS,OAAO,iBACrCyC,IAEExC,GAAmB,GAAK,OAAOkB,EAAQ,SAAY,YACrDsB,EAAiB,eAAgB,KAAK,kBAAkB,KAAK,IAAI,CAAC,EAGhEtB,EAAQ,gBAAkB,IAC5BsB,EAAiB,eAAgB,IAAM,CACrCD,EAAO,UACL,KAAK,OACLA,EAAO,UACP,+BACA,mFACF,EACA,KAAK,aAAa,CAAE,MAAO,SAAU,CAAC,CACxC,CAAC,EAIHC,EAAiB,SAAU,IAAM,CAhWvC,IAAA1C,EAiWY,KAAK,OAAS,KAAK,OAAO,cAAgB,KAAK,OAAS,KAAK,OAAO,WACtEyC,EAAO,UACL,KAAK,OACLA,EAAO,UACP,4DACA,yBACF,EACA,KAAK,aAAa,CAAE,MAAO,YAAa,CAAC,GAChC,KAAK,OAAS,KAAK,OAAO,cAEnCzC,EAAA,KAAK,mBAAL,MAAAA,EAAuB,MACvB,KAAK,wBAAwB,EAE7B,KAAK,aAAa,EAEtB,CAAC,EAED0C,EAAiB,UAAW,IAAM,CAC5B,KAAK,OAAS,KAAK,OAAO,YAC5BD,EAAO,UACL,KAAK,OACLA,EAAO,UACP,6DACA,gCACF,EAIA,KAAK,wBAAwB,EAEjC,CAAC,EAEL,CAOA,OAAO,oBAAoBE,EAAqD,CAC9E,IAAMC,EAA4B,CAAE,oBAAqB,CAAC,CAAE,EAC5D,YAAK,eAAeD,EAA2BC,CAAO,EAC/CA,EAAQ,mBACjB,CAEA,OAAe,eAAeD,EAAqDC,EAA2B,CAC5G,IAAMC,EAAkBC,IAAA,GAAK7C,EAAS,WAAW,wBAA2B0C,GAE5E,CAACH,EAAe,UAAW,GAAGvC,EAAS,WAAW,KAAK,EAAE,QAAS8C,GAAkB,CAClF,IAAMC,EAAYH,EAAgBE,CAAa,EAC3CC,GAAaA,EAAU,YAAY,IACrCJ,EAAQ,oBAAoBG,CAAa,EAAIC,EAEjD,CAAC,CACH,CAEA,gBAAiB,CACff,EAAkB,eAAe,KAAK,SAAS,oCAAqC,IAAI,CAC1F,CAEA,sBAAsBZ,EAAqBC,EAA+B,CACxE,OAAO,IAAIH,GAAgB,KAAK,QAASE,EAAMC,EAAM,KAAK,aAAa,CACzE,CAEA,mBAAmB2B,EAA0B,EACvBC,GAAqB,CACvC,GAAI,KAAK,cAAe,CACtBA,EAAO,QAAQ,EACf,MACF,CAEA,GAAI,OAAO,KAAK,QAAQ,SAAY,SAAU,CAC5CA,EAAO,SAAS,EAChB,MACF,CAEA,IAAMC,EAAY,KAAK,QAAQ,QAC7BC,EAAkB,KAAK,sBAAsB,EAC7CC,EAAsB,KAAK,oBAAoB,EACjD,GAAID,GAAmB,OAAOD,GAAc,WAAY,CACtDV,EAAO,UACL,KAAK,OACLA,EAAO,UACP,yCACA,2FACEY,EACA,GACJ,EACAF,EAAUC,EAAkBE,GAA4B,CAClDA,GACF,KAAK,QAAQ,QAAUF,EAAgB,YACvCF,EAAO,SAAS,GAEhBA,EAAO,OAAO,CAElB,CAAC,EACD,MACF,CACAA,EAAO,OAAO,CAChB,GAEY5B,GAAiB,CAC3B,IAAMiC,EAAkB,KAAK,sBAAsB,KAAMjC,CAAI,EAC7D,GAAIA,IAAS,UAAW,CACtBmB,EAAO,UACL,KAAK,OACLA,EAAO,UACP,yCACA,oDAAsD,KAAK,QAAQ,OACrE,EACA,IAAMd,EAAkBX,GAAkB,KAAK,QAAQ,OAAO,EAC1DW,IACF,KAAK,UAAYA,EAAgB,UAErC,MACEc,EAAO,UACL,KAAK,OACLA,EAAO,UACP,yCACA,sBAAwBc,EAAgB,SAAS,CACnD,EAEFN,EAASM,CAAe,CAC1B,CAAC,CACH,CAQA,cAAcA,EAAkCC,EAA0BP,EAA0B,CAClGR,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,oCAAqC,UAAYe,CAAS,EAE1G,KAAK,kBAAoBC,GAAU,WACjC,KAAK,oBAAoBD,CAAS,EAClC,KACA,KAAK,SAAS,KACdD,EACA,CAACG,EAAwDV,IAA0B,CACjF,IAAMW,EAAQ,KAAK,MACnB,GAAIA,GAAS,KAAK,OAAO,SAAWA,GAAS,KAAK,OAAO,QAAUA,GAAS,KAAK,OAAO,OAAQ,CAC1FX,IACFP,EAAO,UACL,KAAK,OACLA,EAAO,UACP,oCACA,cAAgBkB,EAAM,MAAQ,oDAAsDX,CACtF,EACAA,EAAU,MAAM,GAElBC,EAAS,EAAI,EACb,MACF,CAEA,GAAIS,EAAY,CACdjB,EAAO,UACL,KAAK,OACLA,EAAO,UACP,oCACA,aAAee,EAAY,IAAME,EAAW,MAAQ,UAAYA,EAAW,MAAM,SAAS,CAC5F,EAMEE,EAAK,WAAWF,EAAW,KAAK,GAChC,EAAE,KAAK,aAAeE,EAAK,WAAW,KAAK,WAAwB,IAEnE,KAAK,YAAcF,EAAW,MAExBG,EAAmB,KAAK,SAAS,KAAK,eAAe,KAAM,IAAI,EAAIC,GAA0B,CACjG,GAAIA,EAAK,CACP,KAAK,wBAAwBA,CAAG,EAChC,MACF,CACA,KAAK,cAAcP,EAAiBC,EAAWP,CAAQ,CACzD,CAAC,GACQS,EAAW,QAAU,UAE9B,KAAK,YAAY,CAAE,MAAO,SAAU,MAAOA,EAAW,KAAM,CAAC,EAC7DT,EAAS,EAAI,GACJS,EAAW,QAAU,iBACzBK,GAAYL,EAAW,KAAK,EAM/BT,EAAS,EAAK,GAJd,KAAK,YAAY,CAAE,MAAO,KAAK,OAAO,WAAW,UAAqB,MAAOS,EAAW,KAAM,CAAC,EAC/FT,EAAS,EAAI,IAMjB,MACF,CAEAR,EAAO,UACL,KAAK,OACLA,EAAO,UACP,oCACA,oBAAsBe,EAAY,mBACpC,EACA,KAAK,oBAAoBR,EAAwBO,CAAe,EAChEN,EAAS,KAAMD,CAAS,CAC1B,CACF,CACF,CAQA,oBAAoBA,EAAsBO,EAAwC,CAChF,IAAMjC,EAAOiC,EAAgB,KAC7Bd,EAAO,UACL,KAAK,OACLA,EAAO,UACP,0CACA,eAAiBO,EAAY,YAAc1B,CAC7C,EAEA,KAAK,iBAAmB0B,EAExB,KAAK,yBAAyB,EAC9B,KAAK,2BAA2B,EAEhCA,EAAU,KAAK,YAAa,CAACgB,EAAkBC,EAAsBC,IAA2C,CAC9G,KAAK,kBAAkBF,EAAOhB,EAAWiB,EAAcC,CAAiB,EAEpE5C,IAAS,WAAa,KAAK,QAAQ,UAGrC,OAAO,KAAK,QAAQ,QACpB,KAAK,oBAAoB,EAE7B,CAAC,EAED,IAAM6C,EAAO,KACbnB,EAAU,GAAG,CAAC,eAAgB,SAAU,QAAQ,EAAG,SAAmCgB,EAAkB,CACtGG,EAAK,oBAAoBnB,EAAW,KAAK,MAAOgB,CAAK,CACvD,CAAC,EAED,KAAK,KAAK,oBAAqBhB,CAAS,CAC1C,CAUA,kBACEgB,EACAhB,EACAiB,EACAC,EACS,CACTzB,EAAO,UACL,KAAK,OACLA,EAAO,UACP,wCACA,eAAiBO,CACnB,EACIgB,GACFvB,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,wCAAyC,WAAauB,CAAK,EAEzGC,GACFxB,EAAO,UACL,KAAK,OACLA,EAAO,UACP,wCACA,mBAAqBwB,CACvB,EAEEC,GACFzB,EAAO,UACL,KAAK,OACLA,EAAO,UACP,wCACA,wBAA0B,KAAK,UAAUyB,CAAiB,CAC5D,EAGF,KAAK,2BAA2BlB,CAAS,EAIzC,IAAMoB,EAAgB,KAAK,MACzBC,EAAiB,KAAK,OAAO,UAAU,MAOzC,GANA5B,EAAO,UACL,KAAK,OACLA,EAAO,UACP,wCACA,mBAAqB2B,EAAc,KACrC,EAEEA,EAAc,OAAS,KAAK,OAAO,QAAQ,OAC3CA,EAAc,OAAS,KAAK,OAAO,OAAO,OAC1CA,EAAc,OAAS,KAAK,OAAO,OAAO,MAE1C,OAAA3B,EAAO,UACL,KAAK,OACLA,EAAO,UACP,wCACA,wCACF,EACAO,EAAU,WAAW,EACd,GAMT,GAHA,OAAO,KAAK,iBAGR,CAACA,EAAU,YACb,OAAAP,EAAO,UACL,KAAK,OACLA,EAAO,UACP,wCACA,mCAAqCO,EAAY,6CACnD,EACO,GAKT,IAAMsB,EAAyB,KAAK,eACpC,KAAK,eAAiB,IAAIC,GAASvB,CAAS,EAC5C,KAAK,KAAOA,EAAU,OAAO,KAE7B,IAAMzB,EAAgB2C,EAAkB,cAsCxC,GArCI3C,GAAiB,KAAK,eAAiBA,GACzC,KAAK,cAAc0C,EAAcC,EAAmB,CAAC,CAACF,CAAK,EAQ7D,KAAK,0BAA0BE,EAAmBlB,CAAS,EAC3D/C,EAAS,OAAO,SAAS,IAAM,CAC7B+C,EAAU,GACR,YACA,CAACwB,EAAyBC,EAAuBP,IAA2C,CAC1F,KAAK,0BAA0BA,EAAmBlB,CAAS,EAC3D,KAAK,KAAK,SAAU,IAAI0B,GAAsBL,EAAgBA,EAAgB,KAAMG,CAAY,CAAC,CACnG,CACF,CACF,CAAC,EAIGJ,EAAc,QAAU,KAAK,OAAO,UAAU,MAC5CJ,IACF,KAAK,YAAc,KAAK,SAAS,WAAW,YAAcA,EAC1D,KAAK,KAAK,SAAU,IAAIU,GAAsBL,EAAgBA,EAAgB,KAAML,CAAK,CAAC,IAG5F,KAAK,YAAY,CAAE,MAAO,YAAa,MAAOA,CAAM,CAAC,EACrD,KAAK,YAAc,KAAK,SAAS,WAAW,YAAcA,GAAS,MAKrE,KAAK,KAAK,mBAAoBhB,CAAS,EAGnCsB,EAmBF,GAlBIA,EAAuB,aAAa,MAAM,EAAI,GAKhD7B,EAAO,UACL,KAAK,OACLA,EAAO,UACP,wCACA,2CACE6B,EAAuB,UAAU,UACjC,gBACAtB,EAAU,UACV,oBACAsB,EAAuB,aAAa,MAAM,EAC1C,yBACJ,EAEEA,EAAuB,YAActB,EAAW,CAClD,IAAMjC,EACJ,yHACAiC,EAAU,UACV,aACA,IAAI,MAAM,EAAE,MACdP,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,wCAAyC1B,CAAG,CAC9F,MACEuD,EAAuB,OAAO,EAIlC,MAAO,EACT,CAOA,oBAAoBtB,EAAsBW,EAAeK,EAAwB,CAC/E,IAAMW,EAAkB,KAAK,eAC3BC,EAAYD,GAAmBA,EAAgB,aAAa,IAAM3B,EAClE6B,EAAa7B,IAAc,KAAK,iBAChC8B,EAAqC,KAAK,mCAAmC,EAmD/E,GAjDArC,EAAO,UACL,KAAK,OACLA,EAAO,UACP,0CACA,eAAiBO,CACnB,EACAP,EAAO,UACL,KAAK,OACLA,EAAO,UACP,0CACA,WACEkB,GACCiB,EAAY,eAAiBC,EAAa,gBAAkB,KAC5DC,EAAqC,GAAK,kDAC/C,EACId,GAASA,EAAM,SACjBvB,EAAO,UACL,KAAK,OACLA,EAAO,UACP,0CACA,aAAeuB,EAAM,OACvB,EAEEY,IACFnC,EAAO,UACL,KAAK,OACLA,EAAO,UACP,0CACA,oCACG,KAAK,eAA4B,aAAa,MAAM,EACrD,mBACJ,EACA,KAAK,qBAAsBkC,EAA6B,mBAAmB,CAAC,EAE3EA,EAA6B,qBAAqB,EACnD,KAAK,eAAiB,KAAK,KAAO,MAGpC,KAAK,KAAK,qBAAsB3B,CAAS,EAYtC4B,GAAaE,GACbF,GAAajB,IAAU,UACxBA,IAAU,UACTgB,IAAoB,MAAQE,EAC7B,CAWA,GAAIlB,IAAU,gBAAkBK,GAAUA,EAAM,WAAwB,KAAO,KAAK,QAAQ,OAAS,EAAG,CACtG,KAAK,6BAA6B,EAClC,KAAK,kBAAoB,GAEzB,KAAK,YAAY,CAAE,MAAOL,EAAO,MAAOK,EAAO,iBAAkB,EAAK,CAAC,EACvE,MACF,CAGA,IAAMe,EAAqBpB,IAAU,UAAYC,EAAK,WAAWI,CAAK,EAAI,eAAiBL,EAC3F,KAAK,YAAY,CAAE,MAAOoB,EAAoB,MAAOf,CAAM,CAAC,EAC5D,MACF,CACF,CAKA,oCAA8C,CAC5C,MAAO,CAAC,KAAK,kBAAoB,CAAC,KAAK,iBAAiB,WAC1D,CAEA,cAAcC,EAAsBC,EAAwCc,EAAoC,CAM9G,IAAMC,EAAa,KAAK,cACNA,GAAcA,IAAehB,GAC5B,CAACgB,GAAcD,KAEhCvC,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,oCAAqC,qBAAqB,EAC1G,KAAK,UAAY,EAGjB,KAAK,eAAe,mBAAmB,GAErC,KAAK,eAAiBwB,GACxBxB,EAAO,UACL,KAAK,OACLA,EAAO,UACP,oCACA,qDACF,EAEF,KAAK,SAAS,WAAW,GAAK,KAAK,aAAewB,EAClD,KAAK,SAAS,WAAW,IAAM,KAAK,cAAgBC,EAAkB,aACxE,CAEA,iBAAwB,CACtB,KAAK,SAAS,WAAW,GAAK,KAAK,aAAe,OAClD,KAAK,SAAS,WAAW,IAAM,KAAK,cAAgB,OACpD,KAAK,UAAY,EACjB,KAAK,oBAAoB,CAC3B,CAEA,mBAAmC,CAEjC,OAAK,KAAK,cAIH,KAAK,UAAU,CACpB,cAAe,KAAK,cACpB,UAAW,KAAK,UAChB,eAAgB,KAAK,SAAS,SAAS,eAAe,CACxD,CAAC,EAPQ,IAQX,CAEA,+BAAsC,CACpC,GAAI,CAAC,KAAK,cAAgB,CAAC,KAAK,aAC9B,OAGF,IAAMgB,EAAY,KAAK,IAAI,EAAI,KAAK,aAChCA,EAAY,KAAK,mBAAsB,KAAK,kBAC9CzC,EAAO,UACL,KAAK,OACLA,EAAO,UACP,oDACA,yCAA2CyC,EAAY,qCACzD,EACA,KAAK,gBAAgB,EACrB,KAAK,OAAO,WAAW,UAAY,YAEvC,CAMA,mBAA0B,CACxB,GAAIhF,GAAmB,EAAG,CACxB,IAAMe,EAAc,KAAK,kBAAkB,EACvCA,GACF,KAAK,sBAAsB,CACzB,YAAaA,EACb,eAAgB,KAAK,IAAI,EACzB,SAAUnB,GAAa,SACvB,SAAU,KAAK,SAAS,KAAK,QAC/B,CAAC,CAEL,CACF,CAMA,qBAA4B,CAC1B,KAAK,wBAAwB,CAC/B,CAEA,0BAAqD,CAr7BvD,IAAAE,EAs7BI,OAAOA,EAAA,KAAK,iBAAL,YAAAA,EAAqB,eAAe,MAC7C,CAMA,UAAuC,CACrC,GAAI,KAAK,YAAa,CAGpB,IAAMmF,EAAWC,EAAiB,WAAW,KAAK,WAAW,EAC7D,OAAAD,EAAS,MAAQ,KAAK,YACfA,CACT,CAEA,OAAO,KAAK,cAAc,CAC5B,CAEA,eAA2B,CAz8B7B,IAAAnF,EAAAqF,EA08BI,OAAQA,GAAArF,EAAAsF,IAAqD,KAAK,MAAM,SAAhE,YAAAD,EAAA,KAAArF,EACV,CAEA,aAA8B,CAC5B,OAAO,KAAK,MAAM,aAAe,KAAK,MAAM,UAC9C,CAEA,iBAAiBuF,EAA0C,CACzD,IAAM9E,EAAS,mBACT+E,EAAUD,EAAY,SAAWA,EAAY,OAAS,aAAeA,EAAY,OAAS,IAC5FA,EAAY,UAAY,SAC1B9C,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAWhC,EAAQ+E,CAAO,EAE/D/C,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAWhC,EAAQ+E,CAAO,EAEjE/C,EAAO,UACL,KAAK,OACLA,EAAO,UACP,qCACA,sBACE8C,EAAY,QACZ,eACCA,EAAY,QAAWA,EAAY,OAAqB,QAC7D,EACA,IAAME,EAAY,KAAK,MAAQ,KAAK,OAAOF,EAAY,OAAiB,EACpEA,EAAY,SACd,KAAK,YAAcA,EAAY,OAE/B,KAAK,SAAS,WAAW,YAAcA,EAAY,SAEjDE,EAAS,UAAYA,EAAS,QAAU,cAI1C,KAAK,gBAAgB,EAEvB,KAAK,KAAK,kBAAmBF,CAAW,CAC1C,CAMA,qBAAqBG,EAAwC,CAC3DjD,EAAO,UACL,KAAK,OACLA,EAAO,UACP,2CACA,oBAAsBiD,EAAgB,KACxC,EAEI,KAAK,kBACPjD,EAAO,UACL,KAAK,OACLA,EAAO,UACP,2CACA,gCACF,EACA,aAAa,KAAK,eAAyB,GAG7C,KAAK,gBAAkB,WAAW,IAAM,CAClC,KAAK,kBACP,KAAK,gBAAkB,KACvBA,EAAO,UACL,KAAK,OACLA,EAAO,UACP,qBAAuBiD,EAAgB,MAAQ,iBAC/C,yBAA2BA,EAAgB,SAC7C,EACA,KAAK,YAAY,CAAE,MAAOA,EAAgB,SAAoB,CAAC,EAEnE,EAAGA,EAAgB,UAAU,CAC/B,CAEA,uBAA8B,CAC5BjD,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,4CAA6C,EAAE,EAC3F,KAAK,kBACP,aAAa,KAAK,eAAyB,EAC3C,KAAK,gBAAkB,KAE3B,CAEA,mBAA0B,CACpB,KAAK,eACT,KAAK,aAAe,WAAW,IAAM,CAC/B,KAAK,eACP,KAAK,aAAe,KACpBA,EAAO,UACL,KAAK,OACLA,EAAO,UACP,0CACA,iCACF,EACA,KAAK,OAAO,WAAW,UAAY,YACnC,KAAK,YAAY,CAAE,MAAO,WAAY,CAAC,EAE3C,EAAG,KAAK,kBAAkB,EAC5B,CAEA,kBAAkBkB,EAAqB,CACjCA,IAAU,gBAAkBA,IAAU,aAAeA,IAAU,cAAc,KAAK,mBAAmB,CAC3G,CAEA,oBAA2B,CACzB,KAAK,OAAO,WAAW,UAAY,eAC/B,KAAK,eACP,aAAa,KAAK,YAAsB,EACxC,KAAK,aAAe,KAExB,CAEA,gBAAgBgC,EAAwB,CACtC,KAAK,WAAa,WAAW,IAAM,CACjClD,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,wCAAyC,UAAU,EACnG,KAAK,WAAa,KAClB,KAAK,aAAa,CAAE,MAAO,YAAa,CAAC,CAC3C,EAAGkD,CAAQ,CACb,CAEA,kBAAyB,CACnB,KAAK,aACP,aAAa,KAAK,UAA4B,EAC9C,KAAK,WAAa,KAEtB,CAEA,yBAA0B,CACxB,KAAK,mBAAqB,WAAW,IAAM,CACzClD,EAAO,UACL,KAAK,OACLA,EAAO,UACP,yCACA,uBACF,EACA,KAAK,oBAAoB,EACtB,KAAK,IAAM,CACVA,EAAO,UACL,KAAK,OACLA,EAAO,UACP,yCACA,iCACF,EACA,KAAK,cAAgB,EACvB,CAAC,EACA,MAAM,IAAM,CACXA,EAAO,UACL,KAAK,OACLA,EAAO,UACP,yCACA,8BACF,EACA,KAAK,cAAgB,EACvB,CAAC,EACC,KAAK,SAAS,KAAK,mBACfoB,EAAmB,KAAK,SAAS,KAAK,kBAAkB,EAAG,CAACC,EAAK8B,IAAiB,CAClF9B,GAAO,CAAC8B,GACVnD,EAAO,UACL,KAAK,OACLA,EAAO,UACP,yCACA,gCACF,EACA,KAAK,2BAA2B,EAChC,KAAK,YAAY,CACf,MAAO,eACP,MAAO,IAAIoD,EAAU,0CAA2C,MAAO,GAAG,CAC5E,CAAC,GAEDpD,EAAO,UACL,KAAK,OACLA,EAAO,UACP,yCACA,mCACF,CAEJ,CAAC,CAEL,EAAG,KAAK,QAAQ,SAAS,oBAAoB,CAC/C,CAEA,0BAA2B,CACrB,KAAK,qBACP,aAAa,KAAK,kBAAkB,EACpC,KAAK,mBAAqB,KAE9B,CAEA,0BAA0Bc,EAAkC,CAC1D,KAAK,qBAAuB,WAAW,IAAM,CAvoCjD,IAAAvD,EAAAqF,EAwoCW,KAAK,gBACR5C,EAAO,UACL,KAAK,OACLA,EAAO,UACP,4CACA,6CAA+C,KAAK,cAAgB,wBAA0B,GAChG,EACI,KAAK,eACP,KAAK,mBAAqB,IAC1BzC,EAAA,KAAK,oBAAL,MAAAA,EAAwB,WACxBqF,EAAA,KAAK,mBAAL,MAAAA,EAAuB,UACvB,KAAK,YAAY9B,EAAiB,EAAE,KAAK,cAAc,GAGvDd,EAAO,UACL,KAAK,OACLA,EAAO,UACP,4CACA,iFACF,EAGN,EAAG,KAAK,QAAQ,SAAS,uBAAuB,CAClD,CAEA,4BAA6B,CACvB,KAAK,uBACP,aAAa,KAAK,oBAAoB,EACtC,KAAK,qBAAuB,KAEhC,CAEA,YAAYqD,EAAkC,CAxqChD,IAAA9F,EAAAqF,EAyqCI,IAAM1B,EAAQmC,EAAU,MAUlBC,EACJpC,IAAU,iBACT,KAAK,QAAU,KAAK,OAAO,WAC1BmC,EAAU,kBACT,KAAK,QAAU,KAAK,OAAO,YAC1BA,EAAU,OACVlC,EAAK,WAAWkC,EAAU,KAAK,GAC/B,EAAE,KAAK,aAAelC,EAAK,WAAW,KAAK,WAAwB,IAwBzE,GAtBAnB,EAAO,UACL,KAAK,OACLA,EAAO,UACP,kCACA,cAAgBkB,GAASoC,EAAmB,sCAAwC,GACtF,EAEIpC,GAAS,KAAK,MAAM,QAIxB,KAAK,sBAAsB,EAC3B,KAAK,iBAAiB,EACtB,KAAK,yBAAyB,EAC9B,KAAK,2BAA2B,EAChC,KAAK,kBAAkBmC,EAAU,KAAK,GAElCnC,IAAU,aAAeA,IAAU,eACrC,KAAK,uBAAyB,GAI5B,KAAK,MAAM,UAAU,OAGzB,IAAM8B,EAAW,KAAK,OAAOK,EAAU,KAAK,EAExCE,EAAaP,EAAS,WACtBA,EAAS,QAAU,iBACrB,KAAK,yBACLO,EAAmBC,GAAaR,EAAS,WAAsB,KAAK,sBAAsB,GAG5F,IAAMS,EAAS,IAAIxB,GACjB,KAAK,MAAM,MACXe,EAAS,MACTO,EACAF,EAAU,SAAUT,GAAArF,EAAAsF,IAA8DG,EAAS,SAAvE,YAAAJ,EAAA,KAAArF,GACtB,EAEA,GAAI+F,EAAkB,CACpB,IAAMI,EAAgB,IAAM,CACtB,KAAK,QAAU,KAAK,OAAO,eAC7B,KAAK,yBAA2B,KAAK,IAAI,EACzC,KAAK,aAAa,CAAE,MAAO,YAAa,CAAC,EAE7C,EACMjB,EAAY,KAAK,0BAA4B,KAAK,IAAI,EAAI,KAAK,yBAA2B,EAC5FA,GAAaA,EAAY,KAC3BzC,EAAO,UACL,KAAK,OACLA,EAAO,UACP,kCACA,mCACEyC,EACA,4BACC,IAAOA,GACR,wBACJ,EACA,WAAWiB,EAAe,IAAOjB,CAAS,GAE1CjF,EAAS,OAAO,SAASkG,CAAa,CAE1C,MAAWxC,IAAU,gBAAkBA,IAAU,cAC/C,KAAK,gBAAgBqC,CAAoB,GAKtCrC,IAAU,gBAAkB,CAACoC,GAAqBpC,IAAU,aAAe8B,EAAS,WAGvFxF,EAAS,OAAO,SAAS,IAAM,CAC7B,KAAK,wBAAwB,CAC/B,CAAC,EAGC0D,GAAS,aAAe,CAAC,KAAK,gBAChClB,EAAO,UACL,KAAK,OACLA,EAAO,UACP,kCACA,yFACF,EAIF,KAAK,iBAAiByD,CAAM,EACxB,KAAK,MAAM,WACb,KAAK,mBAAmB,EACd,KAAK,MAAM,cACrB,KAAK,SAAS,SAAS,gCAAgCvC,EAAOuC,EAAO,MAAM,EAC3E,KAAK,mBAAmBA,EAAO,MAAmB,EAEtD,CAEA,aAAaE,EAAoB,CA5xCnC,IAAApG,EAAAqF,EA6xCI,IAAM1B,EAAQyC,EAAQ,MAmBtB,GAlBA3D,EAAO,UACL,KAAK,OACLA,EAAO,UACP,mCACA,oBAAsBkB,EAAQ,oBAAsB,KAAK,MAAM,KACjE,EACIA,GAAS,KAAK,MAAM,QAGxB,KAAK,yBAAyB,EAC9B,KAAK,2BAA2B,EAChC,KAAK,sBAAsB,EAC3B,KAAK,iBAAiB,EAGtB,KAAK,kBAAkBA,CAAK,EAExBA,GAAS,cAAgB,KAAK,MAAM,OAAS,cAC7CA,GAAS,WAAa,KAAK,MAAM,OAAS,SAAU,OAExD,IAAM8B,EAAW,KAAK,OAAO9B,CAAK,EAChCuC,EAAS,IAAIxB,GACX,KAAK,MAAM,MACXe,EAAS,MACT,KACAW,EAAQ,SAAUf,GAAArF,EAAAsF,IAA8DG,EAAS,SAAvE,YAAAJ,EAAA,KAAArF,GACpB,EAEF,KAAK,iBAAiBkG,CAAM,EAExBvC,GAAS,cACX1D,EAAS,OAAO,SAAS,IAAM,CAC7B,KAAK,aAAa,CACpB,CAAC,EAEC0D,GAAS,WACX,KAAK,UAAU,CAEnB,CAEA,cAAqB,CACnB,GAAI,KAAK,QAAU,KAAK,OAAO,WAAY,CACzClB,EAAO,UACL,KAAK,OACLA,EAAO,UACP,mCACA,mDAAqD,KAAK,MAAM,KAClE,EACA,MACF,CAEA,IAAM4D,EAAO,KAAK,SAAS,KAQrBC,EAAe,EAAE,KAAK,eAEtBC,EAAU,IAAM,CACpB,KAAK,8BAA8B,EACnC,KAAK,mBAAoBhD,GAAqC,CAC5D,GAAIA,EAAgB,OAAS,WAAaA,EAAgB,QAAQ,QAAS,CACzE,IAAM5B,EAAkBX,GAAkBuC,EAAgB,QAAQ,OAAO,EACrE5B,GACF,KAAK,SAAS,SAAS,gBAAgBA,EAAgB,cAAc,CAEzE,CAEI2E,IAAiB,KAAK,gBAG1B,KAAK,YAAY/C,EAAiB+C,CAAY,CAChD,CAAC,CACH,EAMA,GAJA7D,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,mCAAoC,qBAAqB,EACzG,KAAK,kBAAkB,EACvB,KAAK,qBAAqB,KAAK,OAAO,UAAU,EAE5C4D,EAAK,SAAW,QAClBE,EAAQ,MACH,CACL,IAAMC,EAAU1C,GAA0B,CACpCwC,IAAiB,KAAK,iBAGtBxC,EACF,KAAK,wBAAwBA,CAAG,EAEhCyC,EAAQ,EAEZ,EACI,KAAK,aAAe3C,EAAK,WAAW,KAAK,WAAwB,EAE7DC,EAAmBwC,EAAK,eAAe,KAAM,IAAI,EAAGG,CAAM,EAE1D3C,EAAmBwC,EAAK,4BAA4B,EAAK,EAAGG,CAAM,CAE5E,CACF,CAkBA,YAAYjD,EAAkC+C,EAA4B,CACxE,IAAM3C,EAAQ,KAAK,MAAM,MACzB,GAAIA,IAAU,KAAK,OAAO,WAAW,MAAO,CAI1ClB,EAAO,UACL,KAAK,OAELA,EAAO,UACP,kCACA,mDAAqDkB,CACvD,EACA,MACF,CAEA,IAAM8C,EAAsB,KAAK,uBAAuB,EAGpDA,GAAuBA,IAAwB,KAAK,eAAiB,KAAK,6BAC5E,KAAK,oBAAoB,EACtB,KAAK,IAAM,CACV,KAAK,6BAA6B,EAC9B,KAAK,QAAU,KAAK,OAAO,aAC7BhE,EAAO,UACL,KAAK,OAELA,EAAO,UACP,mCACA,yEAA2E,KAAK,aAClF,EACA,KAAK,wBAAwB,EAC7B,KAAK,UAAUc,EAAiB,EAAE,KAAK,cAAc,EAEzD,CAAC,EACA,MAAMpD,EAAI,EAIZsG,GAAuBA,IAAwB,KAAK,eACpD,KAAK,eAAiB,CAAC,KAAK,4BAE7B,KAAK,YAAYlD,EAAiB+C,CAAY,EAE9C,KAAK,UAAU/C,EAAiB+C,CAAY,CAEhD,CAeA,UAAU/C,EAAkC+C,EAAsB,CAChE7D,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,+BAA+B,EAC/E,KAAK,cAAgB,KACrB,KAAK,mBAAqB,GAC1B,KAAK,wBAAwB,EAC7B,KAAK,0BAA0Bc,CAAe,EAE9C,KAAK,0BAA0B,aAAcA,EAAiB,GAAM+C,EAAc,IACzE,KAAK,gBAAkB,IAAS,CAAC,KAAK,kBAC9C,CACH,CAEA,YAAY/C,EAAkC+C,EAAsB,CAClE7D,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,iCAAiC,EAC7E,KAAK,cACP,KAAK,0BAA0B,KAAK,cAAec,EAAiB,GAAO+C,EAAc,IAAM,EAAI,EAEnG,KAAK,YAAY,CACf,MAAO,eACP,MAAO,IAAIT,EAAU,4BAA6B,IAAO,GAAG,CAC9D,CAAC,CAEL,CAEA,0BACE9C,EACAQ,EACAmD,EACAJ,EACAK,EACM,CACNlE,EAAO,UACL,KAAK,OAELA,EAAO,UACP,gDACAM,CACF,EACA,IAAM6D,EAAU9C,GAA2B,CACzC,KAAK,YAAY,CAAE,MAAO,KAAK,OAAO,WAAW,UAAqB,MAAOA,CAAI,CAAC,CACpF,EAEM+C,EAAiB,KAAK,QAAQ,MAAM,EAEpCC,EAAgB,CAACC,EAAgB/D,IAAyB,CAC9D,GAAIsD,IAAiB,KAAK,eAG1B,IAAI,CAACK,EAAe,EAAG,CACjB3D,GACFA,EAAU,QAAQ,EAEpB,MACF,CACI,CAACA,GAAa,CAAC+D,GACjBC,EAAiB,EAErB,EAGM3F,EAAOwF,EAAe,MAAM,EAClC,GAAI,CAACxF,EAAM,CACTuF,EAAO,IAAIf,EAAU,wCAAyC,MAAO,GAAG,CAAC,EACzE,MACF,CACAtC,EAAgB,KAAOlC,EAGvB,IAAM2F,EAAmB,IAAM,CAE7B,GAAI,CAACH,EAAe,OAAQ,CAC1BD,EAAO,IAAIf,EAAU,wDAAyD,MAAO,GAAG,CAAC,EACzF,MACF,CAIA,GAAI,CAAC,KAAK,SAAS,KAAK,kBAAmB,CACzCe,EAAO,IAAIxB,EAAiB,iDAAkD,KAAM,GAAG,CAAC,EACxF,MACF,CACMvB,EACJ,KAAK,SAAS,KAAK,kBAAkB,EACrC,CAACC,EAAwB8B,IAA2B,CAClD,GAAIU,IAAiB,KAAK,gBAGrBK,EAAe,EAIpB,IAAI7C,EAAK,CACP8C,EAAO9C,CAAG,EACV,MACF,CACA,GAAI,CAAC8B,EAAc,CAEjBgB,EAAO,IAAIf,EAAU,0CAA2C,MAAO,GAAG,CAAC,EAC3E,MACF,CAIAtC,EAAgB,KAAa0D,GAAoBJ,CAAc,EAC/D,KAAK,cAActD,EAAiBR,EAAe+D,CAAa,EAClE,CACF,CACF,EAEA,GAAI,KAAK,mBAAqBD,EAAe,OAAQ,CACnD,KAAK,kBAAoB,GACzBG,EAAiB,EACjB,MACF,CAEA,KAAK,cAAczD,EAAiBR,EAAe+D,CAAa,CAClE,CAEA,WAAkB,CAChBrE,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,gCAAiC,oBAAoB,EACrG,KAAK,mBAAmB,EACxB,KAAK,qBAAqB,KAAK,OAAO,OAAO,EAEzC,KAAK,mBACPA,EAAO,UACL,KAAK,OAELA,EAAO,UACP,gCACA,8BAAgC,KAAK,gBACvC,EACA,KAAK,iBAAiB,MAAM,GAG1B,KAAK,iBACPA,EAAO,UACL,KAAK,OAELA,EAAO,UACP,gCACA,6BAA+B,KAAK,eAAe,aAAa,CAClE,EACA,KAAK,eAAe,aAAa,EAAE,MAAM,GAK3C,KAAK,YAAY,CAAE,MAAO,QAAS,CAAC,CACtC,CAEA,cAAcyE,EAAgCjE,EAA0B,CAzmD1E,IAAAjD,EA0mDI,OAAQ,KAAK,MAAM,MAAO,CACxB,IAAK,YAAa,CAChByC,EAAO,UACL,KAAK,OAELA,EAAO,UACP,oCACA,0CACF,EAGA,IAAM0E,GAAkBnH,EAAA,KAAK,iBAAL,YAAAA,EAAqB,eACzCmH,GAAmBA,EAAgB,eACrCA,EAAgB,cAAcD,CAAY,EAG5C,IAAME,EAAUC,EAA0B,CACxC,OAAQ3G,EAAQ,KAChB,KAAM,CACJ,YAAawG,EAAa,KAC5B,CACF,CAAC,EACD,KAAK,KAAKE,CAAO,EAKjB,IAAME,EAAkB,IAAM,CAC5B,KAAK,IAAIC,CAAe,EACxBtE,EAAS,KAAMiE,CAAY,CAC7B,EACMK,EAAmBhC,GAAuC,CAC1DA,EAAY,UAAY,WAC1B,KAAK,IAAI+B,CAAe,EACxB,KAAK,IAAIC,CAAe,EACxBtE,EAASsC,EAAY,QAAU,KAAK,cAAc,CAAC,EAEvD,EACA,KAAK,KAAK,oBAAqB+B,CAAe,EAC9C,KAAK,GAAG,kBAAmBC,CAAe,EAC1C,KACF,CAEA,IAAK,aACH9E,EAAO,UACL,KAAK,OAELA,EAAO,UACP,oCACA,wFACF,EACA,KAAK,wBAAwB,EAG/B,QAAS,CACPA,EAAO,UACL,KAAK,OAELA,EAAO,UACP,oCACA,uBAAyB,KAAK,MAAM,MAAQ,4CAC9C,EACA,IAAM+E,EAAYjC,GAAuC,CACvD,OAAQA,EAAY,QAAS,CAC3B,IAAK,YACH,KAAK,IAAIiC,CAAQ,EACjBvE,EAAS,KAAMiE,CAAY,EAC3B,MACF,IAAK,SACL,IAAK,SACL,IAAK,YACH,KAAK,IAAIM,CAAQ,EACjBvE,EAASsC,EAAY,QAAU,KAAK,cAAc,CAAC,EACnD,MACF,QAEE,KACJ,CACF,EACA,KAAK,GAAG,kBAAmBiC,CAAQ,EAC/B,KAAK,MAAM,QAAU,aAGvB,KAAK,aAAa,EAElB,KAAK,aAAa,CAAE,MAAO,YAAa,CAAC,CAE7C,CACF,CACF,CAEA,yBAAgC,CAC9B/E,EAAO,UACL,KAAK,OAELA,EAAO,UACP,8CACA,8BACF,EAGA,KAAK,iBAED,KAAK,mBACPA,EAAO,UACL,KAAK,OAELA,EAAO,UACP,8CACA,oCAAsC,KAAK,gBAC7C,EACA,KAAK,iBAAiB,WAAW,GAEnC,OAAO,KAAK,iBAER,KAAK,oBACPA,EAAO,UACL,KAAK,OAELA,EAAO,UACP,8CACA,qCAAuC,KAAK,gBAC9C,EACA,KAAK,kBAAkB,WAAW,GAEpC,OAAO,KAAK,iBAER,KAAK,iBACPA,EAAO,UACL,KAAK,OAELA,EAAO,UACP,8CACA,mCAAqC,KAAK,eAAe,aAAa,CACxE,EACA,KAAK,eAAe,aAAa,EAAE,WAAW,EAIlD,CAMA,KAAK1B,EAAsB0G,EAAsBxE,EAA8B,CAC7EA,EAAWA,GAAY9C,GACvB,IAAMwD,EAAQ,KAAK,MAEnB,GAAIA,EAAM,WAAY,CACpBlB,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,2BAA4B,eAAe,EAC3F,KAAK,SAAS,IAAIiF,GAAe3G,EAAKkC,CAAQ,CAAC,EAC/C,MACF,CAEA,GAAI,EADgBwE,GAAc9D,EAAM,aACtB,CAChB,IAAMG,EAAM,mCAAqC2D,EAAa,eAAiB9D,EAAM,MACrFlB,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,2BAA4BqB,CAAG,EAC/Eb,EAAS,KAAK,aAAe,IAAI4C,EAAU/B,EAAK,IAAO,GAAG,CAAC,EAC3D,MACF,CACI,KAAK,OAAO,UAAUrB,EAAO,SAAS,GACxCA,EAAO,UACL,KAAK,OAELA,EAAO,UACP,2BACA,iBACEkF,GACE5G,EACA,KAAK,SAAS,kBACd,KAAK,SAAS,aACd,KAAK,SAAS,cAChB,CACJ,EAEF,KAAK,MAAMA,EAAKkC,CAAQ,CAC1B,CAEA,SAAS2E,EAAsC,CAC7C,IAAM7G,EAAM6G,EAAe,QAGvBA,EAAe,aAAe,CAACA,EAAe,gBAChD7G,EAAI,UAAY,KAAK,aAEvB,GAAI,CACD,KAAK,eAA4B,KAAK6G,CAAc,CACvD,OAAS1G,EAAG,CACVuB,EAAO,UACL,KAAK,OAELA,EAAO,UACP,+BACA,6CAAgDvB,EAAY,KAC9D,CACF,CACF,CAEA,MAAMH,EAAsBkC,EAA6B,CACvDR,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,4BAA6B,gBAAgB,EAC7F,IAAMoF,EAAa,KAAK,eAAe,KAAK,EACtCrH,EAAU,KAAK,QAAQ,eAIzBqH,GAAc,CAACA,EAAW,eAAiBxH,GAAWwH,EAAW,QAAS9G,EAAKP,CAAO,GACnFqH,EAAW,SACdA,EAAW,SAAWC,GAAY,OAAO,KAAK,OAAQ,CAACD,EAAW,QAAQ,CAAC,EAC3EA,EAAW,OAAS,IAErBA,EAAW,SAAuC,KAAK5E,CAAQ,GAEhE,KAAK,eAAe,KAAK,IAAIyE,GAAe3G,EAAKkC,CAAQ,CAAC,CAE9D,CAEA,oBAA2B,CACzBR,EAAO,UACL,KAAK,OAELA,EAAO,UACP,yCACA,WAAa,KAAK,eAAe,MAAM,EAAI,kBAC7C,EACA,IAAImF,EACJ,KAAQA,EAAiB,KAAK,eAAe,MAAM,GAAI,KAAK,SAASA,CAAc,CACrF,CAEA,qBAAqBG,EAA8C,CAC7DA,GAAmBA,EAAgB,SACrCtF,EAAO,UACL,KAAK,OAELA,EAAO,UACP,2CACA,YAAcsF,EAAgB,OAAS,mBACzC,EACA,KAAK,eAAe,QAAQA,CAAe,EAE/C,CAEA,mBAAmBjE,EAAsB,CACvC,IAAMkE,EAAY,KAAK,eAAe,MAAM,EACxCA,EAAY,IACdvF,EAAO,UACL,KAAK,OAELA,EAAO,UACP,yCACA,WAAauF,EAAY,2BAAmCC,EAAanE,CAAG,CAC9E,EACA,KAAK,eAAe,oBAAoBA,CAAG,EAE/C,CAEA,iBAAiB0B,EAA0BxC,EAA4B,CACrE,KAAK,4BAA4B,MAAM,KAAK,CAAE,QAAAwC,EAAS,UAAAxC,CAAU,CAAC,EAE7D,KAAK,4BAA4B,cACpC,KAAK,iCAAiC,CAE1C,CAEQ,kCAAmC,CACzC,GAAI,KAAK,4BAA4B,MAAM,OAAS,EAAG,CACrD,KAAK,4BAA4B,aAAe,GAEhD,IAAMkF,EAAwB,KAAK,4BAA4B,MAAM,MAAM,EAC3E,KAAK,sBAAsBA,EAAsB,OAAO,EACrD,MAAOpE,GAAQ,CACdrB,EAAO,UACL,KAAK,OAELA,EAAO,UACP,uEACAqB,CACF,CACF,CAAC,EACA,QAAQ,IAAM,CACb,KAAK,4BAA4B,aAAe,GAChD,KAAK,iCAAiC,CACxC,CAAC,CACL,CACF,CAEA,MAAc,sBAAsB0B,EAA0B,CAC5D,MAAM,KAAK,SAAS,SAAS,sBAAsBA,CAAO,CAC5D,CAEA,MAAM,MAAwB,CA54DhC,IAAAxF,EA64DI,GAAI,KAAK,MAAM,QAAU,YACvB,MAAM,IAAI6F,EAAU,wCAAyC,IAAO,GAAG,EAGzE,IAAM7C,GAAYhD,EAAA,KAAK,iBAAL,YAAAA,EAAqB,eACvC,GAAI,CAACgD,EACH,MAAM,KAAK,cAAc,EAG3BP,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,2BAA4B,eAAiBO,CAAS,EAEtG,IAAMmF,EAAY,KAAK,IAAI,EACrBC,EAAWC,GAAa,EAE9B,OAAaC,GACX,IAAI,QAASC,GAAY,CACvB,IAAMC,EAAeC,GAAuB,CACtCA,IAAeL,IACjBpF,EAAU,IAAI,YAAawF,CAAW,EACtCD,EAAQ,KAAK,IAAI,EAAIJ,CAAS,EAElC,EACAnF,EAAU,GAAG,YAAawF,CAAW,EACrCxF,EAAU,KAAKoF,CAAE,CACnB,CAAC,EACD,KAAK,QAAQ,SAAS,uBACtB,wCACF,CACF,CAEA,MAAMpE,EAAwB,CAC3B,KAAK,eAA4B,aAAa,EAAE,KAAKA,CAAK,CAC7D,CAEA,wBAAwC,CA/6D1C,IAAAhE,EAAAqF,EAg7DI,OAAO,KAAK,qBAAwBtF,GAAe,KAAKsF,GAAArF,EAAAC,EAAS,aAAT,YAAAD,EAAqB,MAArB,YAAAqF,EAAA,KAAArF,EAA2BI,IACrF,CAEA,2BAA2B4C,EAA4B,CAn7DzD,IAAAhD,EAAAqF,EAo7DI,KAAK,oBAAsBrC,EAAU,UACjCjD,GAAe,KACjBsF,GAAArF,EAAAC,EAAS,aAAT,YAAAD,EAAqB,MAArB,MAAAqF,EAAA,KAAArF,EAA2BI,GAAyB4C,EAAU,WAElE,CAEA,8BAAqC,CA17DvC,IAAAhD,EAAAqF,EA27DI,KAAK,oBAAsB,KACvBtF,GAAe,KACjBsF,GAAArF,EAAAC,EAAS,aAAT,YAAAD,EAAqB,SAArB,MAAAqF,EAAA,KAAArF,EAA8BI,IAElC,CAMA,wBAAwB0D,EAAsB,CAC5C,GAAIA,EAAI,OAAS,MAEf,KAAK,YAAY,CAAE,MAAO,SAAU,MAAOA,CAAI,CAAC,UACvCA,EAAI,OAAS,MACtB,KAAK,YAAY,CAAE,MAAO,SAAU,MAAOA,CAAI,CAAC,UACvCA,EAAI,aAAe4E,GAAgB,UAAW,CACvD,IAAM3H,EAAM,iFACZ0B,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,8CAA+C1B,CAAG,EAClG,KAAK,YAAY,CAAE,MAAO,SAAU,MAAO,IAAI8E,EAAU9E,EAAK,MAAO,IAAK+C,CAAG,CAAE,CAAC,CAClF,KAAO,CACL,IAAM/C,EAAM,2DACZ0B,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,4CAA6C1B,CAAG,EAChG,KAAK,YAAY,CAAE,MAAO,KAAK,MAAM,UAAqB,MAAO,IAAI8E,EAAU9E,EAAK,MAAO,IAAK+C,CAAG,CAAE,CAAC,CACxG,CACF,CAEA,0BAA0BI,EAAwClB,EAA4B,CAC5F,GAAI,CAACkB,EACH,OAEF,KAAK,kBAAoBA,EACrBA,EAAkB,iBACpB,KAAK,QAAQ,eAAiBA,EAAkB,gBAElD,IAAMyE,EAAWzE,EAAkB,SACnC,GAAIyE,EAAU,CACZ,IAAM7E,EAAM,KAAK,SAAS,KAAK,sBAAsB6E,CAAQ,EAC7D,GAAI7E,EAAK,CACPrB,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,gDAAiDqB,EAAI,OAAO,EAE5Gd,EAAU,KAAKc,CAAG,EAClB,MACF,CACF,CACA,IAAM8E,EAAqB1E,EAAkB,mBACzC0E,IACF,KAAK,mBAAqBA,GAE5B,KAAK,gBAAkB1E,EAAkB,gBACzC,KAAK,KAAK,oBAAqBA,CAAiB,CAClD,CAEA,qBAAsB,CACpB,IAAM2E,EAAyB,KAAK,QAAQ,wBAA0BjH,EAAS,uBACzE8E,EAAK,IAAIzG,EAAS,OAAO,UAAU4I,CAAsB,EAC/D,OAAO,IAAI,QAAc,CAACN,EAASO,IAAW,CAC5C,IAAIC,EAAW,GACfrC,EAAG,OAAS,IAAM,CACXqC,IACHA,EAAW,GACXR,EAAQ,EACR7B,EAAG,MAAM,EAEb,EAEAA,EAAG,QAAUA,EAAG,QAAU,IAAM,CACzBqC,IACHA,EAAW,GACXD,EAAO,EAEX,CACF,CAAC,CACH,CAEA,qBAAsB,CACpB,OAAO,KAAK,QAAQ,wBAA0B,0BAChD,CAEA,uBAAwB,CA1gE1B,IAAA9I,EAAAqF,EA2gEI,OAAOnF,GAAmB,KAAKmF,GAAArF,EAAAC,EAAS,aAAT,YAAAD,EAAqB,aAArB,YAAAqF,EAAA,KAAArF,EAAkC,KAAK,oBAAoB,GAC5F,CACA,sBAAsBgJ,EAAY,CA7gEpC,IAAAhJ,EAAAqF,EA8gEI,OAAOnF,GAAmB,KAAKmF,GAAArF,EAAAC,EAAS,aAAT,YAAAD,EAAqB,aAArB,YAAAqF,EAAA,KAAArF,EAAkC,KAAK,oBAAoB,EAAGgJ,GAC/F,CACA,yBAA0B,CAhhE5B,IAAAhJ,EAAAqF,EAihEI,OAAOnF,GAAmB,KAAKmF,GAAArF,EAAAC,EAAS,aAAT,YAAAD,EAAqB,gBAArB,YAAAqF,EAAA,KAAArF,EAAqC,KAAK,oBAAoB,GAC/F,CACF,EAEOiJ,GAAQjH,GC5gEf,IAAMkH,GAAN,cAAyBC,CAAa,CAQpC,YAAYC,EAAoBC,EAAkC,CAChE,MAAMD,EAAK,MAAM,EAqBnB,eAAcE,GACLH,EAAa,UAAU,UAAU,KAAK,KAAMG,EAAO,KAAK,KAAK,EArBpE,KAAK,KAAOF,EACZ,KAAK,kBAAoB,IAAIG,GAAkBH,EAAMC,CAAO,EAC5D,KAAK,MAAQ,KAAK,kBAAkB,MAAM,MAC1C,KAAK,IAAM,OACX,KAAK,GAAK,OACV,KAAK,YAAc,KAEnB,KAAK,kBAAkB,GAAG,kBAAoBG,GAAuC,CACnF,IAAMF,EAAS,KAAK,MAAQE,EAAY,QACxCC,EAAS,OAAO,SAAS,IAAM,CAC7B,KAAK,KAAKH,EAAOE,CAAW,CAC9B,CAAC,CACH,CAAC,EACD,KAAK,kBAAkB,GAAG,SAAWA,GAAuC,CAC1EC,EAAS,OAAO,SAAS,IAAM,CAC7B,KAAK,KAAK,SAAUD,CAAW,CACjC,CAAC,CACH,CAAC,CACH,CAMA,SAAgB,CACdE,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,uBAAwB,EAAE,EAC1E,KAAK,kBAAkB,aAAa,CAAE,MAAO,YAAa,CAAC,CAC7D,CAEA,MAAM,MAAwB,CAC5B,OAAAA,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,oBAAqB,EAAE,EAChE,KAAK,kBAAkB,KAAK,CACrC,CAEA,OAAc,CACZA,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,qBAAsB,mBAAqB,KAAK,GAAG,EACnG,KAAK,kBAAkB,aAAa,CAAE,MAAO,SAAU,CAAC,CAC1D,CAEA,IAAI,aAA6B,CAC/B,YAAK,OAAO,mBACV,iPACF,EACO,KAAK,kBAAkB,CAChC,CAEA,mBAAmC,CACjC,OAAO,KAAK,kBAAkB,kBAAkB,CAClD,CACF,EAEOC,GAAQT,GClDf,IAAMU,GAAN,MAAMA,WAAqBC,EAAW,CAmBpC,YAAYC,EAAkC,CAvChD,IAAAC,EAAAC,EAAAC,EAAAC,EAwCI,MAAMC,EAAS,iBAAiBL,EAAS,GAAO,eAAgBM,EAAO,aAAa,CAAC,EACrF,GAAAA,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,aAAc,EAAE,EAM5D,OAAO,aAAgB,SACzB,MAAM,IAAIC,EACR,8bAMA,IACA,GACF,EAGF,KAAK,oCAAsCT,GAAa,oCAAoC,KAAK,QAAQ,OAAO,EAChH,KAAK,mBAAoBI,GAAAD,EAAA,KAAK,QAAQ,UAAb,YAAAA,EAAsB,mBAAtB,KAAAC,EAA0C,KACnE,KAAK,gBAAiBE,GAAAD,EAAA,KAAK,QAAQ,UAAb,YAAAA,EAAsB,UAAtB,KAAAC,EAAiC,KACvD,KAAK,WAAa,IAAII,GAAW,KAAM,KAAK,OAAO,EACnD,KAAK,UAAY,IAAIC,GAAS,IAAI,EAC9B,KAAK,QAAQ,cAAgB,IAAO,KAAK,QAAQ,CACvD,CAEA,OAAe,oCAAoCC,EAA0B,CAC3E,IAAMC,EAAuC,CAAC,EAE9C,OAAID,GAAA,MAAAA,EAAS,qBACXC,EAAWC,EAAe,SAAS,EAAIF,EAAQ,oBAE7CA,GAAA,MAAAA,EAAS,aACXC,EAAWC,EAAe,UAAU,EAAIF,EAAQ,YAG3CC,CACT,CAEA,IAAI,UAAW,CACb,OAAO,KAAK,SACd,CAEA,SAAgB,CACdL,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,qBAAsB,EAAE,EACxE,KAAK,WAAW,QAAQ,CAC1B,CAEA,OAAc,CACZA,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,mBAAoB,EAAE,EACtE,KAAK,WAAW,MAAM,CACxB,CACF,EA1EMR,GASY,aAAee,EATjC,IAAMC,GAANhB,GA4EMW,GAAN,cAAuBI,CAAa,CAKlC,YAAYE,EAAwB,CAClC,MAAMA,EAAS,MAAM,EACrB,KAAK,SAAWA,EAChB,KAAK,IAAM,OAAO,OAAO,IAAI,EAC7BA,EAAS,WAAW,kBAAkB,GAAG,mBAAoB,IAAM,CACjE,KAAK,kBAAkB,CACzB,CAAC,CACH,CAEA,gBAA6C,CAC3C,IAAIC,EAAsC,CAAC,EAC3C,QAAWC,KAAcC,GAAU,KAAK,IAAK,EAAI,EAAG,CAClD,IAAMC,EAAU,KAAK,IAAIF,CAAI,EACzBE,EAAQ,WAAW,gBACrBH,EAAQC,CAAI,EAAIE,EAAQ,WAAW,cAEvC,CACA,OAAOH,CACT,CAGA,gBAAgBI,EAA4C,CAC1D,QAAWH,KAAcC,GAAUE,EAAgB,EAAI,EAAG,CACxD,IAAMD,EAAU,KAAK,IAAIF,CAAI,EAC7BE,EAAQ,WAAW,cAAgBC,EAAeH,CAAI,CACxD,CACF,CAGA,MAAM,sBAAsBI,EAAsB,CAChD,IAAMC,EAAcD,EAAI,QACxB,GAAIC,IAAgB,OAAW,CAC7BhB,EAAO,UACL,KAAK,OACLA,EAAO,UACP,mCACA,gDAAkDe,EAAI,MACxD,EACA,MACF,CACA,IAAMF,EAAU,KAAK,IAAIG,CAAW,EACpC,GAAI,CAACH,EAAS,CACZb,EAAO,UACL,KAAK,OACLA,EAAO,UACP,mCACA,4CAA8CgB,CAChD,EACA,MACF,CACA,MAAMH,EAAQ,eAAeE,CAAG,CAClC,CAIA,mBAAoB,CAClB,QAAWC,KAAe,KAAK,IAAK,CAClC,IAAMH,EAAU,KAAK,IAAIG,CAAW,EAChCH,EAAQ,QAAU,aAAeA,EAAQ,QAAU,YACrDA,EAAQ,kBAAkB,EACjBA,EAAQ,QAAU,YAC3BA,EAAQ,QAAQ,GAAO,IAAI,EAClBA,EAAQ,QAAU,YAG3BA,EAAQ,aAAa,WAAW,CAEpC,CACF,CAKA,gCAAgCI,EAAyBC,EAAmB,CAC1E,IAAMC,EAAkE,CACtE,QAAS,WACT,OAAQ,WACR,OAAQ,SACR,UAAW,WACb,EACMC,EAAoB,CAAC,YAAa,WAAY,YAAa,WAAW,EACtEC,EAAiBF,EAA8BF,CAAe,EAEpE,QAAWK,KAAa,KAAK,IAAK,CAChC,IAAMT,EAAU,KAAK,IAAIS,CAAS,EAC9BF,EAAkB,SAASP,EAAQ,KAAK,GAC1CA,EAAQ,YAAYQ,EAAgBH,CAAM,CAE9C,CACF,CAEA,IAAIP,EAAcY,EAAiC,CACjDZ,EAAO,OAAOA,CAAI,EAClB,IAAIE,EAAU,KAAK,IAAIF,CAAI,EAC3B,GAAI,CAACE,EACHA,EAAU,KAAK,IAAIF,CAAI,EAAI,IAAIa,GAAgB,KAAK,SAAUb,EAAMY,CAAc,UACzEA,EAAgB,CACzB,GAAIV,EAAQ,4BAA4BU,EAAgBV,EAAQ,cAAc,EAC5E,MAAM,IAAIZ,EACR,mJACA,IACA,GACF,EAEFY,EAAQ,WAAWU,CAAc,CACnC,CACA,OAAOV,CACT,CAEA,WAAWF,EAAcc,EAAkCF,EAAiC,CAC1F,GAAIE,EAAc,OAAQ,CACxB,IAAMC,EAAeC,GAASF,EAAc,MAAM,EAC5CG,EAAcC,GAAoBlB,CAAI,EAC5CA,EAAO,WAAWe,CAAM,GAAGE,EAAM,cAAc,IAAIA,EAAM,WAAW,EACtE,CACA,OAAO,KAAK,IAAIjB,EAAMY,CAAc,CACtC,CAIA,QAAQZ,EAAc,CACpBA,EAAO,OAAOA,CAAI,EAClB,IAAME,EAAU,KAAK,IAAIF,CAAI,EAC7B,GAAI,CAACE,EACH,OAEF,IAAMiB,EAAajB,EAAQ,cAAc,EACzC,GAAIiB,EACF,MAAMA,EAER,OAAO,KAAK,IAAInB,CAAI,CACtB,CACF,EAEOoB,GAAQvB,GC5Nf,SAASwB,GAAUC,EAAuBC,EAAoC,CAE5E,GAAID,EAAK,cAAc,GAAKC,EAAS,cAAc,EAEjD,OAAQD,EAAK,WAAyBC,EAAS,UAIjD,IAAMC,EAAgBF,EAAK,QAAQ,EACjCG,EAAoBF,EAAS,QAAQ,EACvC,OAAIC,EAAc,YAAcC,EAAkB,UACzCD,EAAc,MAAQC,EAAkB,MAExCD,EAAc,UAAYC,EAAkB,SAEvD,CAEO,IAAMC,GAAN,cAA0BC,CAAa,CAQ5C,YAAYC,EAA4BC,EAA8CC,EAAgBT,GAAW,CAC/G,MAAMO,EAAS,MAAM,EACrB,KAAK,SAAWA,EAChB,KAAK,IAAM,OAAO,OAAO,IAAI,EAC7B,KAAK,eAAiB,GACtB,KAAK,gBAAkB,KACvB,KAAK,UAAYC,EACjB,KAAK,UAAYC,CACnB,CAEA,IAAIC,EAAa,CACf,OAAO,KAAK,IAAIA,CAAG,CACrB,CAEA,UAAUC,EAAkB,CAC1B,IAAMC,EAAM,KAAK,IACfC,EAAS,CAAC,EACZ,QAAWH,KAAOE,EAAK,CACrB,IAAMX,EAAOW,EAAIF,CAAG,EAChBT,EAAK,UAAYU,GAAYV,EAAK,QAAU,UAAUY,EAAO,KAAKZ,CAAI,CAC5E,CACA,OAAOY,CACT,CAEA,KAAKC,EAAgC,CACnC,IAAMF,EAAM,KAAK,IACfD,EAAWG,GAAUA,EAAO,SAC5BC,EAAeD,GAAUA,EAAO,aAChCD,EAAS,CAAC,EAEZ,QAAWH,KAAOE,EAAK,CACrB,IAAMX,EAAOW,EAAIF,CAAG,EAChBT,EAAK,SAAW,WAChBU,GAAYA,GAAYV,EAAK,UAC7Bc,GAAgBA,GAAgBd,EAAK,cACzCY,EAAO,KAAKZ,CAAI,EAClB,CACA,OAAOY,CACT,CAEA,IAAIZ,EAAuB,EACrBA,EAAK,SAAW,SAAWA,EAAK,SAAW,YAC7CA,EAAOe,EAAgB,WAAWf,CAAI,EACtCA,EAAK,OAAS,WAEhB,IAAMW,EAAM,KAAK,IACfF,EAAM,KAAK,UAAUT,CAAI,EAEvB,KAAK,iBAAiB,OAAO,KAAK,gBAAgBS,CAAG,EAGzD,IAAMO,EAAeL,EAAIF,CAAG,EAC5B,OAAIO,GAAgB,CAAC,KAAK,UAAUhB,EAAMgB,CAAY,EAC7C,IAETL,EAAIF,CAAG,EAAIT,EACJ,GACT,CAEA,QAAS,CACP,IAAMW,EAAM,KAAK,IACfC,EAAS,CAAC,EACZ,QAAWH,KAAOE,EAAK,CACrB,IAAMX,EAAOW,EAAIF,CAAG,EAChBT,EAAK,QAAU,UAAUY,EAAO,KAAKZ,CAAI,CAC/C,CACA,OAAOY,CACT,CAEA,OAAOZ,EAAuB,CAC5B,IAAMW,EAAM,KAAK,IACfF,EAAM,KAAK,UAAUT,CAAI,EACrBgB,EAAeL,EAAIF,CAAG,EAE5B,OAAIO,GAAgB,CAAC,KAAK,UAAUhB,EAAMgB,CAAY,EAC7C,IAIL,KAAK,gBACPhB,EAAOe,EAAgB,WAAWf,CAAI,EACtCA,EAAK,OAAS,SACdW,EAAIF,CAAG,EAAIT,GAEX,OAAOW,EAAIF,CAAG,EAGT,CAAC,CAACO,EACX,CAEA,WAAY,CACV,IAAML,EAAM,KAAK,IACfM,EAAiB,KAAK,eACxBC,EAAO,UACL,KAAK,OACLA,EAAO,UACP,0BACA,aAAe,KAAK,SAAS,QAAQ,KAAO,sBAAwBD,CACtE,EAEK,KAAK,iBACR,KAAK,gBAAwBE,GAAKR,CAAG,EACrC,KAAK,cAAc,EAAI,EAE3B,CAEA,SAAU,CACR,IAAMA,EAAM,KAAK,IACfM,EAAiB,KAAK,eAOxB,GANAC,EAAO,UACL,KAAK,OACLA,EAAO,UACP,wBACA,aAAe,KAAK,SAAS,QAAQ,KAAO,sBAAwBD,CACtE,EACIA,EAAgB,CAGlB,QAAWV,KAAaI,EACRA,EAAIJ,CAAS,EACjB,SAAW,UACnB,OAAOI,EAAIJ,CAAS,EAKxB,KAAK,SAAS,kBAAwBa,GAAY,KAAK,eAAkD,CAAC,EAC1G,QAAWb,KAAa,KAAK,gBAC3B,OAAOI,EAAIJ,CAAS,EAEtB,KAAK,gBAAkB,KAGvB,KAAK,cAAc,EAAK,CAC1B,CACA,KAAK,KAAK,MAAM,CAClB,CAEA,SAASc,EAAsB,CAC7B,IAAMJ,EAAiB,KAAK,eAO5B,GANAC,EAAO,UACL,KAAK,OACLA,EAAO,UACP,yBACA,aAAe,KAAK,SAAS,QAAQ,KAAO,sBAAwBD,CACtE,EACI,CAACA,EAAgB,CACnBI,EAAS,EACT,MACF,CACA,KAAK,KAAK,OAAQA,CAAQ,CAC5B,CAEA,OAAQ,CACN,KAAK,IAAM,CAAC,EACZ,KAAK,cAAc,EAAK,EACxB,KAAK,gBAAkB,IACzB,CAEA,cAAcC,EAAqB,CACjCJ,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,8BAA+B,gBAAkBI,CAAU,EAC3G,KAAK,eAAiBA,EACtB,KAAK,SAAS,aAAe,CAACA,CAChC,CACF,ECtLA,SAASC,GAAYC,EAAoC,CACvD,OAAOA,EAAiB,QAAQ,OAAO,KAAK,QAC9C,CAEA,SAASC,GAAsBD,EAAoC,CACjE,IAAME,EAAWF,EAAiB,QAAQ,OAKpCG,EAAWD,EAAS,KAAK,SAC/B,OAAQ,CAACC,GAAYA,IAAa,MAAQD,EAAS,WAAW,QAAU,WAC1E,CAGA,SAASE,GAAaC,EAA0BC,EAAuBC,EAAoB,CACzF,OAAQF,EAAQ,MAAO,CACrB,IAAK,WACL,IAAK,YACHE,EAAO,EACP,MACF,IAAK,cACL,IAAK,WACL,IAAK,YACL,IAAK,YACGC,EAAmBH,EAAQ,OAAO,EAAG,SAAUI,EAAmB,CAClEA,EAAKH,EAASG,CAAG,EAChBF,EAAO,CACd,CAAC,EACD,MACF,QACED,EAASI,EAAU,WAAWL,EAAQ,kBAAkB,CAAC,CAAC,CAC9D,CACF,CAEA,IAAMM,GAAN,cAA+BC,CAAa,CAS1C,YAAYP,EAA0B,CACpC,MAAMA,EAAQ,MAAM,EACpB,KAAK,QAAUA,EACf,KAAK,aAAe,GACpB,KAAK,QAAU,IAAIQ,GAAY,KAAOC,GAASA,EAAK,SAAW,IAAMA,EAAK,YAAY,EAEtF,KAAK,WAAa,IAAID,GAAY,KAAOC,GAASA,EAAK,QAAS,EAChE,KAAK,cAAgB,IAAIF,EAAa,KAAK,MAAM,EACjD,KAAK,gBAAkB,CAAC,CAC1B,CAEA,MAAM,MAAMG,EAA8B,CACxC,GAAId,GAAsB,IAAI,EAC5B,MAAM,IAAIS,EAAU,yDAA0D,MAAO,GAAG,EAE1F,OAAO,KAAK,qBAAqB,OAAW,OAAWK,EAAM,OAAO,CACtE,CAEA,MAAM,OAAOA,EAA8B,CACzC,GAAId,GAAsB,IAAI,EAC5B,MAAM,IAAIS,EAAU,qDAAsD,MAAO,GAAG,EAEtF,OAAO,KAAK,qBAAqB,OAAW,OAAWK,EAAM,QAAQ,CACvE,CAEA,MAAM,YAAYZ,EAAkBY,EAA8B,CAChE,OAAO,KAAK,qBAAqB,OAAWZ,EAAUY,EAAM,OAAO,CACrE,CAEA,MAAM,aAAaZ,EAAkBY,EAA8B,CACjE,OAAO,KAAK,qBAAqB,OAAWZ,EAAUY,EAAM,QAAQ,CACtE,CAEA,MAAM,qBACJC,EACAb,EACAY,EACAR,EACe,CACf,IAAMF,EAAU,KAAK,QACrB,GAAI,CAACA,EAAQ,kBAAkB,YAAY,EACzC,MAAMA,EAAQ,kBAAkB,SAAS,EAG3CY,EAAO,UACL,KAAK,OACLA,EAAO,UACP,oBAAsBV,EAAS,WAC/B,aAAeF,EAAQ,KAAO,UAAYW,EAAK,eAAiBb,GAAY,cAAgBJ,GAAY,IAAI,EAC9G,EAEA,IAAMmB,EAAWC,EAAgB,SAASJ,CAAI,EAC9CG,EAAS,OAASX,EACdS,IACFE,EAAS,GAAKF,GAEZb,IACFe,EAAS,SAAWf,GAEtB,IAAMiB,EAAc,MAAMF,EAAS,OAAOb,EAAQ,cAA+B,EAEjF,OAAQA,EAAQ,MAAO,CACrB,IAAK,WACH,OAAOA,EAAQ,aAAa,CAACe,CAAW,CAAC,EAC3C,IAAK,cACL,IAAK,WACHf,EAAQ,OAAO,EAEjB,IAAK,YACH,OAAO,IAAI,QAAQ,CAACgB,EAASC,IAAW,CACtC,KAAK,gBAAgB,KAAK,CACxB,SAAUF,EACV,SAAWX,GAASA,EAAMa,EAAOb,CAAG,EAAIY,EAAQ,CAClD,CAAC,CACH,CAAC,EACH,QAAS,CACP,IAAMZ,EAAM,IAAIc,EACd,aAAehB,EAAS,8BAAgCF,EAAQ,MAAQ,SACxE,KACF,EACA,MAAAI,EAAI,KAAO,MACLA,CACR,CACF,CACF,CAEA,MAAM,MAAMM,EAA8B,CACxC,GAAId,GAAsB,IAAI,EAC5B,MAAM,IAAIS,EAAU,yEAA0E,MAAO,GAAG,EAE1G,OAAO,KAAK,YAAY,OAAWK,CAAI,CACzC,CAEA,MAAM,YAAYZ,EAAmBY,EAA+B,CAClE,IAAMV,EAAU,KAAK,QACrB,GAAI,CAACA,EAAQ,kBAAkB,YAAY,EACzC,MAAMA,EAAQ,kBAAkB,SAAS,EAG3CY,EAAO,UACL,KAAK,OACLA,EAAO,UACP,iCACA,sBAAwB,KAAK,QAAQ,KAAO,cAAgBd,CAC9D,EACA,IAAMe,EAAWC,EAAgB,SAASJ,CAAI,EAC9CG,EAAS,OAAS,QACdf,IACFe,EAAS,SAAWf,GAEtB,IAAMiB,EAAc,MAAMF,EAAS,OAAOb,EAAQ,cAA+B,EAEjF,OAAQA,EAAQ,MAAO,CACrB,IAAK,WACH,OAAOA,EAAQ,aAAa,CAACe,CAAW,CAAC,EAC3C,IAAK,YACH,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtC,KAAK,gBAAgB,KAAK,CACxB,SAAUF,EACV,SAAWX,GAASA,EAAMa,EAAOb,CAAG,EAAIY,EAAQ,CAClD,CAAC,CACH,CAAC,EACH,IAAK,cACL,IAAK,SAGH,MAAM,IAAIE,EAAiB,wDAAyD,KAAK,EAE3F,QACE,MAAMlB,EAAQ,kBAAkB,CACpC,CACF,CAEA,MAAM,IAAImB,EAA6D,CACrE,IAAMC,EAAc,CAACD,IAAW,gBAAiBA,EAASA,EAAO,YAAc,IAE/E,OAAO,IAAI,QAAQ,CAACH,EAASC,IAAW,CACtC,SAASI,EAAcC,EAAsB,CAC3CN,EAAQG,EAASG,EAAQ,KAAKH,CAAM,EAAIG,EAAQ,OAAO,CAAC,CAC1D,CAGA,GAAI,KAAK,QAAQ,QAAU,YAAa,CAClCF,EACFH,EACEZ,EAAU,WAAW,CACnB,WAAY,IACZ,KAAM,MACN,QAAS,2EACX,CAAC,CACH,EAEAgB,EAAc,KAAK,OAAO,EAE5B,MACF,CAEAtB,GACE,KAAK,QACJK,GAAQa,EAAOb,CAAG,EACnB,IAAM,CACJ,IAAMkB,EAAU,KAAK,QACjBF,EACFE,EAAQ,SAAS,UAAY,CAC3BD,EAAcC,CAAO,CACvB,CAAC,EAEDD,EAAcC,CAAO,CAEzB,CACF,CACF,CAAC,CACH,CAEA,MAAM,QAAQH,EAAiF,CAC7FP,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,6BAA8B,aAAe,KAAK,IAAI,EAEtG,IAAMW,EAAY,KAAK,QAAQ,OAAO,KAAK,cAE3C,GAAIJ,GAAUA,EAAO,YACnB,GAAI,KAAK,QAAQ,QAAU,WACzB,OAAOA,EAAO,YACdA,EAAO,YAAc,KAAK,QAAQ,WAAW,iBAE7C,OAAM,IAAId,EACR,gEAAkE,KAAK,QAAQ,MAC/E,IACA,GACF,EAIJ,OAAOkB,EAAU,QAAQ,KAAMJ,CAAM,CACvC,CAEA,YAAYK,EAAgCC,EAAiBC,EAAkC,CAC7Fd,EAAO,UACL,KAAK,OACLA,EAAO,UACP,iCACA,yBAA2BY,EAAY,OAAS,sCAAwCE,CAC1F,EACA,IAAIC,EAAYC,EACVN,EAAU,KAAK,QACnBO,EAAY,KAAK,WACjBC,EAAoB,CAAC,EACrBC,EAAS,KAAK,QAAQ,kBAAkB,aAEtCN,IACF,KAAK,QAAQ,UAAU,EACnBC,IAAsBE,EAAQF,EAAkB,MAAM,eAAe,KACvEC,EAAaC,EAAM,CAAC,IAIxB,QAASf,KAAYW,EACnB,OAAQX,EAAS,OAAQ,CACvB,IAAK,QACCS,EAAQ,OAAOT,CAAQ,GACzBiB,EAAkB,KAAKjB,CAAQ,EAE7BA,EAAS,eAAiBkB,GAAU,CAAClB,EAAS,cAAc,GAC9DgB,EAAU,OAAOhB,CAAQ,EAE3B,MACF,IAAK,QACL,IAAK,UACL,IAAK,SACCS,EAAQ,IAAIT,CAAQ,GACtBiB,EAAkB,KAAKjB,CAAQ,EAE7BA,EAAS,eAAiBkB,GAC5BF,EAAU,IAAIhB,CAAQ,EAExB,KACJ,CAGEY,GAAU,CAACE,IACbL,EAAQ,QAAQ,EAChB,KAAK,QAAQ,kBAAoB,MAInC,QAASU,EAAI,EAAGA,EAAIF,EAAkB,OAAQE,IAAK,CACjD,IAAMnB,EAAWiB,EAAkBE,CAAC,EACpC,KAAK,cAAc,KAAKnB,EAAS,OAASA,CAAQ,CACpD,CACF,CAEA,WAAWoB,EAA6B,CACtCrB,EAAO,UACL,KAAK,OACLA,EAAO,UACP,gCACA,aAAe,KAAK,QAAQ,KAAO,mBAAqBqB,CAC1D,EAEIA,EACF,KAAK,QAAQ,UAAU,GAEvB,KAAK,kBAAkB,KAAK,QAAQ,OAAO,CAAC,EAC5C,KAAK,QAAQ,MAAM,GAIrB,KAAK,wBAAwB,EAG7B,IAAMC,EAAkB,KAAK,gBAC3BC,EAAmBD,EAAgB,OAErC,GAAIC,EAAkB,CACpB,KAAK,gBAAkB,CAAC,EACxB,IAAMC,EAAgB,CAAC,EACjBC,EAAcC,GAAY,OAAO,KAAK,MAAM,EAClD1B,EAAO,UACL,KAAK,OACLA,EAAO,UACP,8BACA,WAAauB,EAAmB,2BAClC,EACA,QAASH,EAAI,EAAGA,EAAIG,EAAkBH,IAAK,CACzC,IAAMO,EAAQL,EAAgBF,CAAC,EAC/BI,EAAc,KAAKG,EAAM,QAAQ,EACjCF,EAAY,KAAKE,EAAM,QAAQ,CACjC,CACA,KAAK,QACF,aAAaH,CAAa,EAC1B,KAAK,IAAMC,EAAY,CAAC,EACxB,MAAOjC,GAAmBiC,EAAYjC,CAAG,CAAC,CAC/C,CACF,CAEA,kBAAkBoC,EAAeP,EAAuB7B,EAA8B,CACpF,OAAQoC,EAAO,CACb,IAAK,WACH,KAAK,WAAWP,CAAW,EAC3B,MACF,IAAK,WACL,IAAK,SACH,KAAK,gBAAgB,EACrB,KAAK,QAAQ,MAAM,EAErB,IAAK,YACH,KAAK,oBAAoB7B,CAAG,EAC5B,KACJ,CACF,CAEA,oBAAoBA,EAA8B,CAChD,GAAI,KAAK,gBAAgB,OAAQ,CAC/BQ,EAAO,UACL,KAAK,OACLA,EAAO,UACP,sCACA,mBAAqB,KAAK,QAAQ,KAAO,WAAmB6B,EAAarC,CAAG,CAC9E,EACA,QAAS4B,EAAI,EAAGA,EAAI,KAAK,gBAAgB,OAAQA,IAC/C,GAAI,CACF,KAAK,gBAAgBA,CAAC,EAAE,SAAS5B,CAAG,CAEtC,OAASsC,EAAG,CAAC,CACf,KAAK,gBAAkB,CAAC,CAC1B,CACF,CAEA,iBAAwB,CACtB,KAAK,WAAW,MAAM,CACxB,CAEA,yBAAgC,CAC9B,IAAMb,EAAY,KAAK,WACjBE,EAAS,KAAK,QAAQ,kBAAkB,aAE9C,QAAWY,KAAad,EAAU,IAAK,CACrC,IAAMe,EAAQf,EAAU,IAAIc,CAAS,EACrC/B,EAAO,UACL,KAAK,OACLA,EAAO,UACP,6CACA,6BAA+BgC,EAAM,SAAW,yBAClD,EAIA,IAAMjC,EAAKiC,EAAM,eAAiBb,EAASa,EAAM,GAAK,OACtD,KAAK,qBAAqBjC,EAAIiC,EAAM,SAAUA,EAAM,KAAM,OAAO,EAAE,MAAOxC,GAAQ,CAChF,IAAMyC,EAAa,IAAIxC,EAAU,gCAAiC,MAAO,IAAKD,CAAG,EACjFQ,EAAO,UACL,KAAK,OACLA,EAAO,UACP,6CACA,2CAAmD6B,EAAarC,CAAG,CACrE,EACA,IAAM0C,EAAS,IAAIC,GAAmB,KAAK,QAAQ,MAAO,KAAK,QAAQ,MAAO,GAAM,GAAOF,CAAU,EACrG,KAAK,QAAQ,KAAK,SAAUC,CAAM,CACpC,CAAC,CACH,CACF,CAEA,kBAAkBE,EAAgC,CAChD,IAAMC,EAAgB,KAAK,cAC3BD,EAAM,QAAQ,SAAUvC,EAAM,CAC5B,IAAMI,EAAWC,EAAgB,WAAW,CAC1C,OAAQ,QACR,aAAcL,EAAK,aACnB,SAAUA,EAAK,SACf,KAAMA,EAAK,KACX,SAAUA,EAAK,SACf,UAAW,KAAK,IAAI,CACtB,CAAC,EACDwC,EAAc,KAAK,QAASpC,CAAQ,CACtC,CAAC,CACH,CAEA,MAAM,aAAaqC,EAAyD,CAC1E,IAAMC,EAAOC,GAAgB,oBAAoBF,CAAK,EAChDX,EAAQY,EAAK,CAAC,EACdE,EAAWF,EAAK,CAAC,EACjBnD,EAAU,KAAK,QAErB,GAAIA,EAAQ,QAAU,SACpB,MAAMK,EAAU,WAAWL,EAAQ,kBAAkB,CAAC,EAGxD,KAAK,cAAc,GAAGuC,EAAOc,CAAQ,EAGjCrD,EAAQ,eAAe,oBAAsB,IAC/C,MAAMA,EAAQ,OAAO,CAEzB,CAEA,eAAekD,EAAgD,CAC7D,IAAMC,EAAOC,GAAgB,oBAAoBF,CAAK,EAChDX,EAAQY,EAAK,CAAC,EACdE,EAAWF,EAAK,CAAC,EACvB,KAAK,cAAc,IAAIZ,EAAOc,CAAQ,CACxC,CACF,EAEOC,GAAQhD,GCrcf,IAAMiD,GAAYC,EAAe,UAEjC,SAASC,GAAgBC,EAAoD,CAC3E,MAAO,CAAC,CAAEA,EAAqB,EACjC,CAEA,IAAMC,GAAN,cAAiCC,EAAU,CAMzC,YAAYC,EAAsCC,EAAYC,EAAyB,CACrF,MAAMF,EAAmBC,EAAMC,CAAM,EANvC,eAAYR,GAQVQ,EAAO,WAAaC,EAAS,OAAO,sBACpC,KAAK,OAASD,EAAO,IACvB,CAEA,OAAO,aAAc,CACnB,MAAO,CAAC,CAACC,EAAS,OAAO,SAC3B,CAEA,gBAAgBC,EAAaC,EAAuC,CAClE,YAAK,IAAMD,EAAYE,GAAcD,CAAa,EAC3C,IAAIF,EAAS,OAAO,UAAU,KAAK,GAAG,CAC/C,CAEA,UAAW,CACT,MAAO,2BAA6B,KAAK,GAC3C,CAEA,SAAU,CACRI,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,+BAAgC,UAAU,EAC1FR,GAAU,UAAU,QAAQ,KAAK,IAAI,EACrC,IAAMS,EAAO,KACXN,EAAS,KAAK,OACdO,EAAUP,EAAO,QAEbQ,GADWD,EAAQ,IAAM,SAAW,SACjB,KAAK,OAAS,IAAME,EAAS,QAAQF,CAAO,EAAI,IACzEF,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,+BAAgC,QAAUG,CAAK,EACzFE,EACJ,KAAK,KAAK,cAAc,EACxB,SAAUC,EAAuBC,EAAqC,CACpE,GAAIN,EAAK,WACP,OAEF,IAAIO,EAAW,GACf,QAAWC,KAASF,EAAYC,GAAY,IAAMC,EAAQ,KAAOF,EAAWE,CAAK,EAAI,IAOrF,GANAT,EAAO,UACLC,EAAK,OACLD,EAAO,UACP,+BACA,cAAgBQ,EAAW,SAAWF,CACxC,EACIA,EAAK,CACPL,EAAK,WAAWK,CAAG,EACnB,MACF,CACA,IAAMR,EAAgBH,EAAO,iBAAiBY,CAAW,EACzD,GAAI,CACF,IAAMG,EAAgBT,EAAK,aAAeA,EAAK,gBAAgBE,EAAOL,CAAa,EACnFY,EAAa,WAAad,EAAS,OAAO,WAC1Cc,EAAa,OAAS,UAAY,CAChCT,EAAK,SAAS,CAChB,EACAS,EAAa,QAAU,SAAUC,EAAgB,CAC/CV,EAAK,UAAUU,CAAE,CACnB,EACAD,EAAa,UAAY,SAAUC,EAAkB,CACnDV,EAAK,SAASU,EAAG,IAAI,CACvB,EACAD,EAAa,QAAU,SAAUC,EAAW,CAC1CV,EAAK,UAAUU,CAAgB,CACjC,EACItB,GAAgBqB,CAAY,GAG9BA,EAAa,GAAG,OAAQ,UAAY,CAClCT,EAAK,WAAW,CAClB,CAAC,CAEL,OAASW,EAAG,CACVZ,EAAO,UACLC,EAAK,OACLD,EAAO,UACP,+BACA,mDAAsDY,EAAY,OAAUA,EAAY,QAC1F,EACAX,EAAK,WAAWW,CAAU,CAC5B,CACF,CACF,CACF,CAEA,KAAKC,EAA0B,CAC7B,IAAMH,EAAe,KAAK,aAC1B,GAAI,CAACA,EAAc,CACjBV,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,4BAA6B,sBAAsB,EACnG,MACF,CACA,GAAI,CACDU,EAA+B,KAC9BI,GAAyBD,EAAS,KAAK,kBAAkB,SAAS,SAAU,KAAK,OAAO,MAAM,CAChG,CACF,OAASD,EAAG,CACV,IAAMG,EAAM,qDAA6DC,EAAaJ,CAAC,EACvFZ,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,4BAA6Be,CAAG,EAGhF,KAAK,OAAO,eAAgB,IAAIE,EAAUF,EAAK,IAAO,GAAG,CAAC,CAC5D,CACF,CAEA,SAASG,EAAc,CACrBlB,EAAO,UACL,KAAK,OACLA,EAAO,UACP,gCACA,2BAA6BkB,EAAK,OAAS,YAAc,OAAOA,CAClE,EACA,GAAI,CACF,KAAK,kBACHC,GACED,EACA,KAAK,kBAAkB,SAAS,SAChC,KAAK,kBAAkB,SAAS,kBAChC,KAAK,kBAAkB,SAAS,aAChC,KAAK,kBAAkB,SAAS,eAChC,KAAK,MACP,CACF,CACF,OAASN,EAAG,CACVZ,EAAO,UACL,KAAK,OACLA,EAAO,UACP,gCACA,iDAAoDY,EAAY,KAClE,CACF,CACF,CAEA,UAAW,CACTZ,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,gCAAiC,kBAAkB,EACnG,KAAK,KAAK,YAAY,CACxB,CAEA,UAAUW,EAAyB,CACjC,IAAIS,EAAUC,EAYd,GAXI,OAAOV,GAAM,UAEfU,EAAOV,EAAG,KAEVS,EAAWT,EAAG,UAAYU,IAAS,MAGnCA,EAAOV,EACPS,EAAWC,GAAQ,KAErB,OAAO,KAAK,aACRD,EAAU,CACZpB,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,iCAAkC,0BAA0B,EAC5G,IAAMM,EAAM,IAAIW,EAAU,mBAAoB,MAAO,GAAG,EACxD,KAAK,OAAO,eAAgBX,CAAG,CACjC,KAAO,CACL,IAAMS,EAAM,+CAAiDM,EAC3Df,EAAM,IAAIW,EAAUF,EAAK,MAAO,GAAG,EACrCf,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,iCAAkCe,CAAG,EACrF,KAAK,OAAO,eAAgBT,CAAG,CACjC,CACA,KAAK,KAAK,UAAU,CACtB,CAEA,UAAUA,EAAiB,CACzBN,EAAO,UACL,KAAK,OACLA,EAAO,UACP,+BACA,yBAA2BM,EAAI,OACjC,EAIAV,EAAS,OAAO,SAAS,IAAM,CAC7B,KAAK,WAAW,MAAMU,EAAI,OAAO,CAAC,CACpC,CAAC,CACH,CAEA,SAAU,CACRN,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,+BAAgC,EAAE,EAClF,KAAK,WAAa,GAClB,IAAMU,EAAe,KAAK,aACtBA,IAIFA,EAAa,UAAY,UAAY,CAAC,EACtC,OAAO,KAAK,aAGZd,EAAS,OAAO,SAAS,IAAM,CAE7B,GADAI,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,+BAAgC,mBAAmB,EAC/F,CAACU,EACH,MAAM,IAAI,MAAM,2DAA2D,EAE7EA,EAAa,MAAM,CACrB,CAAC,EAEL,CACF,EAEOY,GAAQ/B,GC9NR,IAAMgC,GAAN,KAA4B,CACjC,OAAO,gBAAgBC,EAA0BC,EAA2BC,EAAwC,CAClH,IAAMC,EAAoBC,GAAe,CAN7C,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAOM,IAAMC,EAAqD,CACzD,KAAMP,EAAE,KACR,eAAeE,GAAAD,EAAAD,EAAE,SAAF,YAAAC,EAAU,MAAV,YAAAC,EAAe,WAC9B,SAASE,GAAAD,EAAAH,EAAE,SAAF,YAAAG,EAAU,MAAV,YAAAC,EAAe,KACxB,MAAO,CAAC,GAACE,GAAAD,EAAAL,EAAE,SAAF,YAAAK,EAAU,MAAV,MAAAC,EAAe,YACxB,SAAUN,EAAE,QACd,EAGE,OAAO,QAAQH,CAAM,EAAE,KAAK,CAAC,CAACW,EAAKC,CAAK,IACtCA,IAAU,OAAYF,EAAQC,CAA8B,IAAMC,EAAQ,EAC5E,GAIFX,EAASE,CAAC,CACZ,EACA,KAAK,wBAAwBJ,EAASC,EAAQC,EAAUC,CAAgB,EACxEH,EAAQ,cAAc,GAAGG,CAAgB,CAC3C,CAGA,OAAO,wBACLH,EACAC,EACAa,EACAX,EACA,CAlCJ,IAAAE,EAyCI,GANKL,EAAQ,wBACXA,EAAQ,sBAAwB,IAAI,KAKlCA,EAAQ,sBAAsB,IAAIc,CAAY,EAAG,CACnD,IAAMC,EAAkBf,EAAQ,sBAAsB,IAAIc,CAAY,EAKtEC,EAAgB,IAAId,IAAQI,EAAAU,GAAA,YAAAA,EAAiB,IAAId,KAArB,YAAAI,EAA8B,OAAOF,KAAqB,CAACA,CAAgB,CAAC,CAC1G,MACEH,EAAQ,sBAAsB,IAC5Bc,EACA,IAAI,IAAuD,CAAC,CAACb,EAAQ,CAACE,CAAgB,CAAC,CAAC,CAAC,CAC3F,CAEJ,CAEA,OAAO,kCACLH,EACAC,EACAa,EACgC,CAEhC,GAAI,CAACd,EAAQ,sBACX,MAAO,CAAC,EAGV,GAAI,CAACc,GAAgBb,EAEnB,OAAO,MAAM,KAAKD,EAAQ,sBAAsB,QAAQ,CAAC,EACtD,IAAI,CAAC,CAACY,EAAKI,CAAU,IAAM,CArEpC,IAAAX,EAuEU,IAAIY,EAAeD,EAAW,IAAIf,CAAM,EACxC,OAAAe,EAAW,OAAOf,CAAM,EAEpBe,EAAW,OAAS,KACtBX,EAAAL,EAAQ,wBAAR,MAAAK,EAA+B,OAAOO,IAEjCK,CACT,CAAC,EACA,OACC,CAACC,EAAMC,IAASA,EAAOD,EAAwC,OAAO,GAAGC,CAAG,EAAID,EAChF,CAAC,CACH,EAIJ,GAAI,CAACJ,GAAgB,CAACd,EAAQ,sBAAsB,IAAIc,CAAY,EAClE,MAAO,CAAC,EAEV,IAAMC,EAAkBf,EAAQ,sBAAsB,IAAIc,CAAY,EAKtE,GAAI,CAACb,EAAQ,CAEX,IAAMmB,EAAY,MAAM,KAAKL,EAAgB,OAAO,CAAC,EAAE,OAAO,CAACG,EAAMC,IAAQD,EAAK,OAAO,GAAGC,CAAG,EAAG,CAAC,CAAC,EAEpG,OAAAnB,EAAQ,sBAAsB,OAAOc,CAAY,EAC1CM,CACT,CAEA,IAAIA,EAAYL,EAAgB,IAAId,CAAM,EAC1C,OAAAc,EAAgB,OAAOd,CAAM,EAEtBmB,GAAa,CAAC,CACvB,CACF,EChFO,IAAMC,EAAN,MAAMA,UAAwBC,EAAa,CAEhD,YAAYC,EAAkC,CA7BhD,IAAAC,EA8BI,IAAMC,EAAUJ,EAAgB,SAChC,GAAI,CAACI,EACH,MAAM,IAAI,MAAM,oDAAoD,EAGtE,MACEC,EAAS,iBAAiBH,EAAS,GAAM,WAAYI,EAAO,cAAeC,EAAAC,EAAA,GACtEC,IADsE,CAEzE,QAAQN,EAAAH,EAAgB,SAAhB,KAAAG,EAA0B,OAClC,QAAAC,EACA,iBAAkB,CAChB,iBAAAM,GACA,gBAAAC,EACA,oBAAAC,EACF,EACA,YAAa,CACX,WAAAC,GACA,eAAAC,GACA,oBAAAC,GACA,gBAAAC,EACF,EACA,mBAAAC,GACA,oBAAqBC,EACvB,EAAC,CACH,CACF,CAOA,WAAW,QAAS,CAClB,GAAI,KAAK,UAAY,KACnB,MAAM,IAAI,MAAM,wDAAwD,EAG1E,OAAO,KAAK,OACd,CACA,WAAW,OAAOC,EAAkC,CAClD,KAAK,QAAUA,CACjB,CAYF,EAxDanB,EA8BJ,MAAQoB,EA9BJpB,EA+BJ,kBAAoBqB,GA/BhBrB,EAgCJ,gBAAkBsB,GAhCdtB,EAkCI,QAAkC,KAlCtCA,EA8CJ,QAAUuB,GA9CNvB,EA+CJ,gBAAkBwB,GA/CdxB,EAgDJ,WAAayB,GAhDTzB,EAkDJ,SAA2B,KAlDvBA,EAqDJ,MAAQ0B,GArDJ1B,EAsDJ,aAAe2B,GAtDX3B,EAuDJ,iBAAmB4B,GAvDrB,IAAMC,GAAN7B,ECLP,IAAI8B,GAAa,WACbC,GAAc,YACdC,GAAM,KAAK,IAMXC,GAAgB,IAAIF,GAAY,CAAC,EACjCG,GAA4B,CAAC,EAK7BC,GAAI,IAAIJ,GAAY,EAAE,EAM1B,SAASK,GAAkBC,EAAW,CACpC,OAASA,GAAKA,EAAI,IAAML,GAAI,EAAG,EAAE,EAAK,CACxC,CAEA,IAAIK,GAAI,EACNC,GAAS,EACX,KAAOA,GAAS,IAAI,CAYlB,IATIC,GAAU,GASLC,GAAS,EAAGA,IAAUH,GAAI,EAAGG,KAChCH,GAAIG,KAAW,IACjBD,GAAU,IAGVA,KACED,GAAS,IACXL,GAAcK,EAAM,EAAIF,GAAkBJ,GAAIK,GAAG,EAAI,CAAC,CAAC,GAEzDH,GAAgBI,EAAM,EAAIF,GAAkBJ,GAAIK,GAAG,EAAI,CAAC,CAAC,EAEzDC,MAGFD,IACF,CAxBM,IAAAE,GASKC,GAqBPC,GAAe,CAAC,CAAC,IAAIX,GAAW,IAAIC,GAAY,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,EAElE,SAASW,GAAcC,EAAc,CACnC,OAAIF,GAGCE,IAAS,IAEPA,IAAS,GAAM,MAAS,GAEzBA,EAAO,QAAW,EAEnBA,GAAQ,GAGJA,CAEX,CAEA,SAASC,GAAYD,EAAcE,EAAc,CAC/C,OAAQF,IAASE,EAASF,GAAS,GAAKE,CAC1C,CAEO,SAASC,GAAOC,EAA8B,CAEnD,IAAIC,EAAQf,GAAc,MAAM,EAI5BgB,EAAQF,EAAK,OAGbG,EAAYD,EAAQ,EACpBE,EAAe,KAAQD,EAAY,IAAM,IAAO,EAAIA,EAAY,GAGhEE,EAAQ,IAAItB,GAAWqB,EAAe,CAAC,EACvCE,EAAQ,IAAItB,GAAYqB,EAAM,MAAM,EAExCA,EAAM,IAAIL,EAAM,CAAC,EAEjBK,EAAMH,CAAK,EAAI,IAEfI,EAAMA,EAAM,OAAS,CAAC,EAAIX,GAAcQ,CAAS,EAMjD,QAHII,EAGKC,EAAQ,EAAGA,EAAQJ,EAAe,GAAII,GAAS,GAAI,CAC1D,IAAIC,EAAeR,EAAM,MAAM,EAG/B,IAAKM,EAAQ,EAAGA,EAAQ,GAAIA,IAAS,CACnC,IAAIG,EAEJ,GAAIH,EAAQ,GAEVG,EAASf,GAAcW,EAAME,EAAQD,CAAK,CAAC,MACtC,CACL,IAAII,EAAUvB,GAAEmB,EAAQ,EAAE,EACtBK,EAAUxB,GAAEmB,EAAQ,CAAC,EACzBG,EACEtB,GAAEmB,EAAQ,CAAC,EACXnB,GAAEmB,EAAQ,EAAE,GACXV,GAAYc,EAAS,CAAC,EAAId,GAAYc,EAAS,EAAE,EAAKA,IAAY,IAClEd,GAAYe,EAAS,EAAE,EAAIf,GAAYe,EAAS,EAAE,EAAKA,IAAY,GACxE,CAGAxB,GAAEmB,CAAK,EAAIG,GAAU,EAYrB,QATIG,GACDhB,GAAYY,EAAa,CAAC,EAAG,CAAC,EAAIZ,GAAYY,EAAa,CAAC,EAAG,EAAE,EAAIZ,GAAYY,EAAa,CAAC,EAAG,EAAE,IACnGA,EAAa,CAAC,EAAIA,EAAa,CAAC,EAAM,CAACA,EAAa,CAAC,EAAIA,EAAa,CAAC,GACzEA,EAAa,CAAC,EACdC,EACAvB,GAAgBoB,CAAK,EACnBO,GACDjB,GAAYY,EAAa,CAAC,EAAG,CAAC,EAAIZ,GAAYY,EAAa,CAAC,EAAG,EAAE,EAAIZ,GAAYY,EAAa,CAAC,EAAG,EAAE,IACnGA,EAAa,CAAC,EAAIA,EAAa,CAAC,EAAMA,EAAa,CAAC,GAAKA,EAAa,CAAC,EAAIA,EAAa,CAAC,IACpFM,EAAI,EAAGA,EAAI,EAAGA,IACrBN,EAAaM,CAAC,EAAIN,EAAaM,EAAI,CAAC,EAEtCN,EAAa,CAAC,EAAKI,EAAKC,EAAM,EAC9BL,EAAa,CAAC,EAAKA,EAAa,CAAC,EAAII,EAAM,CAC7C,CAGA,IAAKN,EAAQ,EAAGA,EAAQ,EAAGA,IACzBN,EAAMM,CAAK,EAAKN,EAAMM,CAAK,EAAIE,EAAaF,CAAK,EAAK,CAE1D,CAIA,OAAO,IAAIxB,GACT,IAAIC,GACFiB,EAAM,IAAI,SAAUe,EAAK,CACvB,OAAOrB,GAAcqB,CAAG,CAC1B,CAAC,CACH,EAAE,MACJ,CACF,CAEO,SAASC,GAAKC,EAAiBlB,EAA8B,CAGlE,GAFIkB,EAAI,OAAS,KAAIA,EAAMnB,GAAOmB,CAAG,GAEjCA,EAAI,OAAS,GAAI,CACnB,IAAMC,EAAM,IAAI,WAAW,EAAE,EAC7BA,EAAI,IAAID,EAAK,CAAC,EACdA,EAAMC,CACR,CAKA,QAFIC,EAAW,IAAI,WAAW,EAAE,EAC5BC,EAAW,IAAI,WAAW,EAAE,EACvBN,EAAI,EAAGA,EAAI,GAAIA,IACtBK,EAASL,CAAC,EAAI,GAAOG,EAAIH,CAAC,EAC1BM,EAASN,CAAC,EAAI,GAAOG,EAAIH,CAAC,EAI5B,IAAIO,EAAM,IAAI,WAAWtB,EAAK,OAAS,EAAE,EACzCsB,EAAI,IAAIF,EAAU,CAAC,EACnBE,EAAI,IAAItB,EAAM,EAAE,EAGhB,IAAIuB,EAAS,IAAI,WAAW,GAAK,EAAE,EACnC,OAAAA,EAAO,IAAIF,EAAU,CAAC,EACtBE,EAAO,IAAIxB,GAAOuB,CAAG,EAAG,EAAE,EAGnBvB,GAAOwB,CAAM,CACtB,CC7MA,IAAMC,GAAN,KAA8E,CAA9E,cACE,mBAAgB,mEAChB,gBAAa,mBAGL,kBAAkBC,EAA2B,CACnD,IAAIC,EAAS,GACPC,EAAY,KAAK,cAEjBC,EAAaH,EAAM,WACnBI,EAAgBD,EAAa,EAC7BE,EAAaF,EAAaC,EAE5BE,EAAGC,EAAGC,EAAGC,EACTC,EAGJ,QAASC,EAAI,EAAGA,EAAIN,EAAYM,EAAIA,EAAI,EAEtCD,EAASV,EAAMW,CAAC,GAAK,GAAOX,EAAMW,EAAI,CAAC,GAAK,EAAKX,EAAMW,EAAI,CAAC,EAG5DL,GAAKI,EAAQ,WAAa,GAC1BH,GAAKG,EAAQ,SAAW,GACxBF,GAAKE,EAAQ,OAAS,EACtBD,EAAIC,EAAQ,GAGZT,GAAUC,EAAUI,CAAC,EAAIJ,EAAUK,CAAC,EAAIL,EAAUM,CAAC,EAAIN,EAAUO,CAAC,EAIpE,OAAIL,GAAiB,GACnBM,EAAQV,EAAMK,CAAU,EAExBC,GAAKI,EAAQ,MAAQ,EAGrBH,GAAKG,EAAQ,IAAM,EAEnBT,GAAUC,EAAUI,CAAC,EAAIJ,EAAUK,CAAC,EAAI,MAC/BH,GAAiB,IAC1BM,EAASV,EAAMK,CAAU,GAAK,EAAKL,EAAMK,EAAa,CAAC,EAEvDC,GAAKI,EAAQ,QAAU,GACvBH,GAAKG,EAAQ,OAAS,EAGtBF,GAAKE,EAAQ,KAAO,EAEpBT,GAAUC,EAAUI,CAAC,EAAIJ,EAAUK,CAAC,EAAIL,EAAUM,CAAC,EAAI,KAGlDP,CACT,CAEQ,oBAAoBA,EAAwB,CAClD,IAAMW,EAAgB,uBAAOX,GACvBY,EAAMD,EAAc,OACpBZ,EAAQ,IAAI,WAAWa,CAAG,EAChC,QAASF,EAAI,EAAGA,EAAIE,EAAKF,IAAK,CAC5B,IAAMG,EAAQF,EAAc,WAAWD,CAAC,EACxCX,EAAMW,CAAC,EAAIG,CACb,CACA,OAAO,KAAK,cAAcd,CAAK,CACjC,CAEA,SAASe,EAAuC,CAC9C,OAAOA,aAAkB,aAAe,YAAY,OAAOA,CAAM,CACnE,CAEA,SAASA,EAAoC,CAC3C,GAAI,CAAC,YACH,MAAM,IAAI,MAAM,uEAAuE,EAGzF,GAAIA,aAAkB,YACpB,OAAO,IAAI,WAAWA,CAAM,EAG9B,GAAI,YAAY,OAAOA,CAAM,EAC3B,OAAO,IAAI,WAAW,KAAK,cAAcA,CAAM,CAAC,EAGlD,MAAM,IAAI,MAAM,iEAAiE,CACnF,CAEA,cAAcA,EAAiC,CAC7C,GAAI,CAAC,YACH,MAAM,IAAI,MAAM,4EAA4E,EAG9F,GAAIA,aAAkB,YACpB,OAAOA,EAGT,GAAI,YAAY,OAAOA,CAAM,EAC3B,OAAOA,EAAO,OAAO,MAAMA,EAAO,WAAYA,EAAO,WAAaA,EAAO,UAAU,EAGrF,MAAM,IAAI,MAAM,sEAAsE,CACxF,CAEA,aAAaA,EAA4B,CACvC,OAAO,KAAK,kBAAkB,KAAK,SAASA,CAAM,CAAC,CACrD,CAEA,gBAAgBA,EAA4B,CAE1C,OAAO,KAAK,aAAaA,CAAM,EAAE,QAAQ,MAAO,GAAG,EAAE,QAAQ,MAAO,GAAG,EAAE,QAAQ,MAAO,EAAE,CAC5F,CAEA,aAAaC,EAAqB,CAChC,GAAI,aAAeC,EAAS,OAAO,KACjC,OAAO,KAAK,oBAAoBD,CAAG,EAEnC,MAAM,IAAI,MAAM,yEAAyE,CAE7F,CAEA,UAAUD,EAA4B,CAEpC,OADmB,KAAK,SAASA,CAAM,EACrB,OAAO,CAACG,EAAOC,IAASD,EAAQC,EAAK,SAAS,EAAE,EAAE,SAAS,EAAG,GAAG,EAAG,EAAE,CAC1F,CAEA,UAAUC,EAAiC,CACzC,GAAIA,EAAgB,OAAS,IAAM,EACjC,MAAM,IAAI,MAAM,2DAA2D,EAG7E,IAAMC,EAAa,IAAI,WAAWD,EAAgB,OAAS,CAAC,EAE5D,QAAST,EAAI,EAAGA,EAAIU,EAAW,OAAQV,IACrCU,EAAWV,CAAC,EAAI,SAASS,EAAgB,MAAM,EAAIT,EAAG,GAAKA,EAAI,EAAE,EAAG,EAAE,EAGxE,OAAO,KAAK,cAAcU,CAAU,CACtC,CAEA,WAAWC,EAAwB,CACjC,GAAIL,EAAS,OAAO,YAAa,CAC/B,IAAMM,EAAmB,IAAIN,EAAS,OAAO,YAAY,EAAE,OAAOK,CAAM,EACxE,OAAO,KAAK,cAAcC,CAAgB,CAC5C,KACE,OAAM,IAAI,MAAM,uCAAuC,CAE3D,CAOA,WAAWR,EAA4B,CACrC,GAAI,CAAC,KAAK,SAASA,CAAM,EACvB,MAAM,IAAI,MAAM,kEAAkE,EAEpF,GAAI,YACF,OAAO,IAAI,YAAY,EAAE,OAAOA,CAAM,EAEtC,MAAM,IAAI,MAAM,uCAAuC,CAE3D,CAEA,gBAAgBS,EAAqBC,EAA8B,CACjE,GAAI,CAACD,GAAW,CAACC,EAAS,MAAO,GACjC,IAAMC,EAAe,KAAK,cAAcF,CAAO,EACzCG,EAAe,KAAK,cAAcF,CAAO,EAE/C,GAAIC,EAAa,YAAcC,EAAa,WAAY,MAAO,GAE/D,IAAMC,EAAS,IAAI,WAAWF,CAAY,EACpCG,EAAS,IAAI,WAAWF,CAAY,EAE1C,QAAShB,EAAI,EAAGA,EAAIiB,EAAO,OAAQjB,IACjC,GAAIiB,EAAOjB,CAAC,GAAKkB,EAAOlB,CAAC,EAAG,MAAO,GAErC,MAAO,EACT,CAEA,WAAWI,EAA4B,CACrC,OAAIA,aAAkB,aAAe,YAAY,OAAOA,CAAM,EACrDA,EAAO,WAET,EACT,CAEA,wBAAwBe,EAA+C,CACrE,OAAO,KAAK,cAAcA,CAAe,CAC3C,CAEA,OAAOC,EAA+B,CACpC,IAAMC,EAAYD,EAAQ,OAAO,CAACE,EAAKC,IAAMD,EAAMC,EAAE,WAAY,CAAC,EAC5DC,EAAS,IAAI,WAAWH,CAAS,EACnCI,EAAS,EAEb,QAAWrB,KAAUgB,EAAS,CAC5B,IAAMV,EAAa,KAAK,SAASN,CAAM,EAEvCoB,EAAO,IAAId,EAAYe,CAAM,EAC7BA,GAAUf,EAAW,UACvB,CAEA,OAAOc,EAAO,MAChB,CAEA,OAAOE,EAA6B,CAClC,IAAMC,EAAOC,GAAO,KAAK,SAASF,CAAO,CAAC,EAC1C,OAAO,KAAK,cAAcC,CAAI,CAChC,CAEA,WAAWD,EAAqBG,EAAyB,CACvD,IAAMF,EAAOG,GAAW,KAAK,SAASD,CAAG,EAAG,KAAK,SAASH,CAAO,CAAC,EAClE,OAAO,KAAK,cAAcC,CAAI,CAChC,CACF,EAEOI,GAAQ,IAAI3C,GClNnB,IAAI4C,GAAoB,SAAUC,EAAyBC,EAAiC,CAC1F,IAAIC,EAAoB,MACpBC,EAAoB,IACpBC,EAAe,MACfC,EAAsB,GAM1B,SAASC,EAAqBC,EAA0B,CACtD,GAAIA,EAAO,YAAc,OAASA,EAAO,OAAS,MAAO,CACvD,GAAIA,EAAO,YAAc,KAAOA,EAAO,YAAc,IACnD,OAEF,MAAM,IAAI,MACR,0BACEA,EAAO,UACP,6FACJ,CACF,CACF,CAEA,SAASC,EAAgBC,EAAgB,CAEvC,OAAOA,EAAO,QAAQ,IAAK,GAAG,EAAE,QAAQ,IAAK,GAAG,CAClD,CAEA,SAASC,EAAeH,EAA+E,CAErG,OAAOA,aAAkBI,CAC3B,CAaA,MAAMA,CAAyC,CAM7C,YAAYC,EAAmBC,EAAmBC,EAAcC,EAAkB,CAChF,KAAK,UAAYH,EACjB,KAAK,UAAYC,EACjB,KAAK,KAAOC,EACZ,KAAK,IAAMC,CACb,CACF,CAiBA,MAAMC,CAAO,CAYX,OAAO,iBAAiBT,EAAgC,CACtD,IAAIQ,EAEJ,GAAI,CAACR,EAAO,IACV,MAAM,IAAI,MAAM,4CAA4C,EAG1D,OAAOA,EAAO,KAAQ,SACxBQ,EAAMd,EAAY,cAAcA,EAAY,aAAaO,EAAgBD,EAAO,GAAG,CAAC,CAAC,EAC5EA,EAAO,eAAe,YAC/BQ,EAAMR,EAAO,IAEbQ,EAAMd,EAAY,cAAcM,EAAO,GAAG,EAG5C,IAAIK,EAAYL,EAAO,WAAaL,EAChCW,EAAYE,EAAI,WAAa,EAC7BD,EAAOP,EAAO,MAAQH,EACtBa,EAAe,IAAIN,EAAaC,EAAWC,EAAWC,EAAMC,CAAG,EAEnE,GAAIR,EAAO,WAAaA,EAAO,YAAcU,EAAa,UACxD,MAAM,IAAI,MACR,2CACEV,EAAO,UACP,mDACAU,EAAa,SACjB,EAGF,OAAAX,EAAqBW,CAAY,EAC1BA,CACT,CAOA,aAAa,kBAAkBJ,EAA4C,CACzE,GAAI,CACF,OAAOb,EAAO,sBAAsBa,GAAaV,GAAqB,CAAC,CACzE,OAASe,EAAK,CACZ,MAAM,IAAIC,EAAU,kCAAqCD,EAAc,QAAS,IAAK,IAAOA,CAAY,CAC1G,CACF,CAOA,OAAO,UAAUX,EAA8Ba,EAAgB,CA1JnE,IAAAC,EA2JM,IAAIJ,EAAeP,EAAeH,CAAM,EAAKA,EAA0B,KAAK,iBAAiBA,CAAM,EAEnG,MAAO,CACL,aAAcU,EACd,OAAQ,IAAIK,EAAUL,GAAcI,EAAAd,EAAO,KAAP,KAAAc,EAAa,KAAMD,CAAM,CAC/D,CACF,CACF,CAvEMJ,EACG,aAAeL,EA0ExB,MAAMW,CAAiG,CAMrG,YACEf,EACAgB,EACiBH,EACjB,CADiB,YAAAA,EAEjB,GAAI,CAAC,OAAO,OACV,MAAI,gBACI,IAAI,MACR,iHACF,EAEM,IAAI,MACR,+JACF,EAIJ,KAAK,UAAYb,EAAO,UAAY,IAAM,OAAOA,EAAO,SAAS,EAAI,IAAMA,EAAO,KAClF,KAAK,mBAAqBA,EAAO,UAAY,IAAMA,EAAO,KAC1D,KAAK,IAAMN,EAAY,cAAcM,EAAO,GAAG,EAC/C,KAAK,GAAKgB,EAAKtB,EAAY,cAAcsB,CAAE,EAAI,IACjD,CAEQ,OAAOC,EAAqBC,EAAqB,CACvD,IAAMC,EAAS,IAAI,YAAYF,EAAQ,WAAaC,EAAQ,UAAU,EAChEE,EAAa,IAAI,SAASD,CAAM,EAEhCE,EAAc,IAAI,SAAS3B,EAAY,cAAcuB,CAAO,CAAC,EACnE,QAASK,EAAI,EAAGA,EAAID,EAAY,WAAYC,IAC1CF,EAAW,QAAQE,EAAGD,EAAY,QAAQC,CAAC,CAAC,EAG9C,IAAMC,EAAc,IAAI,SAAS7B,EAAY,cAAcwB,CAAO,CAAC,EACnE,QAASI,EAAI,EAAGA,EAAIC,EAAY,WAAYD,IAC1CF,EAAW,QAAQC,EAAY,WAAaC,EAAGC,EAAY,QAAQD,CAAC,CAAC,EAGvE,OAAOH,CACT,CAEA,MAAM,QAAQK,EAAsD,CAClEC,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,sBAAuB,EAAE,EAEzE,IAAMT,EAAK,MAAM,KAAK,MAAM,EACtBU,EAAY,MAAM,OAAO,OAAO,UAAU,MAAO,KAAK,IAAK,KAAK,mBAAoB,GAAO,CAAC,SAAS,CAAC,EACtGC,EAAa,MAAM,OAAO,OAAO,QAAQ,CAAE,KAAM,KAAK,mBAAoB,GAAAX,CAAG,EAAGU,EAAWF,CAAS,EAE1G,OAAO,KAAK,OAAOR,EAAIW,CAAU,CACnC,CAEA,MAAM,QAAQA,EAAuD,CACnEF,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,sBAAuB,EAAE,EAEzE,IAAMG,EAAwBlC,EAAY,cAAciC,CAAU,EAC5DX,EAAKY,EAAsB,MAAM,EAAG9B,CAAmB,EACvD+B,EAAiBD,EAAsB,MAAM9B,CAAmB,EAEhE4B,EAAY,MAAM,OAAO,OAAO,UAAU,MAAO,KAAK,IAAK,KAAK,mBAAoB,GAAO,CAAC,SAAS,CAAC,EAC5G,OAAO,OAAO,OAAO,QAAQ,CAAE,KAAM,KAAK,mBAAoB,GAAAV,CAAG,EAAGU,EAAWG,CAAc,CAC/F,CAEA,MAAM,OAA8B,CAClC,GAAI,KAAK,GAAI,CACX,IAAIb,EAAK,KAAK,GACd,YAAK,GAAK,KACHA,CACT,CAEA,IAAMc,EAAc,MAAMrC,EAAO,qBAAqBK,CAAmB,EACzE,OAAOJ,EAAY,cAAcoC,CAAW,CAC9C,CACF,CAEA,OAAOrB,CACT,ECtPA,IAAKsB,QACHA,IAAA,SAAW,GAAX,WACAA,IAAA,SAAW,GAAX,WACAA,IAAA,cAAgB,GAAhB,gBACAA,IAAA,gBAAkB,GAAlB,kBAJGA,QAAA,IAOEC,EAAQD,GCOf,SAASE,IAAmC,CAC1C,OAAO,IAAIC,EACT,mGACA,IACA,GACF,CACF,CApBA,IAAAC,GAsBMC,IAAOD,GAAA,KAAM,CASjB,YAAYE,EAAqB,CAHjC,sBAA4D,KAiJ5D,uBAA6C,OAE7C,yBAAsB,GACtB,yBAAsB,GAhLxB,IAAAF,EAgCI,KAAK,OAASE,GAAA,KAAAA,EAAU,KACxB,IAAMC,GAAuBD,GAAA,YAAAA,EAAQ,QAAQ,uBAAwBE,EAAS,qBACxEC,GAA0BL,EAAAE,GAAA,YAAAA,EAAQ,QAAQ,0BAAhB,KAAAF,EAA2C,KACrEM,EAA2B,EAACJ,GAAA,MAAAA,EAAQ,QAAQ,sBAE5CK,EAAyBC,IAAA,GAC1BP,GAAK,+BACLC,GAAA,YAAAA,EAAQ,uCAEPO,EAA2BF,EAAuB,WAClDG,EAA6BH,EAAuB,aACpDI,EAAoB,CAAC,EAAEF,GAA4BC,GAEzD,GAAI,CAACC,EACH,MAAMb,GAAiC,EAGrCc,EAAS,OAAO,cAAgBH,GAClC,KAAK,oBAAsB,GAC3B,KAAK,QAAU,eACbI,EACAC,EACAC,EACAC,EACAC,EACA,CACA,OAAO,IAAI,QAASC,GAAY,CA1DxC,IAAAlB,EA2DU,IAAMmB,EAAMV,EAAyB,cACnCK,EACAC,EACAC,EACAC,EACAG,EAAU,UACTpB,EAAAE,GAAUA,EAAO,QAAQ,WAAzB,KAAAF,EAAsC,KACvC,KAAK,OACLa,CACF,EACAM,EAAI,KACF,WACA,CACEE,EACAJ,EACAF,EACAO,GACAC,IACGL,EAAQ,CAAE,MAAAG,EAAO,KAAAJ,EAAM,QAAAF,EAAS,SAAAO,GAAU,WAAAC,CAAW,CAAC,CAC7D,EACAJ,EAAI,KAAK,CACX,CAAC,CACH,EACIjB,GAAA,MAAAA,EAAQ,QAAQ,yBAClB,KAAK,kBAAoB,gBAAkB,CACzC,MAAO,EACT,EAEA,KAAK,kBAAoB,gBAAkB,CAvFnD,IAAAF,EAwFUwB,EAAO,UACL,KAAK,OACLA,EAAO,UACP,uCACA,YAAcrB,CAChB,EAEA,IAAMsB,EAAgB,MAAM,KAAK,MAC/BC,EAAY,IACZvB,EACA,KACA,KACAE,CACF,EAEIsB,EAAS,GACb,OAAKrB,EAGHqB,EAAS,CAACF,EAAc,SAAUzB,EAAAyB,EAAc,OAAd,YAAAzB,EAA+B,QAAQ,KAAM,MAAO,MAFtF2B,EAAS,CAACF,EAAc,OAASG,GAAcH,EAAc,UAAoB,EAKnFD,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,uCAAwC,WAAaG,CAAM,EACpGA,CACT,GAEOf,EAAS,OAAO,gBAAkBF,GAC3C,KAAK,oBAAsB,GAC3B,KAAK,QAAU,MAAOG,EAAQC,EAAKC,EAASC,EAAQC,IAC3CP,EAA2BG,EAAQX,GAAA,KAAAA,EAAU,KAAMY,EAAKC,EAASC,EAAQC,CAAI,EAGlFf,GAAA,MAAAA,EAAQ,QAAQ,yBAClB,KAAK,kBAAoB,gBAAkB,CACzC,MAAO,EACT,EAEA,KAAK,kBAAoB,gBAAkB,CA7HnD,IAAAF,EA8HUwB,EAAO,UACL,KAAK,OACLA,EAAO,UACP,kCACA,YAAcrB,CAChB,EACA,IAAMsB,EAAgB,MAAM,KAAK,MAAMC,EAAY,IAAKvB,EAAsB,KAAM,KAAM,IAAI,EACxFwB,EAAS,CAACF,EAAc,SAAUzB,EAAAyB,EAAc,OAAd,YAAAzB,EAA+B,QAAQ,KAAM,MAAO,MAC5F,OAAAwB,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,kCAAmC,WAAaG,CAAM,EAC/FA,CACT,GAGF,KAAK,QAAU,UAIN,CAAE,MAHKhB,EACV,IAAIkB,EAAiB,yCAA0C,KAAM,GAAG,EACxE/B,GAAiC,CACtB,EAGrB,CAEA,IAAI,QAAiB,CApJvB,IAAAE,EAAA8B,EAqJI,OAAOA,GAAA9B,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,KAAA8B,EAAuBN,EAAO,aACvC,CAEA,MAAM,MACJX,EACAC,EACAC,EACAE,EACAD,EACwB,CACxB,OAAK,KAAK,QAGH,KAAK,QAAQH,EAAQC,EAAKC,EAASC,EAAQC,CAAI,EAF7C,CAAE,MAAO,IAAIY,EAAiB,qCAAsC,KAAM,GAAG,CAAE,CAG1F,CAeA,eAAeE,EAA+B,CAC5C,IAAMR,EAAaQ,EAAU,WAI7B,OACGR,IAAe,KAAO,CAACQ,EAAU,MACjCR,IAAe,KAAO,CAACQ,EAAU,MACjCR,GAAc,KAAOA,GAAc,GAExC,CACF,EAvKavB,GACJ,QAAU,CAAC0B,EAAY,IAAKA,EAAY,OAAQA,EAAY,KAAMA,EAAY,IAAKA,EAAY,KAAK,EADhG1B,GAEJ,mBAAqB,CAAC0B,EAAY,IAAKA,EAAY,MAAM,EAFrD1B,GAGJ,gBAAkB,CAAC0B,EAAY,KAAMA,EAAY,IAAKA,EAAY,KAAK,EAHnE1B,IAyKNgC,GAAQ/B,GC7Lf,IAAMgC,GAAO,sBAETC,GAAe,OAAO,QAAW,YAAc,OAAS,OAAO,QAAW,YAAc,OAAS,KAE/FC,GAAN,KAAwC,CAItC,aAAc,CAMZ,GAAI,CACFD,GAAa,eAAe,QAAQD,GAAMA,EAAI,EAC9CC,GAAa,eAAe,WAAWD,EAAI,EAC3C,KAAK,iBAAmB,EAC1B,OAASG,EAAG,CACV,KAAK,iBAAmB,EAC1B,CAEA,GAAI,CACFF,GAAa,aAAa,QAAQD,GAAMA,EAAI,EAC5CC,GAAa,aAAa,WAAWD,EAAI,EACzC,KAAK,eAAiB,EACxB,OAASG,EAAG,CACV,KAAK,eAAiB,EACxB,CACF,CAEA,IAAIC,EAAmB,CACrB,OAAO,KAAK,KAAKA,EAAM,EAAK,CAC9B,CAEA,WAAWA,EAAmB,CAC5B,OAAO,KAAK,KAAKA,EAAM,EAAI,CAC7B,CAEA,OAAOA,EAAoB,CACzB,OAAO,KAAK,QAAQA,EAAM,EAAK,CACjC,CAEA,cAAcA,EAAoB,CAChC,OAAO,KAAK,QAAQA,EAAM,EAAI,CAChC,CAEA,IAAIA,EAAcC,EAAeC,EAAoB,CACnD,OAAO,KAAK,KAAKF,EAAMC,EAAOC,EAAK,EAAK,CAC1C,CAEA,WAAWF,EAAcC,EAAeC,EAAoB,CAC1D,OAAO,KAAK,KAAKF,EAAMC,EAAOC,EAAK,EAAI,CACzC,CAEQ,KAAKF,EAAcC,EAAeC,EAAyBC,EAAc,CAC/E,IAAMC,EAAoC,CAAE,MAAOH,CAAM,EACzD,OAAIC,IACFE,EAAa,QAAU,KAAK,IAAI,EAAIF,GAE/B,KAAK,iBAAiBC,CAAO,EAAE,QAAQH,EAAM,KAAK,UAAUI,CAAY,CAAC,CAClF,CAEQ,KAAKJ,EAAcG,EAAmB,CAC5C,GAAIA,GAAW,CAAC,KAAK,iBAAkB,MAAM,IAAI,MAAM,+BAA+B,EACtF,GAAI,CAACA,GAAW,CAAC,KAAK,eAAgB,MAAM,IAAI,MAAM,6BAA6B,EACnF,IAAME,EAAU,KAAK,iBAAiBF,CAAO,EAAE,QAAQH,CAAI,EAC3D,GAAI,CAACK,EAAS,OAAO,KACrB,IAAMD,EAAe,KAAK,MAAMC,CAAO,EACvC,OAAID,EAAa,SAAWA,EAAa,QAAU,KAAK,IAAI,GAC1D,KAAK,iBAAiBD,CAAO,EAAE,WAAWH,CAAI,EACvC,MAEFI,EAAa,KACtB,CAEQ,QAAQJ,EAAcG,EAAmB,CAC/C,OAAO,KAAK,iBAAiBA,CAAO,EAAE,WAAWH,CAAI,CACvD,CAEQ,iBAAiBG,EAAmB,CAC1C,OAAOA,EAAUN,GAAa,eAAiBA,GAAa,YAC9D,CACF,EAEOS,GAAQ,IAAIR,GCjFnB,IAAMS,EAAqBC,GAAgB,EAGrCC,GAAsB,OAAO,aAAgB,SAK/C,OAAO,QAAW,aAAe,OAAO,mBAAsB,aAAe,CAACA,IAChF,QAAQ,IACN,8GACF,EAGF,SAASC,IAAa,CAIpB,IAAMC,EAAMJ,EAAa,SACzB,MAAO,CAACA,EAAa,WAAa,CAACI,GAAO,CAACA,EAAI,QAAUA,EAAI,OAAO,QAAQ,MAAM,EAAI,EACxF,CAGO,SAASC,IAA8B,CAE5C,OAAI,OAAO,mBAAsB,aAAe,gBAAgB,iBAKlE,CAEA,IAAMC,GAAYN,EAAa,WAAaA,EAAa,UAAU,UAAU,SAAS,EAChFO,GAAaP,EAAa,UAAYA,EAAa,SAAS,KAE5DQ,GAA0B,CAC9B,MAAO,UACP,cAAe,GACf,UAAWF,GACX,WAAYC,GACZ,WAAY,cACZ,UAAWP,EAAa,UACxB,eAAgB,CAAC,CAACA,EAAa,MAC/B,aAAcA,EAAa,gBAAkB,oBAAqB,IAAI,eACtE,WAAYG,GAAW,EACvB,sBAAuB,GACvB,eAAgB,CAAC,CAACH,EAAa,YAK/B,aAAc,GACd,YAAaA,EAAa,YAC1B,KAAMA,EAAa,KACnB,SACE,OAAOA,EAAa,cAAiB,YACjCA,EAAa,aAAa,KAAKA,CAAY,EAC3C,SAAUS,EAAe,CACvB,WAAWA,EAAG,CAAC,CACjB,EACN,iBAAkBT,EAAa,iBAC/B,QAAS,KAAK,UACd,eAAgB,SAAUU,EAAa,CAKrC,OAAQV,EAAa,aAAe,IAAIA,EAAa,YAAY,EAAE,OAAOU,CAAG,EAAE,QAAWA,EAAI,MAChG,EACA,YAAaV,EAAa,YAC1B,YAAaA,EAAa,YAC1B,qBAAsB,eAAgBW,EAA0C,CAC9E,IAAMC,EAAY,IAAI,WAAWD,CAAU,EAC3C,OAAAX,EAAa,OAAO,gBAAgBY,CAAS,EACtCA,EAAU,MACnB,EACA,YAAaP,GAAmB,EAChC,KAAM,CACJ,mBACA,qBACA,QAASQ,EACX,CACF,EAEOC,GAAQN,GCvEf,SAASO,GAAoBC,EAAgB,CAC3C,IAAMC,EAA2B,CAAC,MAAO,MAAO,KAAK,EACrD,OAAID,EAAI,KACFE,EAAK,WAAWF,CAAG,EAAU,GAC7BC,EAAyB,SAASD,EAAI,IAAI,EAAU,GACjDA,EAAI,MAAQ,KAASA,EAAI,KAAO,IAGhC,EAEX,CAEA,SAASG,GAA4BH,EAAgB,CAGnD,OAAID,GAAoBC,CAAG,EAClB,CAACI,EAA0B,CAAE,OAAQC,EAAQ,MAAO,MAAOL,CAAI,CAAC,CAAC,EAEjE,CAACI,EAA0B,CAAE,OAAQC,EAAQ,aAAc,MAAOL,CAAI,CAAC,CAAC,CAEnF,CAKA,IAAeM,GAAf,cAAsCC,EAAU,CAa9C,YAAYC,EAAsCC,EAAYC,EAAyB,CACrF,MAAMF,EAAmBC,EAAMC,EAAoE,EAAI,EA+UzG,mBAAiBC,GAAyC,CACxD,KAAK,WAAa,CAAE,aAAcA,EAAa,KAAM,CACvD,EAhVE,KAAK,OAAS,WAAYD,EAASA,EAAO,OAAS,GACnD,KAAK,YAAc,KACnB,KAAK,YAAc,KACnB,KAAK,gBAAkB,KACvB,KAAK,aAAe,IACtB,CAUA,SAAgB,CACdE,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,2BAA4B,UAAU,EACtFL,GAAU,UAAU,QAAQ,KAAK,IAAI,EACrC,IAAMG,EAAS,KAAK,OACdG,EAAUH,EAAO,QACjBI,EAAOJ,EAAO,MAAQG,EAAQ,cAC9BE,EAAOC,EAAS,QAAQH,CAAO,EAC/BI,EAAcJ,EAAQ,IAAM,WAAa,UAE/C,KAAK,QAAUI,EAAcH,EAAO,IAAMC,EAAO,UACjD,IAAMG,EAAa,KAAK,QAAU,UAClCN,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,2BAA4B,QAAUM,CAAU,EAC1FC,EAAmB,KAAK,KAAK,cAAc,EAAG,CAACnB,EAAmBoB,IAAqC,CAC3G,GAAIpB,EAAK,CACP,KAAK,WAAWA,CAAG,EACnB,MACF,CACA,GAAI,KAAK,WACP,OAEF,KAAK,WAAaoB,EAClB,IAAMC,EAAgB,KAAK,OAAO,iBAAiBD,CAAW,EAC1D,WAAYC,IAAe,KAAK,OAASA,EAAc,QAC3DT,EAAO,UACL,KAAK,OACLA,EAAO,UACP,2BACA,iBAAyBU,GAAcD,CAAa,CACtD,EAGA,IAAIE,EAAe,GACbC,EAAkB,KAAK,YAAc,KAAK,cAC9CN,EACA,KACAG,EACA,KACA,KAAK,OAASI,EAAU,gBAAkBA,EAAU,QACtD,EAEAD,EAAe,GAAG,OAASE,GAAc,CAClC,KAAK,cAILH,IACHA,EAAe,GACf,KAAK,KAAK,YAAY,GAExB,KAAK,OAAOG,CAAI,EAClB,CAAC,EACDF,EAAe,GAAG,WAAaxB,GAAmB,CAahD,GAZK,KAAK,cAERA,EAAMA,GAAO,IAAI2B,EAAU,oBAAqB,MAAO,GAAG,GAE5D,KAAK,YAAc,KAGf,CAACJ,GAAgB,CAACvB,IACpBuB,EAAe,GACf,KAAK,KAAK,YAAY,GAExB,KAAK,WAAW,EACZvB,EAAK,CACHA,EAAI,KAIN,KAAK,OAAOG,GAA4BH,CAAG,CAAC,EAI5C,KAAK,WAAWA,CAAG,EAErB,MACF,CACA4B,EAAS,OAAO,SAAS,IAAM,CAC7B,KAAK,KAAK,CACZ,CAAC,CACH,CAAC,EACDJ,EAAe,KAAK,CACtB,CAAC,CACH,CAEA,cAAqB,CACnBZ,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,+BAA+B,EAC/E,KAAK,0BAA0B,EAAI,CACrC,CAEA,mBAA0B,CACxBA,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,oCAAoC,EACpF,KAAK,0BAA0B,EAAK,CACtC,CAEA,0BAA0BiB,EAAwB,CAChD,IAAMC,EAAuBD,EAAU,KAAK,SAAW,KAAK,cAC5D,GAAIC,EAAsB,CACxB,IAAMC,EAAU,KAAK,cAAcD,EAAsB,KAAM,KAAK,WAAY,KAAML,EAAU,QAAQ,EAExGM,EAAQ,GAAG,WAAa/B,GAAmB,CACrCA,IACFY,EAAO,UACL,KAAK,OACLA,EAAO,UACP,0BAA4BiB,EAAU,UAAY,gBAClD,0BAAkCG,EAAahC,CAAG,CACpD,EACA,KAAK,OAAO,eAAgBA,CAAG,EAEnC,CAAC,EACD+B,EAAQ,KAAK,CACf,CACF,CAEA,SAAgB,CACdnB,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,2BAA4B,EAAE,EACzE,KAAK,aACR,KAAK,WAAa,GACd,KAAK,cACPA,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,2BAA4B,uBAAuB,EACnG,KAAK,YAAY,MAAM,EACvB,KAAK,YAAc,MAIrB,KAAK,OAAO,eAAgBqB,GAAiB,aAAa,CAAC,EAC3DL,EAAS,OAAO,SAAS,IAAM,CAC7B,KAAK,KAAK,UAAU,CACtB,CAAC,EAEL,CAEA,UAAUM,EAAgC,CA/M5C,IAAAC,EAiNI,GAAI,KAAK,WACP,OAKF,IAAMC,GAAgBD,EAAAD,EAAQ,oBAAR,YAAAC,EAA2B,cACjD5B,GAAU,UAAU,UAAU,KAAK,KAAM2B,CAAO,EAEhD,IAAMG,EAAqB,KAAK,QAAqBD,EACrDxB,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,6BAA8B,aAAeyB,CAAiB,EAC9G,KAAK,QAAUA,EAAoB,QACnC,KAAK,QAAUA,EAAoB,QACnC,KAAK,SAAWA,EAAoB,SACpC,KAAK,cAAgBA,EAAoB,aAC3C,CAEA,KAAKH,EAAgC,CACnC,GAAI,KAAK,YAAa,CAEpB,KAAK,aAAe,KAAK,cAAgB,CAAC,EAC1C,KAAK,aAAa,KAAKA,CAAO,EAC9B,MACF,CAEA,IAAMI,EAAe,KAAK,cAAgB,CAAC,EAC3CA,EAAa,KAAKJ,CAAO,EACzB,KAAK,aAAe,KAEpB,KAAK,UAAUI,CAAY,CAC7B,CAEA,gBAAuB,CACrB,IAAMA,EAAe,KAAK,aAErBA,IAIL,KAAK,aAAe,KACpB,KAAK,UAAUA,CAAY,EAC7B,CAEA,UAAUC,EAAqC,CAC7C,IAAMC,EAAe,KAAK,YAAc,KAAK,cAC3C,KAAK,QACL,KACA,KAAK,WACL,KAAK,cAAcD,CAAK,EACxBd,EAAU,QACZ,EAEAe,EAAY,GAAG,WAAY,CAACxC,EAAgB0B,IAAiB,CAa3D,GAZI1B,GACFY,EAAO,UACL,KAAK,OACLA,EAAO,UACP,6BACA,sBAA8BoB,EAAahC,CAAG,CAChD,EACF,KAAK,YAAc,KAKfA,EAAK,CACHA,EAAI,KAIN,KAAK,OAAOG,GAA4BH,CAAG,CAAC,EAI5C,KAAK,WAAWA,CAAG,EAErB,MACF,CAEI0B,GACF,KAAK,OAAOA,CAAI,EAGd,KAAK,cACPE,EAAS,OAAO,SAAS,IAAM,CAIxB,KAAK,aACR,KAAK,eAAe,CAExB,CAAC,CAEL,CAAC,EACDY,EAAY,KAAK,CACnB,CAEA,MAAa,CAKX,GAHI,KAAK,aAGL,CAAC,KAAK,YAAa,OAEvB,IAAMC,EAAe,KAAK,YAAc,KAAK,cAC3C,KAAK,QACL,KACA,KAAK,WACL,KACA,KAAK,OAAShB,EAAU,gBAAkBA,EAAU,aACtD,EAEAgB,EAAY,GAAG,OAASf,GAAiB,CACvC,KAAK,OAAOA,CAAI,CAClB,CAAC,EACDe,EAAY,GAAG,WAAazC,GAAmB,CAK7C,GAJA,KAAK,YAAc,KAGnB,KAAK,WAAW,EACZA,EAAK,CACHA,EAAI,KAIN,KAAK,OAAOG,GAA4BH,CAAG,CAAC,EAI5C,KAAK,WAAWA,CAAG,EAErB,MACF,CACA4B,EAAS,OAAO,SAAS,IAAM,CAC7B,KAAK,KAAK,CACZ,CAAC,CACH,CAAC,EACDa,EAAY,KAAK,CACnB,CAEA,OAAOC,EAAkD,CACvD,GAAI,CACF,IAAMH,EAAQ,KAAK,eAAeG,CAAY,EAC9C,GAAIH,GAASA,EAAM,OACjB,QAASI,EAAI,EAAGA,EAAIJ,EAAM,OAAQI,IAChC,KAAK,kBACHC,GACEL,EAAMI,CAAC,EACP,KAAK,kBAAkB,SAAS,kBAChC,KAAK,kBAAkB,SAAS,aAChC,KAAK,kBAAkB,SAAS,cAClC,CACF,CACN,OAASE,EAAG,CACVjC,EAAO,UACL,KAAK,OACLA,EAAO,UACP,0BACA,+CAAkDiC,EAAY,KAChE,CACF,CACF,CAEA,cAAcC,EAA8C,CAC1D,OAAO,KAAK,UAAUA,CAAY,CACpC,CAEA,eAAeJ,EAAiE,CAC9E,OAAI,OAAOA,GAAgB,SAAiB,KAAK,MAAMA,CAAY,EAC5DA,CACT,CAiBF,EAEOK,GAAQzC,GCnYf,SAAS0C,GAAYC,EAAuBC,EAAwE,CAClH,OAAaC,GAAqBC,GAAUF,CAAO,CAAC,EAAE,SAAS,kBAAkB,CACnF,CAEA,SAASG,GAAaJ,EAAuBC,EAAiC,CAC5E,GAAIF,GAAYC,EAAcC,CAAO,EACnC,OAAOD,EAAa,OAASK,EAAU,WAAWL,EAAa,KAAK,CAExE,CAEA,IAAMM,GAAO,UAAY,CAAC,EACtBC,GAAY,EACVC,GAA8C,CAAC,EAErD,SAASC,GAAUC,EAAqBC,EAAgB,CACtD,OAAOD,EAAI,mBAAqBA,EAAI,kBAAkBC,CAAM,CAC9D,CAOA,SAASC,GAAkBF,EAAqB,CAC9C,OACEA,EAAI,oBAAsBA,EAAI,kBAAkB,mBAAmB,GAAK,CAACA,EAAI,kBAAkB,gBAAgB,EAEnH,CAEA,SAASG,GAAmBH,EAAqB,CAC/C,IAAMI,EAAcJ,EAAI,sBAAsB,EAAE,KAAK,EAAE,MAAM;AAAA,CAAM,EAC7DT,EAAkC,CAAC,EACzC,QAASc,EAAI,EAAGA,EAAID,EAAY,OAAQC,IAAK,CAC3C,IAAMC,EAAQF,EAAYC,CAAC,EAAE,MAAM,GAAG,EAAE,IAAKE,GAAMA,EAAE,KAAK,CAAC,EAC3DhB,EAAQe,EAAM,CAAC,EAAE,YAAY,CAAC,EAAIA,EAAM,CAAC,CAC3C,CACA,OAAOf,CACT,CAEA,IAAMiB,GAAN,MAAMC,UAAmBC,CAAoC,CAc3D,YACEC,EACApB,EACAqB,EACAC,EACAC,EACAC,EACAC,EACAC,EACA,CACA,MAAMD,CAAM,EACZJ,EAASA,GAAU,CAAC,EACpBA,EAAO,IAAYM,GAAa,EAChC,KAAK,IAAMP,EAAYQ,GAAcP,CAAM,EAC3C,KAAK,QAAUrB,GAAW,CAAC,EAC3B,KAAK,KAAOsB,EACZ,KAAK,OAASI,EAASA,EAAO,YAAY,EAAUG,EAAMP,CAAI,EAAI,MAAQ,OAC1E,KAAK,YAAcC,EACnB,KAAK,SAAWC,EAChB,KAAK,SAAW,GAChB,KAAK,gBAAkB,GACvB,KAAK,GAAK,OAAO,EAAElB,EAAS,EAC5BC,GAAgB,KAAK,EAAE,EAAI,IAC7B,CAEA,OAAO,cACLa,EACApB,EACAqB,EACAC,EACAC,EACAC,EACAC,EACAC,EACY,CAIZ,IAAMI,EAAYN,GAAYO,EAAS,SACvC,OAAO,IAAIb,EACTE,EACApB,EACMgC,GAAKX,CAAM,EACjBC,EACAC,EACAO,EACAL,EACAC,CACF,CACF,CAEA,SACEO,EACAX,EACAtB,EACAkC,EACAC,EACM,CACD,KAAK,kBACR,KAAK,gBAAkB,GACnB,CAACF,GAAOX,GACV,KAAK,KAAK,OAAQA,CAAI,EAExB,KAAK,KAAK,WAAYW,EAAKX,EAAMtB,EAASkC,EAAUC,CAAU,EAC9D,KAAK,QAAQ,EAEjB,CAEA,OAAc,CACZ,KAAK,QAAQ,CACf,CAEA,MAAa,CACX,IAAInC,EAAU,KAAK,QACboC,EACF,KAAK,aAAeC,EAAU,SAAW,KAAK,SAAS,mBAAqB,KAAK,SAAS,YAC5FC,EAAS,KAAK,MAAQ,WAAW,IAAM,CACrC,KAAK,SAAW,GAChB7B,EAAI,MAAM,CACZ,EAAG2B,CAAO,EACVV,EAAS,KAAK,OACdjB,EAAO,KAAK,IAAM,IAAI,eACtB8B,EAASvC,EAAQ,OACfsB,EAAO,KAAK,KACZkB,EAA2C,OAE1CD,EAGMA,EAAO,QAAQ,uBAAuB,IAAM,IAErDC,EAAe,eAHfxC,EAAQ,OAAY,mBAMlBsB,IACkBtB,EAAQ,cAAc,IAAMA,EAAQ,cAAc,EAAI,qBAC1D,QAAQ,kBAAkB,EAAI,IAAM,OAAOsB,GAAQ,WAAUA,EAAO,KAAK,UAAUA,CAAI,GAKzGb,EAAI,KAAKiB,EAAQ,KAAK,IAAK,EAAI,EAC/BjB,EAAI,aAAe+B,EAEf,kBAAmBxC,IACrBS,EAAI,gBAAkB,IAGxB,QAAWgC,KAAKzC,EAASS,EAAI,iBAAiBgC,EAAGzC,EAAQyC,CAAC,CAAC,EAE3D,IAAMC,EAAe,CACnBC,EACAC,EACAC,EACAV,KACG,CAnLT,IAAAW,GAoLM,IAAIC,GAAeH,EAAU,iBAAmBD,EAAW,KAAO,KAC9DG,GAAA,uBAAM,MAAN,MAAAA,GAAW,aAAYC,IAAgB,2BAA6B,KAAK,IAAI,YACjFC,EAAO,UAAU,KAAK,OAAQA,EAAO,UAAW,aAAeL,EAAW,KAAO,KAAMI,EAAY,EACnG,KAAK,SAAS,IAAIE,EAAiBF,GAAcF,EAAMV,EAAU,CAAC,CACpE,EACA1B,EAAI,QAAWkC,GAAe,CAC5BD,EAAaC,EAAY,qBAAsB,KAAM,GAAG,CAC1D,EACAlC,EAAI,QAAWkC,GAAe,CACxB,KAAK,SACPD,EAAaC,EAAY,kDAAmD,KAAM,GAAG,EAErFD,EAAaC,EAAY,oBAAqB,KAAM,GAAG,CAE3D,EACAlC,EAAI,UAAakC,GAAe,CAC9BD,EAAaC,EAAY,oBAAqB,KAAM,GAAG,CACzD,EAEA,IAAIO,EACAf,EACAgB,EACAC,EAAY,EACZlB,EAAW,GAETmB,EAAa,IAAM,CAGvB,GAFA,aAAaf,CAAK,EAClBa,EAAkBhB,EAAa,IAC3BA,GAAc,IAAK,CACrB,KAAK,SAAS,KAAM,KAAM,KAAM,KAAMA,CAAU,EAChD,MACF,CACAe,EAAY,KAAK,aAAeb,EAAU,iBAAmBc,GAAmBxC,GAAkBF,CAAG,CACvG,EAEM6C,EAAQ,IAAM,CAClB,IAAIC,EACJ,GAAI,CACF,IAAMC,EAAchD,GAAUC,EAAK,cAAc,EAMjD,GAFa+C,EAAcA,EAAY,QAAQ,kBAAkB,GAAK,EAAI/C,EAAI,cAAgB,OAEpF,CAIR,IAAMgD,GACJhD,EAAI,eAAiB,cACjBiD,EAAS,YAAY,WAAWjD,EAAI,QAAQ,EAC5C,OAAOA,EAAI,YAAY,EACzBgD,GAAiB,OACnBF,EAAiB,KAAK,MAAME,EAAgB,EAE5CF,EAAiBE,GAEnBvB,EAAW,EACb,MACEqB,EAAiB9C,EAAI,SAGnB8C,EAAe,WAAa,QAE9BpB,EAAaoB,EAAe,WAC5BJ,EAAkBhB,EAAa,IAC/BnC,EAAUuD,EAAe,QACzBA,EAAiBA,EAAe,UAEhCvD,EAAUY,GAAmBH,CAAG,CAEpC,OAASkD,EAAG,CACV,KAAK,SAAS,IAAIV,EAAiB,wCAA2CU,EAAY,QAAS,KAAM,GAAG,CAAC,EAC7G,MACF,CAMA,GAAIR,GAAmB,MAAM,QAAQI,CAAc,EAAG,CACpD,KAAK,SAAS,KAAMA,EAAgBvD,EAASkC,EAAUC,CAAU,EACjE,MACF,CAEA,IAAIF,EAAqC9B,GAAaoD,EAAgBvD,CAAO,EACxEiC,IACHA,EAAM,IAAIgB,EACR,wCACEd,EACA,cACAuB,EAAS,OAAO,QAAQH,CAAc,EACxC,KACApB,CACF,GAEF,KAAK,SAASF,EAAKsB,EAAgBvD,EAASkC,EAAUC,CAAU,CAClE,EAEA,SAASyB,GAAa,CACpB,IAAMC,EAAepD,EAAI,aACnBqD,EAAUD,EAAa,OAAS,EAClCE,EAAKC,GACT,KAAOZ,EAAYU,IAAYC,EAAMF,EAAa,QAAQ;AAAA,EAAMT,CAAS,GAAK,IAC5EY,GAAQH,EAAa,MAAMT,EAAWW,CAAG,EACzCX,EAAYW,EAAM,EAClBE,EAAQD,EAAK,CAEjB,CAEA,IAAMC,EAAWD,GAAkB,CACjC,GAAI,CACFA,EAAQ,KAAK,MAAMA,CAAK,CAC1B,OAASL,EAAG,CACV,KAAK,SAAS,IAAIV,EAAiB,wCAA2CU,EAAY,QAAS,KAAM,GAAG,CAAC,EAC7G,MACF,CACA,KAAK,KAAK,OAAQK,CAAK,CACzB,EAEME,GAAc,IAAM,CACxBN,EAAW,EACX,KAAK,eAAiB,GACtBF,EAAS,OAAO,SAAS,IAAM,CAC7B,KAAK,SAAS,CAChB,CAAC,CACH,EAEAjD,EAAI,mBAAqB,IAAM,CAC7B,IAAM0D,EAAa1D,EAAI,WACnB0D,EAAa,GACb1D,EAAI,SAAW,IACb0B,IAAe,SACjBA,EAAa1B,EAAI,OACjB4C,EAAW,GAETc,GAAc,GAAKjB,EACrBU,EAAW,EACFO,GAAc,IACnBjB,EAAWgB,GAAY,EACtBZ,EAAM,GAGjB,EACA7C,EAAI,KAAKa,CAAW,CACtB,CAEA,SAAgB,CACd,IAAMb,EAAM,KAAK,IACjB,GAAIA,EAAK,CACPA,EAAI,mBAAqBA,EAAI,QAAUA,EAAI,QAAUA,EAAI,UAAYJ,GACrE,KAAK,IAAM,KACX,IAAMiC,EAAQ,KAAK,MACfA,IACF,aAAaA,CAAuB,EACpC,KAAK,MAAQ,MAEV,KAAK,iBAAiB7B,EAAI,MAAM,CACvC,CACA,OAAOF,GAAgB,KAAK,EAAE,CAChC,CACF,EAEO6D,GAAQnD,GC/Uf,IAAIoD,GAAYC,EAAe,WACzBC,GAAN,cAAkCC,EAAe,CAE/C,YAAYC,EAAsCC,EAAYC,EAAyB,CACrF,MAAMF,EAAmBC,EAAMC,CAAM,EAFvC,eAAYN,GAGVM,EAAO,OAAS,GAChB,KAAK,UAAYN,EACnB,CAEA,OAAO,aAAc,CACnB,MAAO,CAAC,EAAEO,EAAS,OAAO,cAAgBA,EAAS,OAAO,WAC5D,CAEA,UAAW,CACT,MAAO,4BAA8B,KAAK,QAAU,iBAAmB,KAAK,WAC9E,CAEA,cACEC,EACAC,EACAH,EACAI,EACAC,EACA,CACA,OAAOC,GAAW,cAAcJ,EAAKC,EAASH,EAAQI,EAAMC,EAAa,KAAK,SAAU,KAAK,MAAM,CACrG,CACF,EAEOE,GAAQX,GC7Bf,IAAMY,GAAyB,CAAC,aAAa,EAEvCC,GAAqD,CACzD,MAAAD,GACA,uBAAwB,CACtB,WAAYE,GACZ,YAAaC,EACf,CACF,EAEOC,GAAQH,GCdf,IAAMI,GAAsB,CAC1B,qBAAsB,+DACtB,uBAAwB,gCAIxB,kBAAmB,CAACC,EAAe,WAAYA,EAAe,SAAS,CACzE,EAEOC,GAAQF,GCZf,SAASG,GAAQC,EAA4C,CAC3D,GAAIA,IAAW,OAAW,MAAO,YACjC,IAAIC,EACAC,EAQJ,GAPIF,aAAkB,aACpBE,EAAO,cACPD,EAAO,IAAI,SAASD,CAAM,GACjBA,aAAkB,WAC3BE,EAAO,WACPD,EAAOD,GAEL,CAACC,EAAM,OAAO,KAAK,UAAUD,CAAM,EACvC,IAAMG,EAAQ,CAAC,EACf,QAASC,EAAI,EAAGA,EAAIJ,EAAO,WAAYI,IAAK,CAC1C,GAAIA,EAAI,GAAI,CACVD,EAAM,KAAK,KAAK,EAChB,KACF,CACA,IAAIE,EAAQJ,EAAK,SAASG,CAAC,EAAE,SAAS,EAAE,EACpCC,EAAM,SAAW,IAAGA,EAAQ,IAAMA,GACtCF,EAAM,KAAKE,CAAK,CAClB,CACA,MAAO,IAAMH,EAAO,IAAMC,EAAM,KAAK,GAAG,EAAI,GAC9C,CAGA,SAASG,GAAUL,EAAgBM,EAAgBC,EAAgB,CACjE,QAASJ,EAAI,EAAGK,EAAID,EAAO,OAAQJ,EAAIK,EAAGL,IAAK,CAC7C,IAAMM,EAAYF,EAAO,WAAWJ,CAAC,EAGrC,GAAIM,EAAY,IAAM,CACpBT,EAAK,SAASM,IAAYG,IAAc,EAAK,IAAQ,CAAI,EACzD,QACF,CAGA,GAAIA,EAAY,KAAO,CACrBT,EAAK,SAASM,IAAYG,IAAc,EAAK,GAAQ,GAAI,EACzDT,EAAK,SAASM,IAAYG,IAAc,EAAK,GAAQ,GAAI,EACzD,QACF,CAGA,GAAIA,EAAY,MAAS,CACvBT,EAAK,SAASM,IAAYG,IAAc,GAAM,GAAQ,GAAI,EAC1DT,EAAK,SAASM,IAAYG,IAAc,EAAK,GAAQ,GAAI,EACzDT,EAAK,SAASM,IAAYG,IAAc,EAAK,GAAQ,GAAI,EACzD,QACF,CAGA,GAAIA,EAAY,QAAU,CACxBT,EAAK,SAASM,IAAYG,IAAc,GAAM,EAAQ,GAAI,EAC1DT,EAAK,SAASM,IAAYG,IAAc,GAAM,GAAQ,GAAI,EAC1DT,EAAK,SAASM,IAAYG,IAAc,EAAK,GAAQ,GAAI,EACzDT,EAAK,SAASM,IAAYG,IAAc,EAAK,GAAQ,GAAI,EACzD,QACF,CACA,MAAM,IAAI,MAAM,iBAAmBA,CAAS,CAC9C,CACF,CAEA,SAASC,GAASV,EAAgBM,EAAgBK,EAAgB,CAChE,IAAIJ,EAAS,GACb,QAASJ,EAAIG,EAAQM,EAAMN,EAASK,EAAQR,EAAIS,EAAKT,IAAK,CACxD,IAAMC,EAAQJ,EAAK,SAASG,CAAC,EAE7B,GAAK,EAAAC,EAAQ,KAAgB,CAC3BG,GAAU,OAAO,aAAaH,CAAK,EACnC,QACF,CAEA,IAAKA,EAAQ,OAAU,IAAM,CAC3BG,GAAU,OAAO,cAAeH,EAAQ,KAAS,EAAMJ,EAAK,SAAS,EAAEG,CAAC,EAAI,EAAK,EACjF,QACF,CAEA,IAAKC,EAAQ,OAAU,IAAM,CAC3BG,GAAU,OAAO,cACbH,EAAQ,KAAS,IAAQJ,EAAK,SAAS,EAAEG,CAAC,EAAI,KAAS,GAAOH,EAAK,SAAS,EAAEG,CAAC,EAAI,KAAS,CAChG,EACA,QACF,CAEA,IAAKC,EAAQ,OAAU,IAAM,CAC3BG,GAAU,OAAO,cACbH,EAAQ,IAAS,IACfJ,EAAK,SAAS,EAAEG,CAAC,EAAI,KAAS,IAC9BH,EAAK,SAAS,EAAEG,CAAC,EAAI,KAAS,GAC9BH,EAAK,SAAS,EAAEG,CAAC,EAAI,KAAS,CACpC,EACA,QACF,CACA,MAAM,IAAI,MAAM,gBAAkBC,EAAM,SAAS,EAAE,CAAC,CACtD,CACA,OAAOG,CACT,CAEA,SAASM,GAAcN,EAAgB,CACrC,IAAIO,EAAQ,EACZ,QAASX,EAAI,EAAGK,EAAID,EAAO,OAAQJ,EAAIK,EAAGL,IAAK,CAC7C,IAAMM,EAAYF,EAAO,WAAWJ,CAAC,EACrC,GAAIM,EAAY,IAAM,CACpBK,GAAS,EACT,QACF,CACA,GAAIL,EAAY,KAAO,CACrBK,GAAS,EACT,QACF,CACA,GAAIL,EAAY,MAAS,CACvBK,GAAS,EACT,QACF,CACA,GAAIL,EAAY,QAAU,CACxBK,GAAS,EACT,QACF,CACA,MAAM,IAAI,MAAM,iBAAmBL,CAAS,CAC9C,CACA,OAAOK,CACT,CAEA,SAASC,GAAOC,EAAgBC,EAAkB,CAChD,IAAMC,EAAOC,GAAOH,EAAOC,CAAM,EACjC,GAAIC,IAAS,EAAG,OAChB,IAAMnB,EAAS,IAAI,YAAYmB,CAAI,EAC7BlB,EAAO,IAAI,SAASD,CAAM,EAChC,OAAAqB,GAAQJ,EAAOhB,EAAM,EAAGiB,CAAM,EACvBlB,CACT,CAEA,IAAMsB,GAAW,MAAY,MAC3BC,GAAU,EAAID,GAChB,SAASE,GAASvB,EAAgBM,EAAgB,CAChD,OAAAA,EAASA,GAAU,EACZN,EAAK,SAASM,CAAM,EAAIe,GAAUrB,EAAK,UAAUM,EAAS,CAAC,CACpE,CAEA,SAASkB,GAAUxB,EAAgBM,EAAgB,CACjD,OAAAA,EAASA,GAAU,EACZN,EAAK,UAAUM,CAAM,EAAIe,GAAUrB,EAAK,UAAUM,EAAS,CAAC,CACrE,CAEA,SAASmB,GAASzB,EAAgBM,EAAgBoB,EAAa,CACzDA,EAAM,oBACR1B,EAAK,SAASM,EAAQ,KAAK,MAAMoB,EAAMJ,EAAO,CAAC,EAC/CtB,EAAK,SAASM,EAAS,EAAGoB,EAAM,EAAE,IAElC1B,EAAK,UAAUM,EAAQ,UAAU,EACjCN,EAAK,UAAUM,EAAS,EAAG,UAAU,EAEzC,CAEA,SAASqB,GAAU3B,EAAgBM,EAAgBoB,EAAa,CAC1DA,EAAM,qBACR1B,EAAK,UAAUM,EAAQ,KAAK,MAAMoB,EAAMJ,EAAO,CAAC,EAChDtB,EAAK,SAASM,EAAS,EAAGoB,EAAM,EAAE,IAElC1B,EAAK,UAAUM,EAAQ,UAAU,EACjCN,EAAK,UAAUM,EAAS,EAAG,UAAU,EAEzC,CAcA,IAAMsB,GAAN,KAAc,CAIZ,YAAY5B,EAAgBM,EAAiB,CAK7C,SAAOK,GAAmB,CACxB,IAAMK,EAAwC,CAAC,EAC/C,QAASb,EAAI,EAAGA,EAAIQ,EAAQR,IAAK,CAC/B,IAAM0B,EAAM,KAAK,MAAM,EACvBb,EAAMa,CAAa,EAAI,KAAK,MAAM,CACpC,CACA,OAAOb,CACT,EAEA,SAAOL,GAAmB,CACxB,IAAMK,EAAQ,IAAI,YAAYL,CAAM,EACpC,WAAI,WAAWK,CAAK,EAAE,IAAI,IAAI,WAAW,KAAK,KAAK,OAAQ,KAAK,OAAQL,CAAM,EAAG,CAAC,EAClF,KAAK,QAAUA,EACRK,CACT,EAEA,SAAM,KAAK,IAEX,SAAOL,GAAmB,CACxB,IAAMK,EAAQN,GAAS,KAAK,KAAM,KAAK,OAAQC,CAAM,EACrD,YAAK,QAAUA,EACRK,CACT,EAEA,WAASL,GAAmB,CAC1B,IAAMK,EAAQ,IAAI,MAAML,CAAM,EAC9B,QAASR,EAAI,EAAGA,EAAIQ,EAAQR,IAC1Ba,EAAMb,CAAC,EAAI,KAAK,MAAM,EAExB,OAAOa,CACT,EAEA,SAAOL,IACL,KAAK,QAAUA,EACR,CACL,KAAM,KAAK,KAAK,QAAQ,KAAK,MAAM,EACnC,KAAM,KAAK,IAAIA,CAAM,CACvB,GAGF,WAAQ,IAAe,CACrB,IAAMV,EAAO,KAAK,KAAK,SAAS,KAAK,MAAM,EACvCe,EAAOL,EAGX,GAAK,EAAAV,EAAO,KACV,YAAK,SACEA,EAIT,IAAKA,EAAO,OAAU,IACpB,OAAAU,EAASV,EAAO,GAChB,KAAK,SACE,KAAK,IAAIU,CAAM,EAIxB,IAAKV,EAAO,OAAU,IACpB,OAAAU,EAASV,EAAO,GAChB,KAAK,SACE,KAAK,MAAMU,CAAM,EAI1B,IAAKV,EAAO,OAAU,IACpB,OAAAU,EAASV,EAAO,GAChB,KAAK,SACE,KAAK,IAAIU,CAAM,EAIxB,IAAKV,EAAO,OAAU,IACpB,OAAAe,EAAQ,KAAK,KAAK,QAAQ,KAAK,MAAM,EACrC,KAAK,SACEA,EAGT,OAAQf,EAAM,CAEZ,IAAK,KACH,YAAK,SACE,KAGT,IAAK,KACH,KAAK,SACL,OAGF,IAAK,KACH,YAAK,SACE,GAGT,IAAK,KACH,YAAK,SACE,GAGT,IAAK,KACH,OAAAU,EAAS,KAAK,KAAK,SAAS,KAAK,OAAS,CAAC,EAC3C,KAAK,QAAU,EACR,KAAK,IAAIA,CAAM,EAGxB,IAAK,KACH,OAAAA,EAAS,KAAK,KAAK,UAAU,KAAK,OAAS,CAAC,EAC5C,KAAK,QAAU,EACR,KAAK,IAAIA,CAAM,EAGxB,IAAK,KACH,OAAAA,EAAS,KAAK,KAAK,UAAU,KAAK,OAAS,CAAC,EAC5C,KAAK,QAAU,EACR,KAAK,IAAIA,CAAM,EAGxB,IAAK,KACH,OAAAA,EAAS,KAAK,KAAK,SAAS,KAAK,OAAS,CAAC,EAC3C,KAAK,QAAU,EACR,KAAK,IAAIA,CAAM,EAGxB,IAAK,KACH,OAAAA,EAAS,KAAK,KAAK,UAAU,KAAK,OAAS,CAAC,EAC5C,KAAK,QAAU,EACR,KAAK,IAAIA,CAAM,EAGxB,IAAK,KACH,OAAAA,EAAS,KAAK,KAAK,UAAU,KAAK,OAAS,CAAC,EAC5C,KAAK,QAAU,EACR,KAAK,IAAIA,CAAM,EAGxB,IAAK,KACH,OAAAK,EAAQ,KAAK,KAAK,WAAW,KAAK,OAAS,CAAC,EAC5C,KAAK,QAAU,EACRA,EAGT,IAAK,KACH,OAAAA,EAAQ,KAAK,KAAK,WAAW,KAAK,OAAS,CAAC,EAC5C,KAAK,QAAU,EACRA,EAGT,IAAK,KACH,OAAAA,EAAQ,KAAK,KAAK,SAAS,KAAK,OAAS,CAAC,EAC1C,KAAK,QAAU,EACRA,EAGT,IAAK,KACH,OAAAA,EAAQ,KAAK,KAAK,UAAU,KAAK,OAAS,CAAC,EAC3C,KAAK,QAAU,EACRA,EAGT,IAAK,KACH,OAAAA,EAAQ,KAAK,KAAK,UAAU,KAAK,OAAS,CAAC,EAC3C,KAAK,QAAU,EACRA,EAGT,IAAK,KACH,OAAAA,EAAQQ,GAAU,KAAK,KAAM,KAAK,OAAS,CAAC,EAC5C,KAAK,QAAU,EACRR,EAGT,IAAK,KACH,OAAAA,EAAQ,KAAK,KAAK,QAAQ,KAAK,OAAS,CAAC,EACzC,KAAK,QAAU,EACRA,EAGT,IAAK,KACH,OAAAA,EAAQ,KAAK,KAAK,SAAS,KAAK,OAAS,CAAC,EAC1C,KAAK,QAAU,EACRA,EAGT,IAAK,KACH,OAAAA,EAAQ,KAAK,KAAK,SAAS,KAAK,OAAS,CAAC,EAC1C,KAAK,QAAU,EACRA,EAGT,IAAK,KACH,OAAAA,EAAQO,GAAS,KAAK,KAAM,KAAK,OAAS,CAAC,EAC3C,KAAK,QAAU,EACRP,EAGT,IAAK,KACH,OAAAL,EAAS,EACT,KAAK,SACE,KAAK,IAAIA,CAAM,EAGxB,IAAK,KACH,OAAAA,EAAS,EACT,KAAK,SACE,KAAK,IAAIA,CAAM,EAGxB,IAAK,KACH,OAAAA,EAAS,EACT,KAAK,SACE,KAAK,IAAIA,CAAM,EAGxB,IAAK,KACH,OAAAA,EAAS,EACT,KAAK,SACE,KAAK,IAAIA,CAAM,EAGxB,IAAK,KACH,OAAAA,EAAS,GACT,KAAK,SACE,KAAK,IAAIA,CAAM,EAGxB,IAAK,KACH,OAAAA,EAAS,KAAK,KAAK,SAAS,KAAK,OAAS,CAAC,EAC3C,KAAK,QAAU,EACR,KAAK,IAAIA,CAAM,EAGxB,IAAK,KACH,OAAAA,EAAS,KAAK,KAAK,UAAU,KAAK,OAAS,CAAC,EAC5C,KAAK,QAAU,EACR,KAAK,IAAIA,CAAM,EAGxB,IAAK,KACH,OAAAA,EAAS,KAAK,KAAK,UAAU,KAAK,OAAS,CAAC,EAC5C,KAAK,QAAU,EACR,KAAK,IAAIA,CAAM,EAGxB,IAAK,KACH,OAAAA,EAAS,KAAK,KAAK,UAAU,KAAK,OAAS,CAAC,EAC5C,KAAK,QAAU,EACR,KAAK,MAAMA,CAAM,EAG1B,IAAK,KACH,OAAAA,EAAS,KAAK,KAAK,UAAU,KAAK,OAAS,CAAC,EAC5C,KAAK,QAAU,EACR,KAAK,MAAMA,CAAM,EAG1B,IAAK,KACH,OAAAA,EAAS,KAAK,KAAK,UAAU,KAAK,OAAS,CAAC,EAC5C,KAAK,QAAU,EACR,KAAK,IAAIA,CAAM,EAGxB,IAAK,KACH,OAAAA,EAAS,KAAK,KAAK,UAAU,KAAK,OAAS,CAAC,EAC5C,KAAK,QAAU,EACR,KAAK,IAAIA,CAAM,CAC1B,CACA,MAAM,IAAI,MAAM,kBAAoBV,EAAK,SAAS,EAAE,CAAC,CACvD,EAhRE,KAAK,OAASK,GAAU,EACxB,KAAK,KAAON,CACd,CA+QF,EAEA,SAAS8B,GAAO/B,EAAqB,CACnC,IAAMC,EAAO,IAAI,SAASD,CAAM,EAC1BgC,EAAU,IAAIH,GAAQ5B,CAAI,EAC1BgB,EAAQe,EAAQ,MAAM,EAC5B,GAAIA,EAAQ,SAAWhC,EAAO,WAAY,MAAM,IAAI,MAAMA,EAAO,WAAagC,EAAQ,OAAS,iBAAiB,EAChH,OAAOf,CACT,CAEA,SAASgB,GAAehB,EAAmCC,EAAkB,CAC3E,OAAO,OAAO,KAAKD,CAAK,EAAE,OAAO,SAAU,EAAG,CAC5C,IAAMU,EAAMV,EAAM,CAAC,EACjBf,EAAO,OAAOyB,EAChB,OAAQ,CAACT,GAAgCS,GAAQ,QAA0BzB,IAAf,YAAuB,CAAC,CAAEyB,EAAa,OACrG,CAAC,CACH,CAEA,SAASN,GAAQJ,EAAgBhB,EAAgBM,EAAgBW,EAA0B,CACzF,IAAMhB,EAAO,OAAOe,EAIpB,GAAI,OAAOA,GAAU,SAAU,CAC7B,IAAML,EAASE,GAAcG,CAAK,EAGlC,GAAIL,EAAS,GACX,OAAAX,EAAK,SAASM,EAAQK,EAAS,GAAI,EACnCN,GAAUL,EAAMM,EAAS,EAAGU,CAAK,EAC1B,EAAIL,EAIb,GAAIA,EAAS,IACX,OAAAX,EAAK,SAASM,EAAQ,GAAI,EAC1BN,EAAK,SAASM,EAAS,EAAGK,CAAM,EAChCN,GAAUL,EAAMM,EAAS,EAAGU,CAAK,EAC1B,EAAIL,EAIb,GAAIA,EAAS,MACX,OAAAX,EAAK,SAASM,EAAQ,GAAI,EAC1BN,EAAK,UAAUM,EAAS,EAAGK,CAAM,EACjCN,GAAUL,EAAMM,EAAS,EAAGU,CAAK,EAC1B,EAAIL,EAGb,GAAIA,EAAS,WACX,OAAAX,EAAK,SAASM,EAAQ,GAAI,EAC1BN,EAAK,UAAUM,EAAS,EAAGK,CAAM,EACjCN,GAAUL,EAAMM,EAAS,EAAGU,CAAK,EAC1B,EAAIL,CAEf,CAQA,GANI,YAAY,QAAU,YAAY,OAAOK,CAAK,IAEhDA,EAAQA,EAAM,QAIZA,aAAiB,YAAa,CAChC,IAAML,EAASK,EAAM,WAGrB,GAAIL,EAAS,IACX,OAAAX,EAAK,SAASM,EAAQ,GAAI,EAC1BN,EAAK,SAASM,EAAS,EAAGK,CAAM,EAChC,IAAI,WAAWX,EAAK,MAAM,EAAE,IAAI,IAAI,WAAWgB,CAAK,EAAGV,EAAS,CAAC,EAC1D,EAAIK,EAIb,GAAIA,EAAS,MACX,OAAAX,EAAK,SAASM,EAAQ,GAAI,EAC1BN,EAAK,UAAUM,EAAS,EAAGK,CAAM,EACjC,IAAI,WAAWX,EAAK,MAAM,EAAE,IAAI,IAAI,WAAWgB,CAAK,EAAGV,EAAS,CAAC,EAC1D,EAAIK,EAIb,GAAIA,EAAS,WACX,OAAAX,EAAK,SAASM,EAAQ,GAAI,EAC1BN,EAAK,UAAUM,EAAS,EAAGK,CAAM,EACjC,IAAI,WAAWX,EAAK,MAAM,EAAE,IAAI,IAAI,WAAWgB,CAAK,EAAGV,EAAS,CAAC,EAC1D,EAAIK,CAEf,CAEA,GAAI,OAAOK,GAAU,SAAU,CAG7B,GAAI,KAAK,MAAMA,CAAK,IAAMA,EACxB,OAAAhB,EAAK,SAASM,EAAQ,GAAI,EAC1BN,EAAK,WAAWM,EAAS,EAAGU,CAAK,EAC1B,EAIT,GAAIA,GAAS,EAAG,CAEd,GAAIA,EAAQ,IACV,OAAAhB,EAAK,SAASM,EAAQU,CAAK,EACpB,EAGT,GAAIA,EAAQ,IACV,OAAAhB,EAAK,SAASM,EAAQ,GAAI,EAC1BN,EAAK,SAASM,EAAS,EAAGU,CAAK,EACxB,EAGT,GAAIA,EAAQ,MACV,OAAAhB,EAAK,SAASM,EAAQ,GAAI,EAC1BN,EAAK,UAAUM,EAAS,EAAGU,CAAK,EACzB,EAGT,GAAIA,EAAQ,WACV,OAAAhB,EAAK,SAASM,EAAQ,GAAI,EAC1BN,EAAK,UAAUM,EAAS,EAAGU,CAAK,EACzB,EAGT,GAAIA,EAAQ,oBACV,OAAAhB,EAAK,SAASM,EAAQ,GAAI,EAC1BqB,GAAU3B,EAAMM,EAAS,EAAGU,CAAK,EAC1B,EAET,MAAM,IAAI,MAAM,oBAAsBA,EAAM,SAAS,EAAE,CAAC,CAC1D,CAGA,GAAIA,GAAS,IACX,OAAAhB,EAAK,QAAQM,EAAQU,CAAK,EACnB,EAGT,GAAIA,GAAS,KACX,OAAAhB,EAAK,SAASM,EAAQ,GAAI,EAC1BN,EAAK,QAAQM,EAAS,EAAGU,CAAK,EACvB,EAGT,GAAIA,GAAS,OACX,OAAAhB,EAAK,SAASM,EAAQ,GAAI,EAC1BN,EAAK,SAASM,EAAS,EAAGU,CAAK,EACxB,EAGT,GAAIA,GAAS,YACX,OAAAhB,EAAK,SAASM,EAAQ,GAAI,EAC1BN,EAAK,SAASM,EAAS,EAAGU,CAAK,EACxB,EAGT,GAAIA,GAAS,oBACX,OAAAhB,EAAK,SAASM,EAAQ,GAAI,EAC1BmB,GAASzB,EAAMM,EAAS,EAAGU,CAAK,EACzB,EAET,MAAM,IAAI,MAAM,wBAA0B,CAACA,GAAO,SAAS,EAAE,EAAE,OAAO,CAAC,CAAC,CAC1E,CAGA,GAAIf,IAAS,YACX,OAAIgB,EAAe,GACnBjB,EAAK,SAASM,EAAQ,GAAI,EAC1BN,EAAK,SAASM,EAAS,EAAG,CAAI,EAC9BN,EAAK,SAASM,EAAS,EAAG,CAAI,EACvB,GAIT,GAAIU,IAAU,KACZ,OAAIC,EAAe,GACnBjB,EAAK,SAASM,EAAQ,GAAI,EACnB,GAIT,GAAIL,IAAS,UACX,OAAAD,EAAK,SAASM,EAAQU,EAAQ,IAAO,GAAI,EAClC,EAGT,GAAmB,OAAQA,EAAe,QAAtC,WAA8C,OAAOI,GAASJ,EAAe,OAAO,EAAGhB,EAAMM,EAAQW,CAAM,EAG/G,GAAIhB,IAAS,SAAU,CACrB,IAAIU,EACFO,EAAO,EACLe,EACEC,EAAU,MAAM,QAAQlB,CAAK,EAsBnC,GApBIkB,EACFvB,EAAUK,EAAoB,QAE9BiB,EAAOD,GAAehB,EAAqCC,CAAM,EACjEN,EAASsB,EAAK,QAGZtB,EAAS,IACXX,EAAK,SAASM,EAAQK,GAAUuB,EAAU,IAAO,IAAK,EACtDhB,EAAO,GACEP,EAAS,OAClBX,EAAK,SAASM,EAAQ4B,EAAU,IAAO,GAAI,EAC3ClC,EAAK,UAAUM,EAAS,EAAGK,CAAM,EACjCO,EAAO,GACEP,EAAS,aAClBX,EAAK,SAASM,EAAQ4B,EAAU,IAAO,GAAI,EAC3ClC,EAAK,UAAUM,EAAS,EAAGK,CAAM,EACjCO,EAAO,GAGLgB,EACF,QAAS/B,EAAI,EAAGA,EAAIQ,EAAQR,IAC1Be,GAAQE,GAASJ,EAAoBb,CAAC,EAAGH,EAAMM,EAASY,EAAMD,CAAM,UAE7DgB,EACT,QAAS9B,EAAI,EAAGA,EAAIQ,EAAQR,IAAK,CAC/B,IAAM0B,EAAMI,EAAK9B,CAAC,EAClBe,GAAQE,GAAQS,EAAK7B,EAAMM,EAASY,CAAI,EACxCA,GAAQE,GAASJ,EAAqCa,CAAG,EAAG7B,EAAMM,EAASY,EAAMD,CAAM,CACzF,CAGF,OAAOC,CACT,CACA,GAAIjB,IAAS,WAAY,MAAO,GAEhC,MAAM,IAAI,MAAM,gBAAkBA,CAAI,CACxC,CAEA,SAASkB,GAAOH,EAAgBC,EAA0B,CACxD,IAAMhB,EAAO,OAAOe,EAGpB,GAAIf,IAAS,SAAU,CACrB,IAAMU,EAASE,GAAcG,CAAe,EAC5C,GAAIL,EAAS,GACX,MAAO,GAAIA,EAEb,GAAIA,EAAS,IACX,MAAO,GAAIA,EAEb,GAAIA,EAAS,MACX,MAAO,GAAIA,EAEb,GAAIA,EAAS,WACX,MAAO,GAAIA,CAEf,CAQA,GANI,YAAY,QAAU,YAAY,OAAOK,CAAK,IAEhDA,EAAQA,EAAM,QAIZA,aAAiB,YAAa,CAChC,IAAML,EAASK,EAAM,WACrB,GAAIL,EAAS,IACX,MAAO,GAAIA,EAEb,GAAIA,EAAS,MACX,MAAO,GAAIA,EAEb,GAAIA,EAAS,WACX,MAAO,GAAIA,CAEf,CAEA,GAAI,OAAOK,GAAU,SAAU,CAG7B,GAAI,KAAK,MAAMA,CAAK,IAAMA,EAAO,MAAO,GAGxC,GAAIA,GAAS,EAAG,CAEd,GAAIA,EAAQ,IAAM,MAAO,GAEzB,GAAIA,EAAQ,IAAO,MAAO,GAE1B,GAAIA,EAAQ,MAAS,MAAO,GAE5B,GAAIA,EAAQ,WAAa,MAAO,GAEhC,GAAIA,EAAQ,oBAAqB,MAAO,GAExC,MAAM,IAAI,MAAM,oBAAsBA,EAAM,SAAS,EAAE,CAAC,CAC1D,CAEA,GAAIA,GAAS,IAAO,MAAO,GAE3B,GAAIA,GAAS,KAAO,MAAO,GAE3B,GAAIA,GAAS,OAAS,MAAO,GAE7B,GAAIA,GAAS,YAAa,MAAO,GAEjC,GAAIA,GAAS,oBAAqB,MAAO,GAEzC,MAAM,IAAI,MAAM,uBAAyBA,EAAM,SAAS,EAAE,EAAE,OAAO,CAAC,CAAC,CACvE,CAGA,GAAIf,IAAS,UAAW,MAAO,GAG/B,GAAIe,IAAU,KAAM,OAAOC,EAAS,EAAI,EACxC,GAAID,IAAU,OAAW,OAAOC,EAAS,EAAI,EAE7C,GAAmB,OAAQD,EAAe,QAAtC,WAA8C,OAAOG,GAAQH,EAAe,OAAO,EAAGC,CAAM,EAGhG,GAAIhB,IAAS,SAAU,CACrB,IAAIU,EACFO,EAAO,EACT,GAAI,MAAM,QAAQF,CAAK,EAAG,CACxBL,EAASK,EAAM,OACf,QAASb,EAAI,EAAGA,EAAIQ,EAAQR,IAC1Be,GAAQC,GAAOH,EAAMb,CAAC,EAAGc,CAAM,CAEnC,KAAO,CACL,IAAMgB,EAAOD,GAAehB,EAAqCC,CAAM,EACvEN,EAASsB,EAAK,OACd,QAAS9B,EAAI,EAAGA,EAAIQ,EAAQR,IAAK,CAC/B,IAAM0B,EAAMI,EAAK9B,CAAC,EAClBe,GAAQC,GAAOU,CAAG,EAAIV,GAAQH,EAAqCa,CAAG,EAAGZ,CAAM,CACjF,CACF,CACA,GAAIN,EAAS,GACX,MAAO,GAAIO,EAEb,GAAIP,EAAS,MACX,MAAO,GAAIO,EAEb,GAAIP,EAAS,WACX,MAAO,GAAIO,EAEb,MAAM,IAAI,MAAM,8BAAgCP,EAAO,SAAS,EAAE,CAAC,CACrE,CACA,GAAIV,IAAS,WAAY,MAAO,GAEhC,MAAM,IAAI,MAAM,gBAAkBA,CAAI,CACxC,CAEA,IAAOkC,GAAQ,CACb,OAAApB,GACA,OAAAe,GACA,QAAAhC,GACA,UAAAO,GACA,SAAAK,GACA,cAAAG,EACF,ECryBA,SAASuB,GAAYC,EAAuBC,EAAyD,CACnG,MAAO,CAAC,CAACA,EAAQ,IAAI,kBAAkB,CACzC,CAEA,SAASC,GAAaF,EAAuBC,EAAkB,CAC7D,GAAIF,GAAYC,EAAcC,CAAO,EACnC,OAAOD,EAAa,OAASG,EAAU,WAAWH,EAAa,KAAK,CAExE,CAEA,SAASI,GAAeH,EAAkB,CACxC,IAAMI,EAA0B,CAAC,EAEjC,OAAAJ,EAAQ,QAAQ,CAACK,EAAOC,IAAQ,CAC9BF,EAAOE,CAAG,EAAID,CAChB,CAAC,EAEMD,CACT,CAEA,eAAOG,GACLC,EACAC,EACAC,EACAV,EACAW,EACAC,EACwB,CACxB,IAAMC,EAAe,IAAI,QAAQb,GAAW,CAAC,CAAC,EACxCc,EAAUN,EAASA,EAAO,YAAY,EAAUO,EAAMH,CAAI,EAAI,MAAQ,OAEtEI,EAAa,IAAI,gBAEnBC,EACEC,EAAyC,IAAI,QAASC,GAAY,CACtEF,EAAU,WACR,IAAM,CACJD,EAAW,MAAM,EAGjBG,EAAQ,CAAE,MAAO,IAAIC,EAAiB,oBAAqB,KAAM,GAAG,CAAE,CAAC,CACzE,EACAX,EAASA,EAAO,QAAQ,SAAS,mBAAqBY,EAAS,SAAS,kBAC1E,CACF,CAAC,EAEKC,EAA2B,CAC/B,OAAQR,EACR,QAASD,EACT,KAAMD,EACN,OAAQI,EAAW,MACrB,EAEKO,EAAS,OAAO,cACnBD,EAAY,YAAcT,EAAa,IAAI,eAAe,EAAI,UAAY,eAG5E,IAAMW,GAAiB,SAAoC,CACzD,GAAI,CACF,IAAMC,EAAY,IAAI,gBAAgBd,GAAU,CAAC,CAAC,EAClDc,EAAU,IAAI,MAAaC,GAAa,CAAC,EACzC,IAAMC,EAAcjB,EAAM,IAAMe,EAC1BG,EAAM,MAAYC,GAAgB,EAAE,MAAMF,EAAaL,CAAW,EAIxE,GAFA,aAAaL,CAAQ,EAEjBW,EAAI,QAAU,IAChB,MAAO,CAAE,MAAO,KAAM,WAAYA,EAAI,MAAO,EAG/C,IAAME,EAAcF,EAAI,QAAQ,IAAI,cAAc,EAC9ChB,EACAkB,GAAeA,EAAY,QAAQ,uBAAuB,EAAI,GAChElB,EAAO,MAAMgB,EAAI,YAAY,EACpBE,GAAeA,EAAY,QAAQ,kBAAkB,EAAI,GAClElB,EAAO,MAAMgB,EAAI,KAAK,EAEtBhB,EAAO,MAAMgB,EAAI,KAAK,EAGxB,IAAMG,EAAW,CAAC,CAACD,GAAeA,EAAY,QAAQ,uBAAuB,IAAM,GAC7E9B,EAAUG,GAAeyB,EAAI,OAAO,EAE1C,OAAKA,EAAI,GAWA,CAAE,MAAO,KAAM,KAAAhB,EAAM,QAAAZ,EAAS,SAAA+B,EAAU,WAAYH,EAAI,MAAO,EAF/D,CAAE,MAPP3B,GAAaW,EAAMgB,EAAI,OAAO,GAC9B,IAAIR,EACF,wCAA0CQ,EAAI,OAAS,cAAgBL,EAAS,OAAO,QAAQX,CAAI,EACnG,KACAgB,EAAI,MACN,EAEc,KAAAhB,EAAM,QAAAZ,EAAS,SAAA+B,EAAU,WAAYH,EAAI,MAAO,CAIpE,OAASI,EAAO,CACd,oBAAaf,CAAQ,EACd,CAAE,MAAOe,CAA4B,CAC9C,CACF,GAAG,EAEH,OAAO,QAAQ,KAAK,CAACd,EAAgBM,CAAa,CAAC,CACrD,CC3GO,IAAMS,GAAmE,CAC9E,WAAYC,GACZ,aAAcC,EAChB,ErEeA,IAAMC,GAASC,GAAkBC,GAAQC,EAAW,EAEpDC,EAAS,OAASJ,GAClBI,EAAS,YAAcD,GACvBC,EAAS,KAAOC,GAChBD,EAAS,OAASF,GAClBE,EAAS,WAAaE,GACtBF,EAAS,WAAaG,GAEtB,QAAWC,IAAe,CAACC,GAAaC,EAAe,EACrDF,EAAY,OAASR,GACrBQ,EAAY,SAAWG,GAGzBN,GAAK,8BAAgCO,GAErCC,EAAO,gBAAgB,EAEvBT,EAAS,SAAWU,GAAYC,EAAgB,EAE5CX,EAAS,OAAO,QAElBA,EAAS,SAAS,OAAS,IAAMA,EAAS,OAAO,OAKnD,IAAOY,GAAQ,CACb,UAAAC,EACA,KAAMC,GACN,SAAUC,GACV,QAAAC,GACA,oCAAAC,EACF",
  "names": ["web_exports", "__export", "ErrorInfo", "DefaultRealtime", "DefaultRest", "web_default", "makeFromDeserializedWithDependencies", "msgpack_default", "__toCommonJS", "Platform", "globalObject", "pad", "timeSegment", "three", "getHandler", "logger", "Platform", "msg", "time", "getDefaultLoggers", "_a", "consoleLogger", "errorLogger", "globalObject", "args", "_Logger", "description", "level", "handler", "logHandler", "logErrorHandler", "action", "message", "oldName", "newName", "className", "Logger", "logger_default", "utils_exports", "__export", "Format", "allSame", "allToLowerCase", "allToUpperCase", "arrChooseN", "arrDeleteValue", "arrEquals", "arrIntersect", "arrIntersectOb", "arrPopRandomElement", "arrWithoutValue", "cheapRandStr", "containsValue", "copy", "createMissingPluginError", "dataSizeBytes", "decodeBody", "encodeBody", "ensureArray", "forInOwnNonNullProperties", "getBackoffCoefficient", "getGlobalObject", "getJitterCoefficient", "getRetryTime", "inherits", "inspectBody", "inspectError", "intersect", "isEmpty", "isErrorInfoOrPartialErrorInfo", "isNil", "isObject", "keysArray", "matchDerivedChannel", "mixin", "parseQueryString", "prototypicalClone", "randomString", "shallowClone", "shallowEquals", "throwMissingPluginError", "toBase64", "toQueryString", "valuesArray", "whenPromiseSettles", "withTimeoutAsync", "toString", "err", "result", "inspectError", "ErrorInfo", "_ErrorInfo", "message", "code", "statusCode", "cause", "values", "Platform", "PartialErrorInfo", "_PartialErrorInfo", "isNil", "randomPosn", "arrOrStr", "mixin", "target", "args", "i", "source", "key", "copy", "src", "ensureArray", "obj", "isNil", "isObject", "ob", "isEmpty", "prop", "arg", "shallowClone", "result", "prototypicalClone", "ownProperties", "F", "inherits", "ctor", "superCtor", "Platform", "containsValue", "val", "intersect", "arr", "arrIntersect", "arrIntersectOb", "arr1", "arr2", "member", "arrDeleteValue", "idx", "res", "arrWithoutValue", "newArr", "keysArray", "ownOnly", "valuesArray", "forInOwnNonNullProperties", "fn", "allSame", "first", "item", "Format", "arrPopRandomElement", "toQueryString", "params", "parts", "parseQueryString", "query", "match", "search", "isErrorInfoOrPartialErrorInfo", "err", "ErrorInfo", "PartialErrorInfo", "inspectError", "_a", "_b", "inspectBody", "body", "dataSizeBytes", "data", "cheapRandStr", "randomString", "numBytes", "buffer", "arrChooseN", "n", "numItems", "mutableArr", "whenPromiseSettles", "promise", "callback", "decodeBody", "MsgPack", "format", "throwMissingPluginError", "encodeBody", "allToLowerCase", "element", "allToUpperCase", "getBackoffCoefficient", "count", "getJitterCoefficient", "getRetryTime", "initialTimeout", "retryAttempt", "getGlobalObject", "shallowEquals", "matchDerivedChannel", "name", "regex", "toBase64", "str", "bufferUtils", "textBuffer", "arrEquals", "a", "b", "createMissingPluginError", "pluginName", "withTimeoutAsync", "timeout", "e", "_resolve", "reject", "version", "agent", "version", "Defaults", "getPort", "getHttpScheme", "getPrimaryDomainFromEndpoint", "getEndpointFallbackHosts", "getFallbackHosts", "getHosts", "checkHost", "objectifyOptions", "normaliseOptions", "defaultGetHeaders", "defaultPostHeaders", "options", "tls", "isFqdnIpOrLocalhost", "endpoint", "routingPolicyId", "endpointFallbacks", "domain", "id", "fallbackHosts", "httpMaxRetryCount", "arrChooseN", "host", "ErrorInfo", "getTimeouts", "timeouts", "prop", "getAgentString", "agentStr", "allowKeyOrToken", "sourceForErrorMessage", "logger", "modularPluginsToInclude", "msg", "logger_default", "optionsObj", "__spreadProps", "__spreadValues", "checkIfClientOptionsAreValid", "MsgPack", "loggerToUse", "primaryDomainFromEnvironment", "primaryDomain", "Platform", "headers", "connectivityCheckParams", "connectivityCheckUrl", "uri", "qs", "parseQueryString", "wsConnectivityCheckUrl", "normaliseChannelOptions", "Crypto", "channelOptions", "throwMissingPluginError", "cipher", "contentTypes", "defaultHeadersOptions", "format", "protocolVersion", "contentType", "defaults_default", "getDefaults", "platformDefaults", "Multicaster", "_Multicaster", "logger", "members", "err", "result", "member", "e", "logger_default", "args", "resolve", "reject", "instance", "fn", "multicaster_default", "HttpMethods", "HttpMethods_default", "HttpStatusCodes", "isSuccessCode", "statusCode", "HttpStatusCodes_default", "MAX_TOKEN_LENGTH", "random", "isRealtime", "client", "normaliseAuthcallbackError", "err", "isErrorInfoOrPartialErrorInfo", "ErrorInfo", "inspectError", "hmac", "text", "key", "bufferUtils", "Platform", "textBuffer", "keyBuffer", "digest", "c14n", "capability", "c14nCapability", "keys", "keysArray", "i", "logAndValidateTokenAuthMethod", "authOptions", "logger", "logger_default", "msg", "basicAuthForced", "options", "useTokenAuth", "noWayToRenew", "trId", "getTokenRequestId", "Auth", "tokenParams", "tokenDetails", "resolve", "reject", "HttpStatusCodes_default", "resolvedAuthOptions", "resolvedTokenParams", "copy", "tokenRequestCallback", "params", "cb", "authHeaders", "mixin", "usePost", "providedQsParams", "queryIdx", "parseQueryString", "authParams", "authUrlRequestCallback", "result", "_a", "_b", "body", "contentType", "contentTypeHeaderOrHeaders", "inspectBody", "json", "e", "headers", "toQueryString", "whenPromiseSettles", "HttpMethods_default", "tokenRequest", "signedTokenParams", "tokenCb", "keyName", "path", "tokenUri", "host", "requestHeaders", "defaults_default", "tokenRequestCallbackTimeoutExpired", "timeoutLength", "tokenRequestCallbackTimeout", "tokenRequestOrDetails", "objectSize", "tokenResponse", "unpacked", "keyParts", "keySecret", "request", "clientId", "ttl", "nonce", "timestamp", "signText", "toBase64", "forceSupersede", "token", "promise", "multicaster_default", "tokenRequestId", "caughtError", "multicaster", "tokenClientId", "error", "specifiers", "queryTime", "auth_default", "paramString", "params", "paramPairs", "needle", "appendingParams", "uri", "logResult", "result", "method", "logger", "logger_default", "inspectError", "Platform", "logRequest", "body", "Http", "client", "_a", "_b", "connection", "connectionHost", "defaults_default", "path", "headers", "ErrorInfo", "uriFromHost", "host", "currentFallback", "hosts", "tryAHostStartedAt", "tryAHost", "candidateHosts", "persistOnSuccess", "err", "callListener", "logger", "eventThis", "listener", "args", "e", "logger_default", "removeListener", "targetListeners", "eventFilter", "listeners", "index", "eventName", "targetListenersIndex", "isObject", "EventEmitter", "Platform", "event", "isNil", "firstArg", "secondArg", "eventsOnceListeners", "eventsListeners", "argCount", "resolve", "self", "listenerWrapper", "innerArgs", "targetState", "currentState", "eventemitter_default", "actions", "ActionName", "name", "flags", "flagNames", "channelModes", "normaliseContext", "context", "normalizeCipherOptions", "Crypto", "logger", "options", "throwMissingPluginError", "cipher", "encrypt", "msg", "cipherOptions", "data", "encoding", "encryptData", "dataToEncrypt", "finalEncoding", "Platform", "ciphertext", "encode", "isNativeDataType", "encodeData", "isObject", "ErrorInfo", "decode", "message", "inputContext", "error", "decodeData", "lastPayload", "decodedData", "decodingError", "xforms", "lastProcessedEncodingIndex", "encodingsToProcess", "xform", "match", "xformAlgorithm", "deltaBase", "deltaBaseBuffer", "e", "err", "wireToJSON", "args", "format", "encodeDataForWire", "MessageEncoding", "populateFieldsFromParent", "parent", "id", "connectionId", "timestamp", "msgs", "actions", "i", "strMsg", "m", "cls", "result", "attr", "BaseMessage", "BaseClient", "options", "Platform", "ErrorInfo", "logger_default", "defaults_default", "utils_exports", "eventemitter_default", "MessageEncoding", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "_i", "_j", "normalOptions", "keyMatch", "msg", "Http", "auth_default", "throwMissingPluginError", "host", "params", "method", "path", "version", "body", "customHeaders", "specOrSpecs", "channels", "logOptions", "queryTime", "baseclient_default", "DeviceDetails", "_DeviceDetails", "_a", "_b", "_c", "_d", "result", "body", "MsgPack", "format", "encodeBody", "decodeBody", "values", "ErrorInfo", "device", "count", "i", "devicedetails_default", "withAuthDetails", "client", "headers", "params", "opCallback", "authHeaders", "mixin", "authParams", "unenvelope", "result", "MsgPack", "format", "HttpStatusCodes_default", "__spreadProps", "__spreadValues", "body", "decodeBody", "e", "isErrorInfoOrPartialErrorInfo", "PartialErrorInfo", "inspectError", "wrappedStatusCode", "response", "wrappedHeaders", "wrappedErr", "logResult", "method", "path", "logger", "logger_default", "appendingParams", "paramString", "Platform", "Resource", "_Resource", "envelope", "throwError", "HttpMethods_default", "doRequest", "_a", "decodedBody", "throwMissingPluginError", "decodeErr", "httpResult", "auth_default", "resource_default", "getRelParams", "linkUrl", "urlMatch", "parseQueryString", "parseRelLinks", "linkHeader", "relParams", "i", "linkMatch", "params", "returnErrOnly", "err", "body", "useHPR", "PaginatedResource", "client", "path", "headers", "envelope", "bodyHandler", "useHttpPaginatedResponse", "result", "resource_default", "logger_default", "inspectError", "items", "HttpStatusCodes_default", "e", "HttpPaginatedResponse", "PaginatedResult", "resource", "ErrorInfo", "res", "statusCode", "paginatedresource_default", "_PushChannelSubscription", "result", "body", "MsgPack", "format", "decodeBody", "values", "count", "i", "encodeBody", "PushChannelSubscription", "pushchannelsubscription_default", "Push", "client", "_a", "Admin", "Platform", "devicedetails_default", "registerCallback", "updateFailedCallback", "resolve", "reject", "createMissingPluginError", "ErrorInfo", "err", "deregisterCallback", "DeviceRegistrations", "ChannelSubscriptions", "recipient", "payload", "format", "headers", "defaults_default", "params", "body", "mixin", "requestBody", "encodeBody", "resource_default", "device", "response", "deviceIdOrDetails", "deviceId", "envelope", "paginatedresource_default", "unpacked", "_ChannelSubscriptions", "subscription", "pushchannelsubscription_default", "parsedBody", "decodeBody", "i", "push_default", "actions", "fromEncoded", "logger", "Crypto", "encoded", "inputOptions", "options", "normalizeCipherOptions", "WirePresenceMessage", "fromEncodedArray", "encodedArray", "_fromEncoded", "channel", "_fromEncodedArray", "PresenceMessage", "_PresenceMessage", "BaseMessage", "parts", "options", "res", "WirePresenceMessage", "actions", "encode", "values", "v", "data", "strMsg", "_WirePresenceMessage", "args", "wireToJSON", "channelOptions", "logger", "__spreadProps", "__spreadValues", "decode", "e", "logger_default", "inspectError", "presencemessage_default", "RestPresence", "channel", "params", "logger_default", "client", "format", "envelope", "headers", "defaults_default", "mixin", "paginatedresource_default", "body", "unpacked", "decoded", "decodeBody", "_fromEncodedArray", "restpresence_default", "actions", "stringifyAction", "action", "getMessageSize", "msg", "size", "dataSizeBytes", "fromEncoded", "logger", "Crypto", "encoded", "inputOptions", "options", "normalizeCipherOptions", "WireMessage", "fromEncodedArray", "encodedArray", "_fromEncoded", "channel", "_fromEncodedArray", "encodeArray", "messages", "message", "serialize", "encodeBody", "getMessagesSize", "total", "i", "Message", "_Message", "BaseMessage", "res", "encode", "values", "v", "strMsg", "_WireMessage", "args", "wireToJSON", "inputContext", "__spreadProps", "__spreadValues", "err", "decode", "e", "logger_default", "inspectError", "decoded", "message_default", "MSG_ID_ENTROPY_BYTES", "allEmptyIds", "messages", "message", "RestChannel", "client", "name", "channelOptions", "_a", "_b", "logger_default", "restpresence_default", "normaliseChannelOptions", "throwMissingPluginError", "options", "params", "args", "first", "second", "message_default", "isObject", "ErrorInfo", "format", "idempotentRestPublishing", "headers", "defaults_default", "mixin", "msgIdBase", "randomString", "index", "wireMessages", "encodeArray", "size", "getMessagesSize", "maxMessageSize", "serialize", "requestBody", "resource_default", "restchannel_default", "Stats", "_Stats", "values", "stats_default", "RestChannelMixin", "channel", "params", "client", "format", "envelope", "headers", "defaults_default", "mixin", "paginatedresource_default", "body", "unpacked", "decoded", "decodeBody", "_fromEncodedArray", "resource_default", "RestPresenceMixin", "presence", "RestChannelMixin", "params", "client", "format", "envelope", "headers", "defaults_default", "mixin", "paginatedresource_default", "body", "unpacked", "decoded", "decodeBody", "_fromEncodedArray", "Rest", "client", "RestChannelMixin", "RestPresenceMixin", "resource_default", "paginatedresource_default", "devicedetails_default", "pushchannelsubscription_default", "Channels", "push_default", "params", "headers", "defaults_default", "format", "envelope", "mixin", "body", "unpacked", "statsValues", "i", "stats_default", "timeUri", "host", "error", "HttpMethods_default", "time", "ErrorInfo", "method", "path", "version", "customHeaders", "_a", "encoder", "decoder", "throwMissingPluginError", "_method", "paginatedResource", "resbody", "ensureArray", "Platform", "specOrSpecs", "requestBodyDTO", "singleSpecMode", "requestBody", "encodeBody", "response", "batchResults", "decodeBody", "channels", "channelsParam", "specifiers", "options", "useTokenAuth", "keyName", "resolvedOptions", "__spreadValues", "specifier", "name", "channelOptions", "channel", "restchannel_default", "BaseRest", "baseclient_default", "options", "defaults_default", "logger_default", "Rest", "allCommonModularPlugins", "Rest", "DefaultMessage", "message_default", "encoded", "inputOptions", "fromEncoded", "logger_default", "Platform", "encodedArray", "options", "fromEncodedArray", "values", "DefaultPresenceMessage", "presencemessage_default", "encoded", "inputOptions", "fromEncoded", "logger_default", "Platform", "encodedArray", "options", "fromEncodedArray", "values", "actions", "fromEncoded", "logger", "encoded", "options", "WireAnnotation", "fromEncodedArray", "encodedArray", "_fromEncoded", "channel", "_fromEncodedArray", "Annotation", "_Annotation", "BaseMessage", "res", "WireAnnotation", "actions", "encode", "values", "v", "strMsg", "_WireAnnotation", "args", "wireToJSON", "channelOptions", "logger", "__spreadProps", "__spreadValues", "decode", "e", "logger_default", "inspectError", "annotation_default", "DefaultAnnotation", "annotation_default", "encoded", "inputOptions", "fromEncoded", "logger_default", "encodedArray", "options", "fromEncodedArray", "values", "serialFromMsgOrSerial", "msgOrSerial", "messageSerial", "ErrorInfo", "constructValidateAnnotation", "annotationValues", "annotation", "annotation_default", "basePathForSerial", "channel", "serial", "RestAnnotations", "wireAnnotation", "client", "options", "format", "headers", "defaults_default", "params", "mixin", "requestBody", "encodeBody", "resource_default", "envelope", "paginatedresource_default", "body", "_", "unpacked", "decoded", "decodeBody", "_fromEncodedArray", "restannotations_default", "serialize", "encodeBody", "toStringArray", "array", "result", "i", "deserialize", "serialized", "MsgPack", "presenceMessagePlugin", "annotationsPlugin", "objectsPlugin", "format", "deserialized", "decodeBody", "fromDeserialized", "error", "ErrorInfo", "messages", "WireMessage", "presence", "annotations", "state", "utils_exports", "MessageEncoding", "ProtocolMessage", "__spreadProps", "__spreadValues", "makeFromDeserializedWithDependencies", "dependencies", "_a", "presencemessage_default", "WirePresenceMessage", "annotation_default", "WireAnnotation", "realtimeannotations_default", "restannotations_default", "fromValues", "values", "stringify", "msg", "ActionName", "simpleAttributes", "attribute", "attribIndex", "flagNames", "stringifiedParams", "forInOwnNonNullProperties", "prop", "flag", "flags", "modes", "mode", "channelModes", "protocolmessage_default", "ChannelStateChange", "previous", "current", "resumed", "hasBacklog", "reason", "channelstatechange_default", "noop", "validateChannelOptions", "options", "isObject", "ErrorInfo", "i", "currentMode", "channelModes", "RealtimeChannel", "_RealtimeChannel", "eventemitter_default", "client", "name", "_a", "_b", "_c", "params", "logger_default", "restMixin", "state", "normaliseChannelOptions", "throwMissingPluginError", "args", "previousChannelOptions", "err", "resolve", "reject", "stateChange", "prevOptions", "requestedParams", "omitAgent", "existingParams", "shallowEquals", "arrEquals", "messages", "message_default", "maxMessageSize", "wireMessages", "encodeArray", "size", "getMessagesSize", "pm", "fromValues", "actions", "subscriptions", "message", "result", "forceReattach", "attachReason", "callback", "connectionManager", "attachMsg", "allToUpperCase", "msg", "event", "listener", "l", "PartialErrorInfo", "syncMessage", "presence", "objectMessages", "syncChannelSerial", "isSync", "modesFromFlags", "allToLowerCase", "resumed", "hasPresence", "hasBacklog", "hasObjects", "change", "channelstatechange_default", "detachErr", "populateFieldsFromParent", "presenceMessages", "wpm", "format", "om", "utils_exports", "encoded", "firstMessage", "lastMessage", "decoded", "annotations", "reason", "action", "stateTimer", "retryDelay", "getRetryTime", "s", "channelSerial", "channelParams", "_", "__objRest", "realtimechannel_default", "RealtimeAnnotations", "channel", "eventemitter_default", "msgOrSerial", "annotationValues", "channelName", "annotation", "constructValidateAnnotation", "wireAnnotation", "logger_default", "pm", "fromValues", "actions", "_args", "args", "realtimechannel_default", "event", "listener", "ErrorInfo", "flags", "annotations", "params", "restannotations_default", "realtimeannotations_default", "_DefaultRest", "BaseRest", "options", "_a", "_b", "defaults_default", "logger_default", "__spreadProps", "__spreadValues", "allCommonModularPlugins", "annotation_default", "WireAnnotation", "realtimeannotations_default", "restannotations_default", "newValue", "DefaultMessage", "DefaultPresenceMessage", "DefaultAnnotation", "Http", "DefaultRest", "MessageQueue", "eventemitter_default", "logger", "message", "messages", "serial", "count", "err", "logger_default", "first", "startSerial", "endSerial", "completeMessages", "msg", "messagequeue_default", "PendingMessage", "message", "callback", "action", "actions", "Protocol", "eventemitter_default", "transport", "messagequeue_default", "serial", "count", "err", "logger_default", "inspectError", "ErrorInfo", "listener", "messageQueue", "pendingMessage", "stringify", "protocol_default", "ConnectionStateChange", "previous", "current", "retryIn", "reason", "connectionstatechange_default", "ConnectionErrorCodes", "ConnectionErrors", "ErrorInfo", "isRetriable", "err", "connectionerrors_default", "closeMessage", "fromValues", "actions", "disconnectMessage", "Transport", "eventemitter_default", "connectionManager", "auth", "params", "forceJsonProtocol", "connectionerrors_default", "err", "event", "_a", "message", "logger_default", "stringify", "whenPromiseSettles", "inspectError", "Platform", "maxPromisedIdle", "id", "msg", "timeout", "sinceLast", "timeRemaining", "ErrorInfo", "transportCtor", "transportParams", "callback", "transport", "transportAttemptTimer", "errorCb", "realtimeRequestTimeout", "transport_default", "TransportNames", "globalObject", "haveWebStorage", "_a", "Platform", "haveSessionStorage", "noop", "transportPreferenceName", "bundleWith", "dest", "src", "maxSize", "action", "actions", "kind", "proposed", "getMessagesSize", "allSame", "msg", "decodeRecoveryKey", "recoveryKey", "e", "TransportParams", "options", "host", "mode", "connectionKey", "authParams", "params", "copy", "recoveryContext", "defaults_default", "getAgentString", "mixin", "result", "ConnectionManager", "_ConnectionManager", "eventemitter_default", "realtime", "timeouts", "connectingTimeout", "messagequeue_default", "intersect", "TransportNames", "logger_default", "addEventListener", "additionalImplementations", "storage", "implementations", "__spreadValues", "transportName", "transport", "callback", "modeCb", "recoverFn", "lastSessionData", "sessionRecoveryName", "shouldRecover", "transportParams", "candidate", "transport_default", "wrappedErr", "state", "auth_default", "whenPromiseSettles", "err", "isRetriable", "error", "connectionId", "connectionDetails", "self", "existingState", "connectedState", "existingActiveProtocol", "protocol_default", "connectedErr", "_connectionId", "connectionstatechange_default", "currentProtocol", "wasActive", "wasPending", "noTransportsScheduledForActivation", "newConnectionState", "hasConnectionError", "prevConnId", "sinceLast", "newError", "PartialErrorInfo", "_b", "connectionerrors_default", "stateChange", "message", "newState", "transitionState", "interval", "connectivity", "ErrorInfo", "indicated", "retryImmediately", "retryDelay", "getRetryTime", "change", "autoReconnect", "request", "auth", "connectCount", "connect", "authCb", "transportPreference", "ws", "shouldContinue", "giveUp", "candidateHosts", "hostAttemptCb", "fatal", "tryFallbackHosts", "arrPopRandomElement", "tokenDetails", "activeTransport", "authMsg", "fromValues", "successListener", "failureListener", "listener", "queueEvent", "PendingMessage", "stringify", "pendingMessage", "lastQueued", "multicaster_default", "pendingMessages", "numQueued", "inspectError", "pendingChannelMessage", "pingStart", "id", "cheapRandStr", "withTimeoutAsync", "resolve", "onHeartbeat", "responseId", "HttpStatusCodes_default", "clientId", "connectionStateTtl", "wsConnectivityCheckUrl", "reject", "finished", "value", "connectionmanager_default", "Connection", "eventemitter_default", "ably", "options", "state", "connectionmanager_default", "stateChange", "Platform", "logger_default", "connection_default", "_BaseRealtime", "baseclient_default", "options", "_a", "_b", "_c", "_d", "defaults_default", "logger_default", "ErrorInfo", "connection_default", "Channels", "plugins", "transports", "TransportNames", "eventemitter_default", "BaseRealtime", "realtime", "serials", "name", "keysArray", "channel", "channelSerials", "msg", "channelName", "connectionState", "reason", "connectionStateToChannelState", "fromChannelStates", "toChannelState", "channelId", "channelOptions", "realtimechannel_default", "deriveOptions", "filter", "toBase64", "match", "matchDerivedChannel", "releaseErr", "baserealtime_default", "newerThan", "item", "existing", "itemOrderings", "existingOrderings", "PresenceMap", "eventemitter_default", "presence", "memberKey", "newer", "key", "clientId", "map", "result", "params", "connectionId", "presencemessage_default", "existingItem", "syncInProgress", "logger_default", "copy", "valuesArray", "callback", "inProgress", "getClientId", "realtimePresence", "isAnonymousOrWildcard", "realtime", "clientId", "waitAttached", "channel", "callback", "action", "whenPromiseSettles", "err", "ErrorInfo", "RealtimePresence", "eventemitter_default", "PresenceMap", "item", "data", "id", "logger_default", "presence", "presencemessage_default", "wirePresMsg", "resolve", "reject", "PartialErrorInfo", "params", "waitForSync", "returnMembers", "members", "restMixin", "presenceSet", "isSync", "syncChannelSerial", "syncCursor", "match", "myMembers", "broadcastMessages", "connId", "i", "hasPresence", "pendingPresence", "pendingPresCount", "presenceArray", "multicaster", "multicaster_default", "event", "state", "inspectError", "e", "memberKey", "entry", "wrappedErr", "change", "channelstatechange_default", "items", "subscriptions", "_args", "args", "realtimechannel_default", "listener", "realtimepresence_default", "shortName", "TransportNames", "isNodeWebSocket", "ws", "WebSocketTransport", "transport_default", "connectionManager", "auth", "params", "Platform", "uri", "connectParams", "toQueryString", "logger_default", "self", "options", "wsUri", "defaults_default", "whenPromiseSettles", "err", "authParams", "paramStr", "param", "wsConnection", "ev", "e", "message", "serialize", "msg", "inspectError", "ErrorInfo", "data", "deserialize", "wasClean", "code", "websockettransport_default", "FilteredSubscriptions", "channel", "filter", "listener", "filteredListener", "m", "_a", "_b", "_c", "_d", "_e", "_f", "mapping", "key", "value", "realListener", "realListenerMap", "filterMaps", "listenerMaps", "prev", "cur", "listeners", "_DefaultRealtime", "baserealtime_default", "options", "_a", "MsgPack", "defaults_default", "logger_default", "__spreadProps", "__spreadValues", "allCommonModularPlugins", "realtimepresence_default", "presencemessage_default", "WirePresenceMessage", "annotation_default", "WireAnnotation", "realtimeannotations_default", "restannotations_default", "websockettransport_default", "FilteredSubscriptions", "newValue", "utils_exports", "connectionmanager_default", "protocolmessage_default", "DefaultMessage", "DefaultPresenceMessage", "DefaultAnnotation", "Http", "PresenceMap", "MessageEncoding", "DefaultRealtime", "uint8Array", "uint32Array", "pow", "DEFAULT_STATE", "ROUND_CONSTANTS", "M", "getFractionalBits", "n", "nPrime", "isPrime", "factor", "LittleEndian", "convertEndian", "word", "rightRotate", "bits", "sha256", "data", "STATE", "legth", "bitLength", "newBitLength", "bytes", "words", "round", "block", "workingState", "MRound", "gamma0x", "gamma1x", "t1", "t2", "i", "val", "hmac", "key", "tmp", "innerKey", "outerKey", "msg", "result", "BufferUtils", "bytes", "base64", "encodings", "byteLength", "byteRemainder", "mainLength", "a", "b", "c", "d", "chunk", "i", "binary_string", "len", "ascii", "buffer", "str", "Platform", "accum", "byte", "hexEncodedBytes", "uint8Array", "string", "encodedByteArray", "buffer1", "buffer2", "arrayBuffer1", "arrayBuffer2", "bytes1", "bytes2", "arrayBufferView", "buffers", "sumLength", "acc", "v", "result", "offset", "message", "hash", "sha256", "key", "hmac", "bufferutils_default", "createCryptoClass", "config", "bufferUtils", "DEFAULT_ALGORITHM", "DEFAULT_KEYLENGTH", "DEFAULT_MODE", "DEFAULT_BLOCKLENGTH", "validateCipherParams", "params", "normaliseBase64", "string", "isCipherParams", "CipherParams", "algorithm", "keyLength", "mode", "key", "Crypto", "cipherParams", "err", "ErrorInfo", "logger", "_a", "CBCCipher", "iv", "buffer1", "buffer2", "output", "outputView", "buffer1View", "i", "buffer2View", "plaintext", "logger_default", "cryptoKey", "ciphertext", "ciphertextArrayBuffer", "ciphertextBody", "randomBlock", "XHRStates", "XHRStates_default", "createMissingImplementationError", "ErrorInfo", "_a", "Http", "client", "connectivityCheckUrl", "defaults_default", "connectivityCheckParams", "connectivityUrlIsDefault", "requestImplementations", "__spreadValues", "xhrRequestImplementation", "fetchRequestImplementation", "hasImplementation", "Platform", "method", "uri", "headers", "params", "body", "resolve", "req", "XHRStates_default", "error", "unpacked", "statusCode", "logger_default", "requestResult", "HttpMethods_default", "result", "isSuccessCode", "PartialErrorInfo", "_b", "errorInfo", "http_default", "test", "globalObject", "Webstorage", "e", "name", "value", "ttl", "session", "wrappedValue", "rawItem", "webstorage_default", "globalObject", "getGlobalObject", "isVercelEdgeRuntime", "allowComet", "loc", "isWebWorkerContext", "userAgent", "currentUrl", "Config", "f", "str", "byteLength", "byteArray", "webstorage_default", "config_default", "shouldBeErrorAction", "err", "UNRESOLVABLE_ERROR_CODES", "auth_default", "protocolMessageFromRawError", "fromValues", "actions", "CometTransport", "transport_default", "connectionManager", "auth", "params", "tokenDetails", "logger_default", "options", "host", "port", "defaults_default", "cometScheme", "connectUri", "whenPromiseSettles", "authParams", "connectParams", "toQueryString", "preconnected", "connectRequest", "XHRStates_default", "data", "ErrorInfo", "Platform", "closing", "closeOrDisconnectUri", "request", "inspectError", "connectionerrors_default", "message", "_a", "connectionStr", "baseConnectionUri", "pendingItems", "items", "sendRequest", "recvRequest", "responseData", "i", "fromDeserialized", "e", "requestItems", "comettransport_default", "isAblyError", "responseBody", "headers", "allToLowerCase", "keysArray", "getAblyError", "ErrorInfo", "noop", "idCounter", "pendingRequests", "getHeader", "xhr", "header", "isEncodingChunked", "getHeadersAsObject", "headerPairs", "i", "parts", "x", "XHRRequest", "_XHRRequest", "eventemitter_default", "uri", "params", "body", "requestMode", "timeouts", "logger", "method", "cheapRandStr", "toQueryString", "isNil", "_timeouts", "defaults_default", "copy", "err", "unpacked", "statusCode", "timeout", "XHRStates_default", "timer", "accept", "responseType", "h", "errorHandler", "errorEvent", "message", "code", "_a", "errorMessage", "logger_default", "PartialErrorInfo", "streaming", "successResponse", "streamPos", "onResponse", "onEnd", "parsedResponse", "contentType", "jsonResponseBody", "Platform", "e", "onProgress", "responseText", "bodyEnd", "idx", "chunk", "onChunk", "onStreamEnd", "readyState", "xhrrequest_default", "shortName", "TransportNames", "XHRPollingTransport", "comettransport_default", "connectionManager", "auth", "params", "Platform", "uri", "headers", "body", "requestMode", "xhrrequest_default", "xhrpollingtransport_default", "order", "defaultTransports", "websockettransport_default", "xhrpollingtransport_default", "transport_default", "Defaults", "TransportNames", "defaults_default", "inspect", "buffer", "view", "type", "bytes", "i", "byte_", "utf8Write", "offset", "string", "l", "codePoint", "utf8Read", "length", "end", "utf8ByteCount", "count", "encode", "value", "sparse", "size", "sizeof", "_encode", "SH_L_32", "SH_R_32", "getInt64", "getUint64", "setInt64", "val", "setUint64", "Decoder", "key", "decode", "decoder", "encodeableKeys", "keys", "isArray", "msgpack_default", "isAblyError", "responseBody", "headers", "getAblyError", "ErrorInfo", "convertHeaders", "result", "value", "key", "fetchRequest", "method", "client", "uri", "params", "body", "fetchHeaders", "_method", "isNil", "controller", "timeout", "timeoutPromise", "resolve", "PartialErrorInfo", "defaults_default", "requestInit", "Platform", "resultPromise", "urlParams", "cheapRandStr", "preparedURI", "res", "getGlobalObject", "contentType", "unpacked", "error", "defaultBundledRequestImplementations", "xhrrequest_default", "fetchRequest", "Crypto", "createCryptoClass", "config_default", "bufferutils_default", "Platform", "http_default", "transport_default", "webstorage_default", "clientClass", "DefaultRest", "DefaultRealtime", "msgpack_default", "defaultBundledRequestImplementations", "logger_default", "getDefaults", "defaults_default", "web_default", "ErrorInfo", "DefaultRest", "DefaultRealtime", "msgpack_default", "makeFromDeserializedWithDependencies"]
}
