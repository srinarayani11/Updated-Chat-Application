{
  "version": 3,
  "sources": ["../src/plugins/objects/index.ts", "../src/plugins/objects/objectmessage.ts", "../src/plugins/objects/liveobject.ts", "../src/plugins/objects/objectid.ts", "../src/plugins/objects/livecounter.ts", "../src/plugins/objects/batchcontextlivecounter.ts", "../node_modules/dequal/dist/index.mjs", "../src/plugins/objects/defaults.ts", "../src/plugins/objects/livemap.ts", "../src/plugins/objects/batchcontextlivemap.ts", "../src/plugins/objects/objectspool.ts", "../src/plugins/objects/batchcontext.ts", "../src/plugins/objects/syncobjectsdatapool.ts", "../src/plugins/objects/objects.ts"],
  "sourcesContent": ["import { ObjectMessage } from './objectmessage';\r\nimport { Objects } from './objects';\r\n\r\nexport { Objects, ObjectMessage };\r\n\r\nexport default {\r\n  Objects,\r\n  ObjectMessage,\r\n};\r\n", "import type BaseClient from 'common/lib/client/baseclient';\r\nimport type { MessageEncoding } from 'common/lib/types/basemessage';\r\nimport type Logger from 'common/lib/util/logger';\r\nimport type * as Utils from 'common/lib/util/utils';\r\nimport type { Bufferlike } from 'common/platform';\r\n\r\nexport type EncodeInitialValueFunction = (\r\n  data: any,\r\n  encoding?: string | null,\r\n) => { data: any; encoding?: string | null };\r\n\r\nexport type EncodeObjectDataFunction = (data: ObjectData) => ObjectData;\r\n\r\n/** @spec OOP2 */\r\nexport enum ObjectOperationAction {\r\n  MAP_CREATE = 0,\r\n  MAP_SET = 1,\r\n  MAP_REMOVE = 2,\r\n  COUNTER_CREATE = 3,\r\n  COUNTER_INC = 4,\r\n  OBJECT_DELETE = 5,\r\n}\r\n\r\n/** @spec OMP2 */\r\nexport enum ObjectsMapSemantics {\r\n  LWW = 0,\r\n}\r\n\r\n/**\r\n * An ObjectData represents a value in an object on a channel.\r\n * @spec OD1\r\n */\r\nexport interface ObjectData {\r\n  /** A reference to another object, used to support composable object structures. */\r\n  objectId?: string; // OD2a\r\n\r\n  /** May be set by the client to indicate that value in `string` field have an encoding. */\r\n  encoding?: string; // OD2b\r\n  /** A primitive boolean leaf value in the object graph. Only one value field can be set. */\r\n  boolean?: boolean; // OD2c\r\n  /** A primitive binary leaf value in the object graph. Only one value field can be set. */\r\n  bytes?: Bufferlike; // OD2d\r\n  /** A primitive number leaf value in the object graph. Only one value field can be set. */\r\n  number?: number; // OD2e\r\n  /** A primitive string leaf value in the object graph. Only one value field can be set. */\r\n  string?: string; // OD2f\r\n}\r\n\r\n/**\r\n * An ObjectsMapOp describes an operation to be applied to a Map object.\r\n * @spec OMO1\r\n */\r\nexport interface ObjectsMapOp {\r\n  /** The key of the map entry to which the operation should be applied. */\r\n  key: string; // OMO2a\r\n  /** The data that the map entry should contain if the operation is a MAP_SET operation. */\r\n  data?: ObjectData; // OMO2b\r\n}\r\n\r\n/**\r\n * An ObjectsCounterOp describes an operation to be applied to a Counter object.\r\n * @spec OCO1\r\n */\r\nexport interface ObjectsCounterOp {\r\n  /** The data value that should be added to the counter */\r\n  amount: number; // OCO2a\r\n}\r\n\r\n/**\r\n * An ObjectsMapEntry represents the value at a given key in a Map object.\r\n * @spec OME1\r\n */\r\nexport interface ObjectsMapEntry {\r\n  /** Indicates whether the map entry has been removed. */\r\n  tombstone?: boolean; // OME2a\r\n  /**\r\n   * The {@link ObjectMessage.serial} value of the last operation that was applied to the map entry.\r\n   *\r\n   * It is optional in a MAP_CREATE operation and might be missing, in which case the client should use a nullish value for it\r\n   * and treat it as the \"earliest possible\" serial for comparison purposes.\r\n   */\r\n  timeserial?: string; // OME2b\r\n  /** The data that represents the value of the map entry. */\r\n  data?: ObjectData; // OME2c\r\n}\r\n\r\n/**\r\n * An ObjectsMap object represents a map of key-value pairs.\r\n * @spec OMP1\r\n */\r\nexport interface ObjectsMap {\r\n  /** The conflict-resolution semantics used by the map object. */\r\n  semantics?: ObjectsMapSemantics; // OMP3a\r\n  // The map entries, indexed by key.\r\n  entries?: Record<string, ObjectsMapEntry>; // OMP3b\r\n}\r\n\r\n/**\r\n * An ObjectsCounter object represents an incrementable and decrementable value\r\n * @spec OCN1\r\n */\r\nexport interface ObjectsCounter {\r\n  /** The value of the counter */\r\n  count?: number; // OCN2a\r\n}\r\n\r\n/**\r\n * An ObjectOperation describes an operation to be applied to an object on a channel.\r\n * @spec OOP1\r\n */\r\nexport interface ObjectOperation {\r\n  /** Defines the operation to be applied to the object. */\r\n  action: ObjectOperationAction; // OOP3a\r\n  /** The object ID of the object on a channel to which the operation should be applied. */\r\n  objectId: string; // OOP3b\r\n  /** The payload for the operation if it is an operation on a Map object type. */\r\n  mapOp?: ObjectsMapOp; // OOP3c\r\n  /** The payload for the operation if it is an operation on a Counter object type. */\r\n  counterOp?: ObjectsCounterOp; // OOP3d\r\n  /**\r\n   * The payload for the operation if the operation is MAP_CREATE.\r\n   * Defines the initial value for the Map object.\r\n   */\r\n  map?: ObjectsMap; // OOP3e\r\n  /**\r\n   * The payload for the operation if the operation is COUNTER_CREATE.\r\n   * Defines the initial value for the Counter object.\r\n   */\r\n  counter?: ObjectsCounter; // OOP3f\r\n  /**\r\n   * The nonce, must be present on create operations. This is the random part\r\n   * that has been hashed with the type and initial value to create the object ID.\r\n   */\r\n  nonce?: string; // OOP3g\r\n  /**\r\n   * The initial value bytes for the object. These bytes should be used along with the nonce\r\n   * and timestamp to create the object ID. Frontdoor will use this to verify the object ID.\r\n   * After verification the bytes will be decoded into the Map or Counter objects and\r\n   * the initialValue, nonce, and initialValueEncoding will be removed.\r\n   */\r\n  initialValue?: Bufferlike; // OOP3h\r\n  /** The initial value encoding defines how the initialValue should be interpreted. */\r\n  initialValueEncoding?: Utils.Format; // OOP3i\r\n}\r\n\r\n/**\r\n * An ObjectState describes the instantaneous state of an object on a channel.\r\n * @spec OST1\r\n */\r\nexport interface ObjectState {\r\n  /** The identifier of the object. */\r\n  objectId: string; // OST2a\r\n  /** A map of serials keyed by a {@link ObjectMessage.siteCode}, representing the last operations applied to this object */\r\n  siteTimeserials: Record<string, string>; // OST2b\r\n  /** True if the object has been tombstoned. */\r\n  tombstone: boolean; // OST2c\r\n  /**\r\n   * The operation that created the object.\r\n   *\r\n   * Can be missing if create operation for the object is not known at this point.\r\n   */\r\n  createOp?: ObjectOperation; // OST2d\r\n  /**\r\n   * The data that represents the result of applying all operations to a Map object\r\n   * excluding the initial value from the create operation if it is a Map object type.\r\n   */\r\n  map?: ObjectsMap; // OST2e\r\n  /**\r\n   * The data that represents the result of applying all operations to a Counter object\r\n   * excluding the initial value from the create operation if it is a Counter object type.\r\n   */\r\n  counter?: ObjectsCounter; // OST2f\r\n}\r\n\r\n// TODO: tidy up encoding/decoding logic for ObjectMessage:\r\n// Should have separate WireObjectMessage with the correct types received from the server, do the necessary encoding/decoding there.\r\n// For reference, see WireMessage and WirePresenceMessage\r\n/**\r\n * An individual object message to be sent or received via the Ably Realtime service.\r\n * @spec OM1\r\n * @internal\r\n */\r\nexport class ObjectMessage {\r\n  id?: string; // OM2a\r\n  clientId?: string; // OM2b\r\n  connectionId?: string; // OM2c\r\n  extras?: any; // OM2d\r\n  timestamp?: number; // OM2e\r\n  /**\r\n   * Describes an operation to be applied to an object.\r\n   *\r\n   * Mutually exclusive with the `object` field. This field is only set on object messages if the `action` field of the `ProtocolMessage` encapsulating it is `OBJECT`.\r\n   */\r\n  operation?: ObjectOperation; // OM2f\r\n  /**\r\n   * Describes the instantaneous state of an object.\r\n   *\r\n   * Mutually exclusive with the `operation` field. This field is only set on object messages if the `action` field of the `ProtocolMessage` encapsulating it is `OBJECT_SYNC`.\r\n   */\r\n  object?: ObjectState; // OM2g\r\n  /** An opaque string that uniquely identifies this object message. */\r\n  serial?: string; // OM2h\r\n  /** An opaque string used as a key to update the map of serial values on an object. */\r\n  siteCode?: string; // OM2i\r\n\r\n  constructor(\r\n    private _utils: typeof Utils,\r\n    private _messageEncoding: typeof MessageEncoding,\r\n  ) {}\r\n\r\n  /**\r\n   * Protocol agnostic encoding of the object message's data entries.\r\n   * Mutates the provided ObjectMessage.\r\n   *\r\n   * Uses encoding functions from regular `Message` processing.\r\n   *\r\n   * @spec OM4\r\n   */\r\n  static encode(message: ObjectMessage, client: BaseClient): ObjectMessage {\r\n    const encodeInitialValueFn: EncodeInitialValueFunction = (data, encoding) => {\r\n      const isNativeDataType =\r\n        typeof data == 'string' ||\r\n        typeof data == 'number' ||\r\n        typeof data == 'boolean' ||\r\n        client.Platform.BufferUtils.isBuffer(data) ||\r\n        data === null ||\r\n        data === undefined;\r\n\r\n      const { data: encodedData, encoding: newEncoding } = client.MessageEncoding.encodeData(\r\n        data,\r\n        encoding,\r\n        isNativeDataType,\r\n      );\r\n\r\n      return {\r\n        data: encodedData,\r\n        encoding: newEncoding,\r\n      };\r\n    };\r\n\r\n    const encodeObjectDataFn: EncodeObjectDataFunction = (data) => {\r\n      // TODO: support encoding JSON objects as a JSON string on \"string\" property with an encoding of \"json\"\r\n      // https://ably.atlassian.net/browse/PUB-1667\r\n      // for now just return values as they are\r\n\r\n      return data;\r\n    };\r\n\r\n    message.operation = message.operation\r\n      ? ObjectMessage._encodeObjectOperation(message.operation, encodeObjectDataFn, encodeInitialValueFn)\r\n      : undefined;\r\n    message.object = message.object\r\n      ? ObjectMessage._encodeObjectState(message.object, encodeObjectDataFn, encodeInitialValueFn)\r\n      : undefined;\r\n\r\n    return message;\r\n  }\r\n\r\n  /**\r\n   * Mutates the provided ObjectMessage and decodes all data entries in the message.\r\n   *\r\n   * Format is used to decode the bytes value as it's implicitly encoded depending on the protocol used:\r\n   * - json: bytes are base64 encoded string\r\n   * - msgpack: bytes have a binary representation and don't need to be decoded\r\n   *\r\n   * @spec OM5\r\n   */\r\n  static async decode(\r\n    message: ObjectMessage,\r\n    client: BaseClient,\r\n    logger: Logger,\r\n    LoggerClass: typeof Logger,\r\n    utils: typeof Utils,\r\n    format: Utils.Format | undefined,\r\n  ): Promise<void> {\r\n    // TODO: decide how to handle individual errors from decoding values. currently we throw first ever error we get\r\n\r\n    try {\r\n      if (message.object?.map?.entries) {\r\n        await ObjectMessage._decodeMapEntries(message.object.map.entries, client, format);\r\n      }\r\n\r\n      if (message.object?.createOp?.map?.entries) {\r\n        await ObjectMessage._decodeMapEntries(message.object.createOp.map.entries, client, format);\r\n      }\r\n\r\n      if (message.object?.createOp?.mapOp?.data) {\r\n        await ObjectMessage._decodeObjectData(message.object.createOp.mapOp.data, client, format);\r\n      }\r\n\r\n      if (message.operation?.map?.entries) {\r\n        await ObjectMessage._decodeMapEntries(message.operation.map.entries, client, format);\r\n      }\r\n\r\n      if (message.operation?.mapOp?.data) {\r\n        await ObjectMessage._decodeObjectData(message.operation.mapOp.data, client, format);\r\n      }\r\n    } catch (error) {\r\n      LoggerClass.logAction(logger, LoggerClass.LOG_ERROR, 'ObjectMessage.decode()', utils.inspectError(error));\r\n    }\r\n  }\r\n\r\n  static fromValues(\r\n    values: ObjectMessage | Record<string, unknown>,\r\n    utils: typeof Utils,\r\n    messageEncoding: typeof MessageEncoding,\r\n  ): ObjectMessage {\r\n    return Object.assign(new ObjectMessage(utils, messageEncoding), values);\r\n  }\r\n\r\n  static fromValuesArray(\r\n    values: (ObjectMessage | Record<string, unknown>)[],\r\n    utils: typeof Utils,\r\n    messageEncoding: typeof MessageEncoding,\r\n  ): ObjectMessage[] {\r\n    const count = values.length;\r\n    const result = new Array(count);\r\n\r\n    for (let i = 0; i < count; i++) {\r\n      result[i] = ObjectMessage.fromValues(values[i], utils, messageEncoding);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  static encodeInitialValue(\r\n    initialValue: Partial<ObjectOperation>,\r\n    client: BaseClient,\r\n  ): {\r\n    encodedInitialValue: Bufferlike;\r\n    format: Utils.Format;\r\n  } {\r\n    const format = client.options.useBinaryProtocol ? client.Utils.Format.msgpack : client.Utils.Format.json;\r\n\r\n    // initial value object may contain user provided data that requires an additional encoding (for example buffers as map keys).\r\n    // so we need to encode that data first as if we were sending it over the wire. we can use an ObjectMessage methods for this\r\n    const msg = ObjectMessage.fromValues({ operation: initialValue }, client.Utils, client.MessageEncoding);\r\n    ObjectMessage.encode(msg, client);\r\n    const { operation: initialValueWithDataEncoding } = ObjectMessage._encodeForWireProtocol(\r\n      msg,\r\n      client.MessageEncoding,\r\n      format,\r\n    );\r\n\r\n    // initial value field should be represented as an array of bytes over the wire. so we encode the whole object based on the client encoding format\r\n    const encodedInitialValue = client.Utils.encodeBody(initialValueWithDataEncoding, client._MsgPack, format);\r\n\r\n    // if we've got string result (for example, json encoding was used), we need to additionally convert it to bytes array with utf8 encoding\r\n    if (typeof encodedInitialValue === 'string') {\r\n      return {\r\n        encodedInitialValue: client.Platform.BufferUtils.utf8Encode(encodedInitialValue),\r\n        format,\r\n      };\r\n    }\r\n\r\n    return {\r\n      encodedInitialValue,\r\n      format,\r\n    };\r\n  }\r\n\r\n  private static async _decodeMapEntries(\r\n    mapEntries: Record<string, ObjectsMapEntry>,\r\n    client: BaseClient,\r\n    format: Utils.Format | undefined,\r\n  ): Promise<void> {\r\n    for (const entry of Object.values(mapEntries)) {\r\n      if (entry.data) {\r\n        await ObjectMessage._decodeObjectData(entry.data, client, format);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @spec OD5 */\r\n  private static async _decodeObjectData(\r\n    objectData: ObjectData,\r\n    client: BaseClient,\r\n    format: Utils.Format | undefined,\r\n  ): Promise<void> {\r\n    // TODO: support decoding JSON objects stored as a JSON string with an encoding of \"json\"\r\n    // https://ably.atlassian.net/browse/PUB-1667\r\n    // currently we check only the \"bytes\" field:\r\n    // - if connection is msgpack - \"bytes\" was received as msgpack encoded bytes, no need to decode, it's already a buffer\r\n    // - if connection is json - \"bytes\" was received as a base64 string, need to decode it to a buffer\r\n\r\n    if (format !== 'msgpack' && objectData.bytes != null) {\r\n      // OD5b2 - connection is using JSON protocol, decode bytes value\r\n      objectData.bytes = client.Platform.BufferUtils.base64Decode(String(objectData.bytes));\r\n    }\r\n  }\r\n\r\n  /** @spec OOP5 */\r\n  private static _encodeObjectOperation(\r\n    objectOperation: ObjectOperation,\r\n    encodeObjectDataFn: EncodeObjectDataFunction,\r\n    encodeInitialValueFn: EncodeInitialValueFunction,\r\n  ): ObjectOperation {\r\n    // deep copy \"objectOperation\" object so we can modify the copy here.\r\n    // buffer values won't be correctly copied, so we will need to set them again explicitly.\r\n    const objectOperationCopy = JSON.parse(JSON.stringify(objectOperation)) as ObjectOperation;\r\n\r\n    if (objectOperationCopy.mapOp?.data) {\r\n      // use original \"objectOperation\" object when encoding values, so we have access to the original buffer values.\r\n      objectOperationCopy.mapOp.data = ObjectMessage._encodeObjectData(\r\n        objectOperation.mapOp?.data!,\r\n        encodeObjectDataFn,\r\n      );\r\n    }\r\n\r\n    if (objectOperationCopy.map?.entries) {\r\n      Object.entries(objectOperationCopy.map.entries).forEach(([key, entry]) => {\r\n        if (entry.data) {\r\n          // use original \"objectOperation\" object when encoding values, so we have access to original buffer values.\r\n          entry.data = ObjectMessage._encodeObjectData(objectOperation?.map?.entries?.[key].data!, encodeObjectDataFn);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (objectOperation.initialValue) {\r\n      // use original \"objectOperation\" object so we have access to the original buffer value\r\n      const { data: encodedInitialValue } = encodeInitialValueFn(objectOperation.initialValue);\r\n      objectOperationCopy.initialValue = encodedInitialValue;\r\n    }\r\n\r\n    return objectOperationCopy;\r\n  }\r\n\r\n  private static _encodeObjectState(\r\n    objectState: ObjectState,\r\n    encodeObjectDataFn: EncodeObjectDataFunction,\r\n    encodeInitialValueFn: EncodeInitialValueFunction,\r\n  ): ObjectState {\r\n    // deep copy \"objectState\" object so we can modify the copy here.\r\n    // buffer values won't be correctly copied, so we will need to set them again explicitly.\r\n    const objectStateCopy = JSON.parse(JSON.stringify(objectState)) as ObjectState;\r\n\r\n    if (objectStateCopy.map?.entries) {\r\n      Object.entries(objectStateCopy.map.entries).forEach(([key, entry]) => {\r\n        if (entry.data) {\r\n          // use original \"objectState\" object when encoding values, so we have access to original buffer values.\r\n          entry.data = ObjectMessage._encodeObjectData(objectState?.map?.entries?.[key].data!, encodeObjectDataFn);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (objectStateCopy.createOp) {\r\n      // use original \"objectState\" object when encoding values, so we have access to original buffer values.\r\n      objectStateCopy.createOp = ObjectMessage._encodeObjectOperation(\r\n        objectState.createOp!,\r\n        encodeObjectDataFn,\r\n        encodeInitialValueFn,\r\n      );\r\n    }\r\n\r\n    return objectStateCopy;\r\n  }\r\n\r\n  /** @spec OD4 */\r\n  private static _encodeObjectData(data: ObjectData, encodeFn: EncodeObjectDataFunction): ObjectData {\r\n    const encodedData = encodeFn(data);\r\n    return encodedData;\r\n  }\r\n\r\n  /**\r\n   * Encodes operation and object fields of the ObjectMessage. Does not mutate the provided ObjectMessage.\r\n   *\r\n   * Uses encoding functions from regular `Message` processing.\r\n   */\r\n  private static _encodeForWireProtocol(\r\n    message: ObjectMessage,\r\n    messageEncoding: typeof MessageEncoding,\r\n    format: Utils.Format,\r\n  ): {\r\n    operation?: ObjectOperation;\r\n    objectState?: ObjectState;\r\n  } {\r\n    const encodeInitialValueFn: EncodeInitialValueFunction = (data, encoding) => {\r\n      // OOP5a1, OOP5b1 - initialValue encoded based on the protocol used\r\n      const { data: encodedData, encoding: newEncoding } = messageEncoding.encodeDataForWire(data, encoding, format);\r\n      return {\r\n        data: encodedData,\r\n        encoding: newEncoding,\r\n      };\r\n    };\r\n\r\n    const encodeObjectDataFn: EncodeObjectDataFunction = (data) => {\r\n      // TODO: support encoding JSON objects as a JSON string on \"string\" property with an encoding of \"json\"\r\n      // https://ably.atlassian.net/browse/PUB-1667\r\n      // currently we check only the \"bytes\" field:\r\n      // - if connection is msgpack - \"bytes\" will will be sent as msgpack bytes, no need to encode here\r\n      // - if connection is json - \"bytes\" will be encoded as a base64 string\r\n\r\n      let encodedBytes: any = data.bytes;\r\n      if (data.bytes != null) {\r\n        // OD4c2, OD4d2\r\n        const result = messageEncoding.encodeDataForWire(data.bytes, data.encoding, format);\r\n        encodedBytes = result.data;\r\n        // no need to change the encoding\r\n      }\r\n\r\n      return {\r\n        ...data,\r\n        bytes: encodedBytes,\r\n      };\r\n    };\r\n\r\n    const encodedOperation = message.operation\r\n      ? ObjectMessage._encodeObjectOperation(message.operation, encodeObjectDataFn, encodeInitialValueFn)\r\n      : undefined;\r\n    const encodedObjectState = message.object\r\n      ? ObjectMessage._encodeObjectState(message.object, encodeObjectDataFn, encodeInitialValueFn)\r\n      : undefined;\r\n\r\n    return {\r\n      operation: encodedOperation,\r\n      objectState: encodedObjectState,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Overload toJSON() to intercept JSON.stringify().\r\n   *\r\n   * This will prepare the message to be transmitted over the wire to Ably.\r\n   * It will encode the data payload according to the wire protocol used on the client.\r\n   * It will transform any client-side enum string representations into their corresponding numbers, if needed (like \"action\" fields).\r\n   */\r\n  toJSON(): {\r\n    id?: string;\r\n    clientId?: string;\r\n    operation?: ObjectOperation;\r\n    object?: ObjectState;\r\n    extras?: any;\r\n  } {\r\n    // we can infer the format used by client by inspecting with what arguments this method was called.\r\n    // if JSON protocol is being used, the JSON.stringify() will be called and this toJSON() method will have a non-empty arguments list.\r\n    // MSGPack protocol implementation also calls toJSON(), but with an empty arguments list.\r\n    const format = arguments.length > 0 ? this._utils.Format.json : this._utils.Format.msgpack;\r\n    const { operation, objectState } = ObjectMessage._encodeForWireProtocol(this, this._messageEncoding, format);\r\n\r\n    return {\r\n      id: this.id,\r\n      clientId: this.clientId,\r\n      operation,\r\n      object: objectState,\r\n      extras: this.extras,\r\n    };\r\n  }\r\n\r\n  toString(): string {\r\n    let result = '[ObjectMessage';\r\n\r\n    if (this.id) result += '; id=' + this.id;\r\n    if (this.timestamp) result += '; timestamp=' + this.timestamp;\r\n    if (this.clientId) result += '; clientId=' + this.clientId;\r\n    if (this.connectionId) result += '; connectionId=' + this.connectionId;\r\n    // TODO: prettify output for operation and object and encode buffers.\r\n    // see examples for data in Message and PresenceMessage\r\n    if (this.operation) result += '; operation=' + JSON.stringify(this.operation);\r\n    if (this.object) result += '; object=' + JSON.stringify(this.object);\r\n    if (this.extras) result += '; extras=' + JSON.stringify(this.extras);\r\n    if (this.serial) result += '; serial=' + this.serial;\r\n    if (this.siteCode) result += '; siteCode=' + this.siteCode;\r\n\r\n    result += ']';\r\n\r\n    return result;\r\n  }\r\n\r\n  /** @spec OM3 */\r\n  getMessageSize(): number {\r\n    let size = 0;\r\n\r\n    // OM3a\r\n    size += this.clientId?.length ?? 0; // OM3f\r\n    if (this.operation) {\r\n      size += this._getObjectOperationSize(this.operation); // OM3b\r\n    }\r\n    if (this.object) {\r\n      size += this._getObjectStateSize(this.object); // OM3c\r\n    }\r\n    if (this.extras) {\r\n      size += JSON.stringify(this.extras).length; // OM3d\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  /** @spec OOP4 */\r\n  private _getObjectOperationSize(operation: ObjectOperation): number {\r\n    let size = 0;\r\n\r\n    // OOP4a\r\n    if (operation.mapOp) {\r\n      size += this._getMapOpSize(operation.mapOp); // OOP4b\r\n    }\r\n    if (operation.counterOp) {\r\n      size += this._getCounterOpSize(operation.counterOp); // OOP4c\r\n    }\r\n    if (operation.map) {\r\n      size += this._getObjectMapSize(operation.map); // OOP4d\r\n    }\r\n    if (operation.counter) {\r\n      size += this._getObjectCounterSize(operation.counter); // OOP4e\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  /** @spec OST3 */\r\n  private _getObjectStateSize(obj: ObjectState): number {\r\n    let size = 0;\r\n\r\n    // OST3a\r\n    if (obj.map) {\r\n      size += this._getObjectMapSize(obj.map); // OST3b\r\n    }\r\n    if (obj.counter) {\r\n      size += this._getObjectCounterSize(obj.counter); // OST3c\r\n    }\r\n    if (obj.createOp) {\r\n      size += this._getObjectOperationSize(obj.createOp); // OST3d\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  /** @spec OMP4 */\r\n  private _getObjectMapSize(map: ObjectsMap): number {\r\n    let size = 0;\r\n\r\n    // OMP4a\r\n    Object.entries(map.entries ?? {}).forEach(([key, entry]) => {\r\n      size += key?.length ?? 0; // OMP4a1\r\n      if (entry) {\r\n        size += this._getMapEntrySize(entry); // OMP4a2\r\n      }\r\n    });\r\n\r\n    return size;\r\n  }\r\n\r\n  /** @spec OCN3 */\r\n  private _getObjectCounterSize(counter: ObjectsCounter): number {\r\n    // OCN3b\r\n    if (counter.count == null) {\r\n      return 0;\r\n    }\r\n\r\n    // OCN3a\r\n    return 8;\r\n  }\r\n\r\n  /** @spec OME3 */\r\n  private _getMapEntrySize(entry: ObjectsMapEntry): number {\r\n    let size = 0;\r\n\r\n    // OME3a\r\n    if (entry.data) {\r\n      size += this._getObjectDataSize(entry.data); // OME3b\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  /** @spec OMO3 */\r\n  private _getMapOpSize(mapOp: ObjectsMapOp): number {\r\n    let size = 0;\r\n\r\n    // OMO3a\r\n    size += mapOp.key?.length ?? 0; // OMO3d\r\n    if (mapOp.data) {\r\n      size += this._getObjectDataSize(mapOp.data); // OMO3b\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  /** @spec OCO3 */\r\n  private _getCounterOpSize(operation: ObjectsCounterOp): number {\r\n    // OCO3b\r\n    if (operation.amount == null) {\r\n      return 0;\r\n    }\r\n\r\n    // OCO3a\r\n    return 8;\r\n  }\r\n\r\n  /** @spec OD3 */\r\n  private _getObjectDataSize(data: ObjectData): number {\r\n    let size = 0;\r\n\r\n    // OD3a\r\n    if (data.boolean != null) {\r\n      size += this._utils.dataSizeBytes(data.boolean); // OD3b\r\n    }\r\n    if (data.bytes != null) {\r\n      size += this._utils.dataSizeBytes(data.bytes); // OD3c\r\n    }\r\n    if (data.number != null) {\r\n      size += this._utils.dataSizeBytes(data.number); // OD3d\r\n    }\r\n    if (data.string != null) {\r\n      size += this._utils.dataSizeBytes(data.string); // OD3e\r\n    }\r\n\r\n    return size;\r\n  }\r\n}\r\n", "import type BaseClient from 'common/lib/client/baseclient';\r\nimport type EventEmitter from 'common/lib/util/eventemitter';\r\nimport { ObjectMessage, ObjectOperation, ObjectState } from './objectmessage';\r\nimport { Objects } from './objects';\r\n\r\nexport enum LiveObjectSubscriptionEvent {\r\n  updated = 'updated',\r\n}\r\n\r\nexport interface LiveObjectData {\r\n  data: any;\r\n}\r\n\r\nexport interface LiveObjectUpdate {\r\n  update: any;\r\n}\r\n\r\nexport interface LiveObjectUpdateNoop {\r\n  // have optional update field with undefined type so it's not possible to create a noop object with a meaningful update property.\r\n  update?: undefined;\r\n  noop: true;\r\n}\r\n\r\nexport interface SubscribeResponse {\r\n  unsubscribe(): void;\r\n}\r\n\r\nexport enum LiveObjectLifecycleEvent {\r\n  deleted = 'deleted',\r\n}\r\n\r\nexport type LiveObjectLifecycleEventCallback = () => void;\r\n\r\nexport interface OnLiveObjectLifecycleEventResponse {\r\n  off(): void;\r\n}\r\n\r\nexport abstract class LiveObject<\r\n  TData extends LiveObjectData = LiveObjectData,\r\n  TUpdate extends LiveObjectUpdate = LiveObjectUpdate,\r\n> {\r\n  protected _client: BaseClient;\r\n  protected _subscriptions: EventEmitter;\r\n  protected _lifecycleEvents: EventEmitter;\r\n  protected _objectId: string;\r\n  /**\r\n   * Represents an aggregated value for an object, which combines the initial value for an object from the create operation,\r\n   * and all object operations applied to the object.\r\n   */\r\n  protected _dataRef: TData;\r\n  protected _siteTimeserials: Record<string, string>;\r\n  protected _createOperationIsMerged: boolean;\r\n  private _tombstone: boolean;\r\n  /**\r\n   * Even though the {@link ObjectMessage.serial} value from the operation that deleted the object contains the timestamp value,\r\n   * the serial should be treated as an opaque string on the client, meaning we should not attempt to parse it.\r\n   *\r\n   * Therefore, we need to set our own timestamp using local clock when the object is deleted client-side.\r\n   * Strictly speaking, this does make an assumption about the client clock not being too heavily skewed behind the server,\r\n   * but it is an acceptable compromise for the time being, as the likelihood of encountering a race here is pretty low given the grace periods we use.\r\n   */\r\n  private _tombstonedAt: number | undefined;\r\n\r\n  protected constructor(\r\n    protected _objects: Objects,\r\n    objectId: string,\r\n  ) {\r\n    this._client = this._objects.getClient();\r\n    this._subscriptions = new this._client.EventEmitter(this._client.logger);\r\n    this._lifecycleEvents = new this._client.EventEmitter(this._client.logger);\r\n    this._objectId = objectId;\r\n    this._dataRef = this._getZeroValueData();\r\n    // use empty map of serials by default, so any future operation can be applied to this object\r\n    this._siteTimeserials = {};\r\n    this._createOperationIsMerged = false;\r\n    this._tombstone = false;\r\n  }\r\n\r\n  subscribe(listener: (update: TUpdate) => void): SubscribeResponse {\r\n    this._objects.throwIfInvalidAccessApiConfiguration();\r\n\r\n    this._subscriptions.on(LiveObjectSubscriptionEvent.updated, listener);\r\n\r\n    const unsubscribe = () => {\r\n      this._subscriptions.off(LiveObjectSubscriptionEvent.updated, listener);\r\n    };\r\n\r\n    return { unsubscribe };\r\n  }\r\n\r\n  unsubscribe(listener: (update: TUpdate) => void): void {\r\n    // this public API method can be called without specific configuration, so checking for invalid settings is unnecessary.\r\n\r\n    // current implementation of the EventEmitter will remove all listeners if .off is called without arguments or with nullish arguments.\r\n    // or when called with just an event argument, it will remove all listeners for the event.\r\n    // thus we need to check that listener does actually exist before calling .off.\r\n    if (this._client.Utils.isNil(listener)) {\r\n      return;\r\n    }\r\n\r\n    this._subscriptions.off(LiveObjectSubscriptionEvent.updated, listener);\r\n  }\r\n\r\n  unsubscribeAll(): void {\r\n    // this public API method can be called without specific configuration, so checking for invalid settings is unnecessary.\r\n    this._subscriptions.off(LiveObjectSubscriptionEvent.updated);\r\n  }\r\n\r\n  on(event: LiveObjectLifecycleEvent, callback: LiveObjectLifecycleEventCallback): OnLiveObjectLifecycleEventResponse {\r\n    // this public API method can be called without specific configuration, so checking for invalid settings is unnecessary.\r\n    this._lifecycleEvents.on(event, callback);\r\n\r\n    const off = () => {\r\n      this._lifecycleEvents.off(event, callback);\r\n    };\r\n\r\n    return { off };\r\n  }\r\n\r\n  off(event: LiveObjectLifecycleEvent, callback: LiveObjectLifecycleEventCallback): void {\r\n    // this public API method can be called without specific configuration, so checking for invalid settings is unnecessary.\r\n\r\n    // prevent accidentally calling .off without any arguments on an EventEmitter and removing all callbacks\r\n    if (this._client.Utils.isNil(event) && this._client.Utils.isNil(callback)) {\r\n      return;\r\n    }\r\n\r\n    this._lifecycleEvents.off(event, callback);\r\n  }\r\n\r\n  offAll(): void {\r\n    // this public API method can be called without specific configuration, so checking for invalid settings is unnecessary.\r\n    this._lifecycleEvents.off();\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  getObjectId(): string {\r\n    return this._objectId;\r\n  }\r\n\r\n  /**\r\n   * Emits the {@link LiveObjectSubscriptionEvent.updated} event with provided update object if it isn't a noop.\r\n   *\r\n   * @internal\r\n   */\r\n  notifyUpdated(update: TUpdate | LiveObjectUpdateNoop): void {\r\n    // should not emit update event if update was noop\r\n    if ((update as LiveObjectUpdateNoop).noop) {\r\n      return;\r\n    }\r\n\r\n    this._subscriptions.emit(LiveObjectSubscriptionEvent.updated, update);\r\n  }\r\n\r\n  /**\r\n   * Clears the object's data, cancels any buffered operations and sets the tombstone flag to `true`.\r\n   *\r\n   * @internal\r\n   */\r\n  tombstone(): TUpdate {\r\n    this._tombstone = true;\r\n    this._tombstonedAt = Date.now();\r\n    const update = this.clearData();\r\n    this._lifecycleEvents.emit(LiveObjectLifecycleEvent.deleted);\r\n\r\n    return update;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isTombstoned(): boolean {\r\n    return this._tombstone;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  tombstonedAt(): number | undefined {\r\n    return this._tombstonedAt;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  clearData(): TUpdate {\r\n    const previousDataRef = this._dataRef;\r\n    this._dataRef = this._getZeroValueData();\r\n    return this._updateFromDataDiff(previousDataRef, this._dataRef);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the given serial indicates that the operation to which it belongs should be applied to the object.\r\n   *\r\n   * An operation should be applied if its serial is strictly greater than the serial in the `siteTimeserials` map for the same site.\r\n   * If `siteTimeserials` map does not contain a serial for the same site, the operation should be applied.\r\n   */\r\n  protected _canApplyOperation(opSerial: string | undefined, opSiteCode: string | undefined): boolean {\r\n    if (!opSerial) {\r\n      throw new this._client.ErrorInfo(`Invalid serial: ${opSerial}`, 92000, 500);\r\n    }\r\n\r\n    if (!opSiteCode) {\r\n      throw new this._client.ErrorInfo(`Invalid site code: ${opSiteCode}`, 92000, 500);\r\n    }\r\n\r\n    const siteSerial = this._siteTimeserials[opSiteCode];\r\n    return !siteSerial || opSerial > siteSerial;\r\n  }\r\n\r\n  protected _applyObjectDelete(): TUpdate {\r\n    return this.tombstone();\r\n  }\r\n\r\n  /**\r\n   * Apply object operation message on this LiveObject.\r\n   *\r\n   * @internal\r\n   */\r\n  abstract applyOperation(op: ObjectOperation, msg: ObjectMessage): void;\r\n  /**\r\n   * Overrides internal data for this LiveObject with data from the given object state.\r\n   * Provided object state should hold a valid data for current LiveObject, e.g. counter data for LiveCounter, map data for LiveMap.\r\n   *\r\n   * Object states are received during sync sequence, and sync sequence is a source of truth for the current state of the objects,\r\n   * so we can use the data received from the sync sequence directly and override any data values or site serials this LiveObject has\r\n   * without the need to merge them.\r\n   *\r\n   * Returns an update object that describes the changes applied based on the object's previous value.\r\n   *\r\n   * @internal\r\n   */\r\n  abstract overrideWithObjectState(objectState: ObjectState): TUpdate | LiveObjectUpdateNoop;\r\n  /**\r\n   * @internal\r\n   */\r\n  abstract onGCInterval(): void;\r\n\r\n  protected abstract _getZeroValueData(): TData;\r\n  /**\r\n   * Calculate the update object based on the current LiveObject data and incoming new data.\r\n   */\r\n  protected abstract _updateFromDataDiff(prevDataRef: TData, newDataRef: TData): TUpdate;\r\n  /**\r\n   * Merges the initial data from the create operation into the LiveObject.\r\n   *\r\n   * Client SDKs do not need to keep around the object operation that created the object,\r\n   * so we can merge the initial data the first time we receive it for the object,\r\n   * and work with aggregated value after that.\r\n   *\r\n   * This saves us from needing to merge the initial value with operations applied to\r\n   * the object every time the object is read.\r\n   */\r\n  protected abstract _mergeInitialDataFromCreateOperation(objectOperation: ObjectOperation): TUpdate;\r\n}\r\n", "import type BaseClient from 'common/lib/client/baseclient';\r\nimport type Platform from 'common/platform';\r\nimport type { Bufferlike } from 'common/platform';\r\n\r\nexport type LiveObjectType = 'map' | 'counter';\r\n\r\n/**\r\n * Represents a parsed object id.\r\n *\r\n * @internal\r\n */\r\nexport class ObjectId {\r\n  private constructor(\r\n    readonly type: LiveObjectType,\r\n    readonly hash: string,\r\n    readonly msTimestamp: number,\r\n  ) {}\r\n\r\n  static fromInitialValue(\r\n    platform: typeof Platform,\r\n    objectType: LiveObjectType,\r\n    encodedInitialValue: Bufferlike,\r\n    nonce: string,\r\n    msTimestamp: number,\r\n  ): ObjectId {\r\n    const valueForHashBuffer = platform.BufferUtils.concat([\r\n      encodedInitialValue,\r\n      platform.BufferUtils.utf8Encode(':'),\r\n      platform.BufferUtils.utf8Encode(nonce),\r\n    ]);\r\n    const hashBuffer = platform.BufferUtils.sha256(valueForHashBuffer);\r\n    const hash = platform.BufferUtils.base64UrlEncode(hashBuffer);\r\n\r\n    return new ObjectId(objectType, hash, msTimestamp);\r\n  }\r\n\r\n  /**\r\n   * Create ObjectId instance from hashed object id string.\r\n   */\r\n  static fromString(client: BaseClient, objectId: string | null | undefined): ObjectId {\r\n    if (client.Utils.isNil(objectId)) {\r\n      throw new client.ErrorInfo('Invalid object id string', 92000, 500);\r\n    }\r\n\r\n    // RTO6b1\r\n    const [type, rest] = objectId.split(':');\r\n    if (!type || !rest) {\r\n      throw new client.ErrorInfo('Invalid object id string', 92000, 500);\r\n    }\r\n\r\n    if (!['map', 'counter'].includes(type)) {\r\n      throw new client.ErrorInfo(`Invalid object type in object id: ${objectId}`, 92000, 500);\r\n    }\r\n\r\n    const [hash, msTimestamp] = rest.split('@');\r\n    if (!hash || !msTimestamp) {\r\n      throw new client.ErrorInfo('Invalid object id string', 92000, 500);\r\n    }\r\n\r\n    if (!Number.isInteger(Number.parseInt(msTimestamp))) {\r\n      throw new client.ErrorInfo('Invalid object id string', 92000, 500);\r\n    }\r\n\r\n    return new ObjectId(type as LiveObjectType, hash, Number.parseInt(msTimestamp));\r\n  }\r\n\r\n  toString(): string {\r\n    return `${this.type}:${this.hash}@${this.msTimestamp}`;\r\n  }\r\n}\r\n", "import { LiveObject, LiveObjectData, LiveObjectUpdate, LiveObjectUpdateNoop } from './liveobject';\r\nimport { ObjectId } from './objectid';\r\nimport { ObjectMessage, ObjectOperation, ObjectOperationAction, ObjectsCounterOp, ObjectState } from './objectmessage';\r\nimport { Objects } from './objects';\r\n\r\nexport interface LiveCounterData extends LiveObjectData {\r\n  data: number; // RTLC3\r\n}\r\n\r\nexport interface LiveCounterUpdate extends LiveObjectUpdate {\r\n  update: { amount: number };\r\n}\r\n\r\n/** @spec RTLC1, RTLC2 */\r\nexport class LiveCounter extends LiveObject<LiveCounterData, LiveCounterUpdate> {\r\n  /**\r\n   * Returns a {@link LiveCounter} instance with a 0 value.\r\n   *\r\n   * @internal\r\n   * @spec RTLC4\r\n   */\r\n  static zeroValue(objects: Objects, objectId: string): LiveCounter {\r\n    return new LiveCounter(objects, objectId);\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link LiveCounter} instance based on the provided object state.\r\n   * The provided object state must hold a valid counter object data.\r\n   *\r\n   * @internal\r\n   */\r\n  static fromObjectState(objects: Objects, objectState: ObjectState): LiveCounter {\r\n    const obj = new LiveCounter(objects, objectState.objectId);\r\n    obj.overrideWithObjectState(objectState);\r\n    return obj;\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link LiveCounter} instance based on the provided COUNTER_CREATE object operation.\r\n   * The provided object operation must hold a valid counter object data.\r\n   *\r\n   * @internal\r\n   */\r\n  static fromObjectOperation(objects: Objects, objectOperation: ObjectOperation): LiveCounter {\r\n    const obj = new LiveCounter(objects, objectOperation.objectId);\r\n    obj._mergeInitialDataFromCreateOperation(objectOperation);\r\n    return obj;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  static createCounterIncMessage(objects: Objects, objectId: string, amount: number): ObjectMessage {\r\n    const client = objects.getClient();\r\n\r\n    if (typeof amount !== 'number' || !Number.isFinite(amount)) {\r\n      throw new client.ErrorInfo('Counter value increment should be a valid number', 40003, 400);\r\n    }\r\n\r\n    const msg = ObjectMessage.fromValues(\r\n      {\r\n        operation: {\r\n          action: ObjectOperationAction.COUNTER_INC,\r\n          objectId,\r\n          counterOp: { amount },\r\n        } as ObjectOperation,\r\n      },\r\n      client.Utils,\r\n      client.MessageEncoding,\r\n    );\r\n\r\n    return msg;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  static async createCounterCreateMessage(objects: Objects, count?: number): Promise<ObjectMessage> {\r\n    const client = objects.getClient();\r\n\r\n    if (count !== undefined && (typeof count !== 'number' || !Number.isFinite(count))) {\r\n      throw new client.ErrorInfo('Counter value should be a valid number', 40003, 400);\r\n    }\r\n\r\n    const initialValueObj = LiveCounter.createInitialValueObject(count);\r\n    const { encodedInitialValue, format } = ObjectMessage.encodeInitialValue(initialValueObj, client);\r\n    const nonce = client.Utils.cheapRandStr();\r\n    const msTimestamp = await client.getTimestamp(true);\r\n\r\n    const objectId = ObjectId.fromInitialValue(\r\n      client.Platform,\r\n      'counter',\r\n      encodedInitialValue,\r\n      nonce,\r\n      msTimestamp,\r\n    ).toString();\r\n\r\n    const msg = ObjectMessage.fromValues(\r\n      {\r\n        operation: {\r\n          ...initialValueObj,\r\n          action: ObjectOperationAction.COUNTER_CREATE,\r\n          objectId,\r\n          nonce,\r\n          initialValue: encodedInitialValue,\r\n          initialValueEncoding: format,\r\n        } as ObjectOperation,\r\n      },\r\n      client.Utils,\r\n      client.MessageEncoding,\r\n    );\r\n\r\n    return msg;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  static createInitialValueObject(count?: number): Pick<ObjectOperation, 'counter'> {\r\n    return {\r\n      counter: {\r\n        count: count ?? 0,\r\n      },\r\n    };\r\n  }\r\n\r\n  /** @spec RTLC5 */\r\n  value(): number {\r\n    this._objects.throwIfInvalidAccessApiConfiguration(); // RTLC5a, RTLC5b\r\n    return this._dataRef.data; // RTLC5c\r\n  }\r\n\r\n  /**\r\n   * Send a COUNTER_INC operation to the realtime system to increment a value on this LiveCounter object.\r\n   *\r\n   * This does not modify the underlying data of this LiveCounter object. Instead, the change will be applied when\r\n   * the published COUNTER_INC operation is echoed back to the client and applied to the object following the regular\r\n   * operation application procedure.\r\n   *\r\n   * @returns A promise which resolves upon receiving the ACK message for the published operation message.\r\n   */\r\n  async increment(amount: number): Promise<void> {\r\n    this._objects.throwIfInvalidWriteApiConfiguration();\r\n    const msg = LiveCounter.createCounterIncMessage(this._objects, this.getObjectId(), amount);\r\n    return this._objects.publish([msg]);\r\n  }\r\n\r\n  /**\r\n   * An alias for calling {@link LiveCounter.increment | LiveCounter.increment(-amount)}\r\n   */\r\n  async decrement(amount: number): Promise<void> {\r\n    this._objects.throwIfInvalidWriteApiConfiguration();\r\n    // do an explicit type safety check here before negating the amount value,\r\n    // so we don't unintentionally change the type sent by a user\r\n    if (typeof amount !== 'number' || !Number.isFinite(amount)) {\r\n      throw new this._client.ErrorInfo('Counter value decrement should be a valid number', 40003, 400);\r\n    }\r\n\r\n    return this.increment(-amount);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  applyOperation(op: ObjectOperation, msg: ObjectMessage): void {\r\n    if (op.objectId !== this.getObjectId()) {\r\n      throw new this._client.ErrorInfo(\r\n        `Cannot apply object operation with objectId=${op.objectId}, to this LiveCounter with objectId=${this.getObjectId()}`,\r\n        92000,\r\n        500,\r\n      );\r\n    }\r\n\r\n    const opSerial = msg.serial!;\r\n    const opSiteCode = msg.siteCode!;\r\n    if (!this._canApplyOperation(opSerial, opSiteCode)) {\r\n      this._client.Logger.logAction(\r\n        this._client.logger,\r\n        this._client.Logger.LOG_MICRO,\r\n        'LiveCounter.applyOperation()',\r\n        `skipping ${op.action} op: op serial ${opSerial.toString()} <= site serial ${this._siteTimeserials[opSiteCode]?.toString()}; objectId=${this.getObjectId()}`,\r\n      );\r\n      return;\r\n    }\r\n    // should update stored site serial immediately. doesn't matter if we successfully apply the op,\r\n    // as it's important to mark that the op was processed by the object\r\n    this._siteTimeserials[opSiteCode] = opSerial;\r\n\r\n    if (this.isTombstoned()) {\r\n      // this object is tombstoned so the operation cannot be applied\r\n      return;\r\n    }\r\n\r\n    let update: LiveCounterUpdate | LiveObjectUpdateNoop;\r\n    switch (op.action) {\r\n      case ObjectOperationAction.COUNTER_CREATE:\r\n        update = this._applyCounterCreate(op);\r\n        break;\r\n\r\n      case ObjectOperationAction.COUNTER_INC:\r\n        if (this._client.Utils.isNil(op.counterOp)) {\r\n          this._throwNoPayloadError(op);\r\n          // leave an explicit return here, so that TS knows that update object is always set after the switch statement.\r\n          return;\r\n        } else {\r\n          update = this._applyCounterInc(op.counterOp);\r\n        }\r\n        break;\r\n\r\n      case ObjectOperationAction.OBJECT_DELETE:\r\n        update = this._applyObjectDelete();\r\n        break;\r\n\r\n      default:\r\n        throw new this._client.ErrorInfo(\r\n          `Invalid ${op.action} op for LiveCounter objectId=${this.getObjectId()}`,\r\n          92000,\r\n          500,\r\n        );\r\n    }\r\n\r\n    this.notifyUpdated(update);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   * @spec RTLC6\r\n   */\r\n  overrideWithObjectState(objectState: ObjectState): LiveCounterUpdate | LiveObjectUpdateNoop {\r\n    if (objectState.objectId !== this.getObjectId()) {\r\n      throw new this._client.ErrorInfo(\r\n        `Invalid object state: object state objectId=${objectState.objectId}; LiveCounter objectId=${this.getObjectId()}`,\r\n        92000,\r\n        500,\r\n      );\r\n    }\r\n\r\n    if (!this._client.Utils.isNil(objectState.createOp)) {\r\n      // it is expected that create operation can be missing in the object state, so only validate it when it exists\r\n      if (objectState.createOp.objectId !== this.getObjectId()) {\r\n        throw new this._client.ErrorInfo(\r\n          `Invalid object state: object state createOp objectId=${objectState.createOp?.objectId}; LiveCounter objectId=${this.getObjectId()}`,\r\n          92000,\r\n          500,\r\n        );\r\n      }\r\n\r\n      if (objectState.createOp.action !== ObjectOperationAction.COUNTER_CREATE) {\r\n        throw new this._client.ErrorInfo(\r\n          `Invalid object state: object state createOp action=${objectState.createOp?.action}; LiveCounter objectId=${this.getObjectId()}`,\r\n          92000,\r\n          500,\r\n        );\r\n      }\r\n    }\r\n\r\n    // object's site serials are still updated even if it is tombstoned, so always use the site serials received from the operation.\r\n    // should default to empty map if site serials do not exist on the object state, so that any future operation may be applied to this object.\r\n    this._siteTimeserials = objectState.siteTimeserials ?? {}; // RTLC6a\r\n\r\n    if (this.isTombstoned()) {\r\n      // this object is tombstoned. this is a terminal state which can't be overridden. skip the rest of object state message processing\r\n      return { noop: true };\r\n    }\r\n\r\n    const previousDataRef = this._dataRef;\r\n    if (objectState.tombstone) {\r\n      // tombstone this object and ignore the data from the object state message\r\n      this.tombstone();\r\n    } else {\r\n      // override data for this object with data from the object state\r\n      this._createOperationIsMerged = false; // RTLC6b\r\n      this._dataRef = { data: objectState.counter?.count ?? 0 }; // RTLC6c\r\n      // RTLC6d\r\n      if (!this._client.Utils.isNil(objectState.createOp)) {\r\n        this._mergeInitialDataFromCreateOperation(objectState.createOp);\r\n      }\r\n    }\r\n\r\n    // if object got tombstoned, the update object will include all data that got cleared.\r\n    // otherwise it is a diff between previous value and new value from object state.\r\n    return this._updateFromDataDiff(previousDataRef, this._dataRef);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  onGCInterval(): void {\r\n    // nothing to GC for a counter object\r\n    return;\r\n  }\r\n\r\n  /** @spec RTLC4 */\r\n  protected _getZeroValueData(): LiveCounterData {\r\n    return { data: 0 };\r\n  }\r\n\r\n  protected _updateFromDataDiff(prevDataRef: LiveCounterData, newDataRef: LiveCounterData): LiveCounterUpdate {\r\n    const counterDiff = newDataRef.data - prevDataRef.data;\r\n    return { update: { amount: counterDiff } };\r\n  }\r\n\r\n  protected _mergeInitialDataFromCreateOperation(objectOperation: ObjectOperation): LiveCounterUpdate {\r\n    // if a counter object is missing for the COUNTER_CREATE op, the initial value is implicitly 0 in this case.\r\n    // note that it is intentional to SUM the incoming count from the create op.\r\n    // if we got here, it means that current counter instance is missing the initial value in its data reference,\r\n    // which we're going to add now.\r\n    this._dataRef.data += objectOperation.counter?.count ?? 0; // RTLC6d1\r\n    this._createOperationIsMerged = true; // RTLC6d2\r\n\r\n    return { update: { amount: objectOperation.counter?.count ?? 0 } };\r\n  }\r\n\r\n  private _throwNoPayloadError(op: ObjectOperation): void {\r\n    throw new this._client.ErrorInfo(\r\n      `No payload found for ${op.action} op for LiveCounter objectId=${this.getObjectId()}`,\r\n      92000,\r\n      500,\r\n    );\r\n  }\r\n\r\n  private _applyCounterCreate(op: ObjectOperation): LiveCounterUpdate | LiveObjectUpdateNoop {\r\n    if (this._createOperationIsMerged) {\r\n      // There can't be two different create operation for the same object id, because the object id\r\n      // fully encodes that operation. This means we can safely ignore any new incoming create operations\r\n      // if we already merged it once.\r\n      this._client.Logger.logAction(\r\n        this._client.logger,\r\n        this._client.Logger.LOG_MICRO,\r\n        'LiveCounter._applyCounterCreate()',\r\n        `skipping applying COUNTER_CREATE op on a counter instance as it was already applied before; objectId=${this.getObjectId()}`,\r\n      );\r\n      return { noop: true };\r\n    }\r\n\r\n    return this._mergeInitialDataFromCreateOperation(op);\r\n  }\r\n\r\n  private _applyCounterInc(op: ObjectsCounterOp): LiveCounterUpdate {\r\n    this._dataRef.data += op.amount;\r\n    return { update: { amount: op.amount } };\r\n  }\r\n}\r\n", "import type BaseClient from 'common/lib/client/baseclient';\nimport { BatchContext } from './batchcontext';\nimport { LiveCounter } from './livecounter';\nimport { Objects } from './objects';\n\nexport class BatchContextLiveCounter {\n  private _client: BaseClient;\n\n  constructor(\n    private _batchContext: BatchContext,\n    private _objects: Objects,\n    private _counter: LiveCounter,\n  ) {\n    this._client = this._objects.getClient();\n  }\n\n  value(): number {\n    this._objects.throwIfInvalidAccessApiConfiguration();\n    this._batchContext.throwIfClosed();\n    return this._counter.value();\n  }\n\n  increment(amount: number): void {\n    this._objects.throwIfInvalidWriteApiConfiguration();\n    this._batchContext.throwIfClosed();\n    const msg = LiveCounter.createCounterIncMessage(this._objects, this._counter.getObjectId(), amount);\n    this._batchContext.queueMessage(msg);\n  }\n\n  decrement(amount: number): void {\n    this._objects.throwIfInvalidWriteApiConfiguration();\n    this._batchContext.throwIfClosed();\n    // do an explicit type safety check here before negating the amount value,\n    // so we don't unintentionally change the type sent by a user\n    if (typeof amount !== 'number') {\n      throw new this._client.ErrorInfo('Counter value decrement should be a number', 40003, 400);\n    }\n\n    this.increment(-amount);\n  }\n}\n", "var has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n\tfor (key of iter.keys()) {\n\t\tif (dequal(key, tar)) return key;\n\t}\n}\n\nexport function dequal(foo, bar) {\n\tvar ctor, len, tmp;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ctor === Set) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len;\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!bar.has(tmp)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === Map) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len[0];\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === ArrayBuffer) {\n\t\t\tfoo = new Uint8Array(foo);\n\t\t\tbar = new Uint8Array(bar);\n\t\t} else if (ctor === DataView) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ArrayBuffer.isView(foo)) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n", "export const DEFAULTS = {\r\n  gcInterval: 1000 * 60 * 5, // 5 minutes\r\n  /**\r\n   * Must be > 2 minutes to ensure we keep tombstones long enough to avoid the possibility of receiving an operation\r\n   * with an earlier serial that would not have been applied if the tombstone still existed.\r\n   *\r\n   * Applies both for map entries tombstones and object tombstones.\r\n   */\r\n  gcGracePeriod: 1000 * 60 * 60 * 24, // 24 hours\r\n};\r\n", "import { dequal } from 'dequal';\r\n\r\nimport type { Bufferlike } from 'common/platform';\r\nimport type * as API from '../../../ably';\r\nimport { DEFAULTS } from './defaults';\r\nimport { LiveObject, LiveObjectData, LiveObjectUpdate, LiveObjectUpdateNoop } from './liveobject';\r\nimport { ObjectId } from './objectid';\r\nimport {\r\n  ObjectsMapEntry,\r\n  ObjectMessage,\r\n  ObjectOperation,\r\n  ObjectOperationAction,\r\n  ObjectsMapOp,\r\n  ObjectsMapSemantics,\r\n  ObjectState,\r\n} from './objectmessage';\r\nimport { Objects } from './objects';\r\n\r\nexport type PrimitiveObjectValue = string | number | boolean | Bufferlike;\r\n\r\nexport interface ObjectIdObjectData {\r\n  /** A reference to another object, used to support composable object structures. */\r\n  objectId: string;\r\n}\r\n\r\nexport interface ValueObjectData {\r\n  /** Can be set by the client to indicate that value in `string` or `bytes` field have an encoding. */\r\n  encoding?: string;\r\n  /** A primitive boolean leaf value in the object graph. Only one value field can be set. */\r\n  boolean?: boolean;\r\n  /** A primitive binary leaf value in the object graph. Only one value field can be set. */\r\n  bytes?: Bufferlike;\r\n  /** A primitive number leaf value in the object graph. Only one value field can be set. */\r\n  number?: number;\r\n  /** A primitive string leaf value in the object graph. Only one value field can be set. */\r\n  string?: string;\r\n}\r\n\r\nexport type ObjectData = ObjectIdObjectData | ValueObjectData;\r\n\r\nexport interface LiveMapEntry {\r\n  tombstone: boolean;\r\n  /**\r\n   * Can't use serial from the operation that deleted the entry for the same reason as for {@link LiveObject} tombstones, see explanation there.\r\n   */\r\n  tombstonedAt: number | undefined;\r\n  timeserial: string | undefined;\r\n  data: ObjectData | undefined;\r\n}\r\n\r\nexport interface LiveMapData extends LiveObjectData {\r\n  data: Map<string, LiveMapEntry>; // RTLM3\r\n}\r\n\r\nexport interface LiveMapUpdate<T extends API.LiveMapType> extends LiveObjectUpdate {\r\n  update: { [keyName in keyof T & string]?: 'updated' | 'removed' };\r\n}\r\n\r\n/** @spec RTLM1, RTLM2 */\r\nexport class LiveMap<T extends API.LiveMapType> extends LiveObject<LiveMapData, LiveMapUpdate<T>> {\r\n  constructor(\r\n    objects: Objects,\r\n    private _semantics: ObjectsMapSemantics,\r\n    objectId: string,\r\n  ) {\r\n    super(objects, objectId);\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link LiveMap} instance with an empty map data.\r\n   *\r\n   * @internal\r\n   * @spec RTLM4\r\n   */\r\n  static zeroValue<T extends API.LiveMapType>(objects: Objects, objectId: string): LiveMap<T> {\r\n    return new LiveMap<T>(objects, ObjectsMapSemantics.LWW, objectId);\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link LiveMap} instance based on the provided object state.\r\n   * The provided object state must hold a valid map object data.\r\n   *\r\n   * @internal\r\n   */\r\n  static fromObjectState<T extends API.LiveMapType>(objects: Objects, objectState: ObjectState): LiveMap<T> {\r\n    const obj = new LiveMap<T>(objects, objectState.map?.semantics!, objectState.objectId);\r\n    obj.overrideWithObjectState(objectState);\r\n    return obj;\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link LiveMap} instance based on the provided MAP_CREATE object operation.\r\n   * The provided object operation must hold a valid map object data.\r\n   *\r\n   * @internal\r\n   */\r\n  static fromObjectOperation<T extends API.LiveMapType>(\r\n    objects: Objects,\r\n    objectOperation: ObjectOperation,\r\n  ): LiveMap<T> {\r\n    const obj = new LiveMap<T>(objects, objectOperation.map?.semantics!, objectOperation.objectId);\r\n    obj._mergeInitialDataFromCreateOperation(objectOperation);\r\n    return obj;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  static createMapSetMessage<TKey extends keyof API.LiveMapType & string>(\r\n    objects: Objects,\r\n    objectId: string,\r\n    key: TKey,\r\n    value: API.LiveMapType[TKey],\r\n  ): ObjectMessage {\r\n    const client = objects.getClient();\r\n\r\n    LiveMap.validateKeyValue(objects, key, value);\r\n\r\n    let objectData: ObjectData;\r\n    if (value instanceof LiveObject) {\r\n      const typedObjectData: ObjectIdObjectData = { objectId: value.getObjectId() };\r\n      objectData = typedObjectData;\r\n    } else {\r\n      const typedObjectData: ValueObjectData = {};\r\n      if (typeof value === 'string') {\r\n        typedObjectData.string = value;\r\n      } else if (typeof value === 'number') {\r\n        typedObjectData.number = value;\r\n      } else if (typeof value === 'boolean') {\r\n        typedObjectData.boolean = value;\r\n      } else {\r\n        typedObjectData.bytes = value as Bufferlike;\r\n      }\r\n      objectData = typedObjectData;\r\n    }\r\n\r\n    const msg = ObjectMessage.fromValues(\r\n      {\r\n        operation: {\r\n          action: ObjectOperationAction.MAP_SET,\r\n          objectId,\r\n          mapOp: {\r\n            key,\r\n            data: objectData,\r\n          },\r\n        } as ObjectOperation,\r\n      },\r\n      client.Utils,\r\n      client.MessageEncoding,\r\n    );\r\n\r\n    return msg;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  static createMapRemoveMessage<TKey extends keyof API.LiveMapType & string>(\r\n    objects: Objects,\r\n    objectId: string,\r\n    key: TKey,\r\n  ): ObjectMessage {\r\n    const client = objects.getClient();\r\n\r\n    if (typeof key !== 'string') {\r\n      throw new client.ErrorInfo('Map key should be string', 40003, 400);\r\n    }\r\n\r\n    const msg = ObjectMessage.fromValues(\r\n      {\r\n        operation: {\r\n          action: ObjectOperationAction.MAP_REMOVE,\r\n          objectId,\r\n          mapOp: { key },\r\n        } as ObjectOperation,\r\n      },\r\n      client.Utils,\r\n      client.MessageEncoding,\r\n    );\r\n\r\n    return msg;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  static validateKeyValue<TKey extends keyof API.LiveMapType & string>(\r\n    objects: Objects,\r\n    key: TKey,\r\n    value: API.LiveMapType[TKey],\r\n  ): void {\r\n    const client = objects.getClient();\r\n\r\n    if (typeof key !== 'string') {\r\n      throw new client.ErrorInfo('Map key should be string', 40003, 400);\r\n    }\r\n\r\n    if (\r\n      typeof value !== 'string' &&\r\n      typeof value !== 'number' &&\r\n      typeof value !== 'boolean' &&\r\n      !client.Platform.BufferUtils.isBuffer(value) &&\r\n      !(value instanceof LiveObject)\r\n    ) {\r\n      throw new client.ErrorInfo('Map value data type is unsupported', 40013, 400); // OD4a\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  static async createMapCreateMessage(objects: Objects, entries?: API.LiveMapType): Promise<ObjectMessage> {\r\n    const client = objects.getClient();\r\n\r\n    if (entries !== undefined && (entries === null || typeof entries !== 'object')) {\r\n      throw new client.ErrorInfo('Map entries should be a key-value object', 40003, 400);\r\n    }\r\n\r\n    Object.entries(entries ?? {}).forEach(([key, value]) => LiveMap.validateKeyValue(objects, key, value));\r\n\r\n    const initialValueObj = LiveMap.createInitialValueObject(entries);\r\n    const { encodedInitialValue, format } = ObjectMessage.encodeInitialValue(initialValueObj, client);\r\n    const nonce = client.Utils.cheapRandStr();\r\n    const msTimestamp = await client.getTimestamp(true);\r\n\r\n    const objectId = ObjectId.fromInitialValue(\r\n      client.Platform,\r\n      'map',\r\n      encodedInitialValue,\r\n      nonce,\r\n      msTimestamp,\r\n    ).toString();\r\n\r\n    const msg = ObjectMessage.fromValues(\r\n      {\r\n        operation: {\r\n          ...initialValueObj,\r\n          action: ObjectOperationAction.MAP_CREATE,\r\n          objectId,\r\n          nonce,\r\n          initialValue: encodedInitialValue,\r\n          initialValueEncoding: format, // OOP5a2, OOP5b2\r\n        } as ObjectOperation,\r\n      },\r\n      client.Utils,\r\n      client.MessageEncoding,\r\n    );\r\n\r\n    return msg;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  static createInitialValueObject(entries?: API.LiveMapType): Pick<ObjectOperation, 'map'> {\r\n    const mapEntries: Record<string, ObjectsMapEntry> = {};\r\n\r\n    Object.entries(entries ?? {}).forEach(([key, value]) => {\r\n      let objectData: ObjectData;\r\n      if (value instanceof LiveObject) {\r\n        const typedObjectData: ObjectIdObjectData = { objectId: value.getObjectId() };\r\n        objectData = typedObjectData;\r\n      } else {\r\n        const typedObjectData: ValueObjectData = {};\r\n        if (typeof value === 'string') {\r\n          typedObjectData.string = value;\r\n        } else if (typeof value === 'number') {\r\n          typedObjectData.number = value;\r\n        } else if (typeof value === 'boolean') {\r\n          typedObjectData.boolean = value;\r\n        } else {\r\n          typedObjectData.bytes = value as Bufferlike;\r\n        }\r\n        objectData = typedObjectData;\r\n      }\r\n\r\n      mapEntries[key] = {\r\n        data: objectData,\r\n      };\r\n    });\r\n\r\n    return {\r\n      map: {\r\n        semantics: ObjectsMapSemantics.LWW,\r\n        entries: mapEntries,\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns the value associated with the specified key in the underlying Map object.\r\n   *\r\n   * - If this map object is tombstoned (deleted), `undefined` is returned.\r\n   * - If no entry is associated with the specified key, `undefined` is returned.\r\n   * - If map entry is tombstoned (deleted), `undefined` is returned.\r\n   * - If the value associated with the provided key is an objectId string of another LiveObject, a reference to that LiveObject\r\n   * is returned, provided it exists in the local pool and is not tombstoned. Otherwise, `undefined` is returned.\r\n   * - If the value is not an objectId, then that value is returned.\r\n   *\r\n   * @spec RTLM5, RTLM5a\r\n   */\r\n  // force the key to be of type string as we only allow strings as key in a map\r\n  get<TKey extends keyof T & string>(key: TKey): T[TKey] | undefined {\r\n    this._objects.throwIfInvalidAccessApiConfiguration(); // RTLM5b, RTLM5c\r\n\r\n    if (this.isTombstoned()) {\r\n      return undefined as T[TKey];\r\n    }\r\n\r\n    const element = this._dataRef.data.get(key);\r\n\r\n    // RTLM5d1\r\n    if (element === undefined) {\r\n      return undefined as T[TKey];\r\n    }\r\n\r\n    // RTLM5d2a\r\n    if (element.tombstone === true) {\r\n      return undefined as T[TKey];\r\n    }\r\n\r\n    // data always exists for non-tombstoned elements\r\n    return this._getResolvedValueFromObjectData(element.data!) as T[TKey];\r\n  }\r\n\r\n  size(): number {\r\n    this._objects.throwIfInvalidAccessApiConfiguration();\r\n\r\n    let size = 0;\r\n    for (const value of this._dataRef.data.values()) {\r\n      if (this._isMapEntryTombstoned(value)) {\r\n        // should not count tombstoned entries\r\n        continue;\r\n      }\r\n\r\n      size++;\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  *entries<TKey extends keyof T & string>(): IterableIterator<[TKey, T[TKey]]> {\r\n    this._objects.throwIfInvalidAccessApiConfiguration();\r\n\r\n    for (const [key, entry] of this._dataRef.data.entries()) {\r\n      if (this._isMapEntryTombstoned(entry)) {\r\n        // do not return tombstoned entries\r\n        continue;\r\n      }\r\n\r\n      // data always exists for non-tombstoned elements\r\n      const value = this._getResolvedValueFromObjectData(entry.data!) as T[TKey];\r\n      yield [key as TKey, value];\r\n    }\r\n  }\r\n\r\n  *keys<TKey extends keyof T & string>(): IterableIterator<TKey> {\r\n    for (const [key] of this.entries<TKey>()) {\r\n      yield key;\r\n    }\r\n  }\r\n\r\n  *values<TKey extends keyof T & string>(): IterableIterator<T[TKey]> {\r\n    for (const [_, value] of this.entries<TKey>()) {\r\n      yield value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a MAP_SET operation to the realtime system to set a key on this LiveMap object to a specified value.\r\n   *\r\n   * This does not modify the underlying data of this LiveMap object. Instead, the change will be applied when\r\n   * the published MAP_SET operation is echoed back to the client and applied to the object following the regular\r\n   * operation application procedure.\r\n   *\r\n   * @returns A promise which resolves upon receiving the ACK message for the published operation message.\r\n   */\r\n  async set<TKey extends keyof T & string>(key: TKey, value: T[TKey]): Promise<void> {\r\n    this._objects.throwIfInvalidWriteApiConfiguration();\r\n    const msg = LiveMap.createMapSetMessage(this._objects, this.getObjectId(), key, value);\r\n    return this._objects.publish([msg]);\r\n  }\r\n\r\n  /**\r\n   * Send a MAP_REMOVE operation to the realtime system to tombstone a key on this LiveMap object.\r\n   *\r\n   * This does not modify the underlying data of this LiveMap object. Instead, the change will be applied when\r\n   * the published MAP_REMOVE operation is echoed back to the client and applied to the object following the regular\r\n   * operation application procedure.\r\n   *\r\n   * @returns A promise which resolves upon receiving the ACK message for the published operation message.\r\n   */\r\n  async remove<TKey extends keyof T & string>(key: TKey): Promise<void> {\r\n    this._objects.throwIfInvalidWriteApiConfiguration();\r\n    const msg = LiveMap.createMapRemoveMessage(this._objects, this.getObjectId(), key);\r\n    return this._objects.publish([msg]);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  applyOperation(op: ObjectOperation, msg: ObjectMessage): void {\r\n    if (op.objectId !== this.getObjectId()) {\r\n      throw new this._client.ErrorInfo(\r\n        `Cannot apply object operation with objectId=${op.objectId}, to this LiveMap with objectId=${this.getObjectId()}`,\r\n        92000,\r\n        500,\r\n      );\r\n    }\r\n\r\n    const opSerial = msg.serial!;\r\n    const opSiteCode = msg.siteCode!;\r\n    if (!this._canApplyOperation(opSerial, opSiteCode)) {\r\n      this._client.Logger.logAction(\r\n        this._client.logger,\r\n        this._client.Logger.LOG_MICRO,\r\n        'LiveMap.applyOperation()',\r\n        `skipping ${op.action} op: op serial ${opSerial.toString()} <= site serial ${this._siteTimeserials[opSiteCode]?.toString()}; objectId=${this.getObjectId()}`,\r\n      );\r\n      return;\r\n    }\r\n    // should update stored site serial immediately. doesn't matter if we successfully apply the op,\r\n    // as it's important to mark that the op was processed by the object\r\n    this._siteTimeserials[opSiteCode] = opSerial;\r\n\r\n    if (this.isTombstoned()) {\r\n      // this object is tombstoned so the operation cannot be applied\r\n      return;\r\n    }\r\n\r\n    let update: LiveMapUpdate<T> | LiveObjectUpdateNoop;\r\n    switch (op.action) {\r\n      case ObjectOperationAction.MAP_CREATE:\r\n        update = this._applyMapCreate(op);\r\n        break;\r\n\r\n      case ObjectOperationAction.MAP_SET:\r\n        if (this._client.Utils.isNil(op.mapOp)) {\r\n          this._throwNoPayloadError(op);\r\n          // leave an explicit return here, so that TS knows that update object is always set after the switch statement.\r\n          return;\r\n        } else {\r\n          update = this._applyMapSet(op.mapOp, opSerial);\r\n        }\r\n        break;\r\n\r\n      case ObjectOperationAction.MAP_REMOVE:\r\n        if (this._client.Utils.isNil(op.mapOp)) {\r\n          this._throwNoPayloadError(op);\r\n          // leave an explicit return here, so that TS knows that update object is always set after the switch statement.\r\n          return;\r\n        } else {\r\n          update = this._applyMapRemove(op.mapOp, opSerial);\r\n        }\r\n        break;\r\n\r\n      case ObjectOperationAction.OBJECT_DELETE:\r\n        update = this._applyObjectDelete();\r\n        break;\r\n\r\n      default:\r\n        throw new this._client.ErrorInfo(\r\n          `Invalid ${op.action} op for LiveMap objectId=${this.getObjectId()}`,\r\n          92000,\r\n          500,\r\n        );\r\n    }\r\n\r\n    this.notifyUpdated(update);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   * @spec RTLM6\r\n   */\r\n  overrideWithObjectState(objectState: ObjectState): LiveMapUpdate<T> | LiveObjectUpdateNoop {\r\n    if (objectState.objectId !== this.getObjectId()) {\r\n      throw new this._client.ErrorInfo(\r\n        `Invalid object state: object state objectId=${objectState.objectId}; LiveMap objectId=${this.getObjectId()}`,\r\n        92000,\r\n        500,\r\n      );\r\n    }\r\n\r\n    if (objectState.map?.semantics !== this._semantics) {\r\n      throw new this._client.ErrorInfo(\r\n        `Invalid object state: object state map semantics=${objectState.map?.semantics}; LiveMap semantics=${this._semantics}`,\r\n        92000,\r\n        500,\r\n      );\r\n    }\r\n\r\n    if (!this._client.Utils.isNil(objectState.createOp)) {\r\n      // it is expected that create operation can be missing in the object state, so only validate it when it exists\r\n      if (objectState.createOp.objectId !== this.getObjectId()) {\r\n        throw new this._client.ErrorInfo(\r\n          `Invalid object state: object state createOp objectId=${objectState.createOp?.objectId}; LiveMap objectId=${this.getObjectId()}`,\r\n          92000,\r\n          500,\r\n        );\r\n      }\r\n\r\n      if (objectState.createOp.action !== ObjectOperationAction.MAP_CREATE) {\r\n        throw new this._client.ErrorInfo(\r\n          `Invalid object state: object state createOp action=${objectState.createOp?.action}; LiveMap objectId=${this.getObjectId()}`,\r\n          92000,\r\n          500,\r\n        );\r\n      }\r\n\r\n      if (objectState.createOp.map?.semantics !== this._semantics) {\r\n        throw new this._client.ErrorInfo(\r\n          `Invalid object state: object state createOp map semantics=${objectState.createOp.map?.semantics}; LiveMap semantics=${this._semantics}`,\r\n          92000,\r\n          500,\r\n        );\r\n      }\r\n    }\r\n\r\n    // object's site serials are still updated even if it is tombstoned, so always use the site serials received from the op.\r\n    // should default to empty map if site serials do not exist on the object state, so that any future operation may be applied to this object.\r\n    this._siteTimeserials = objectState.siteTimeserials ?? {}; // RTLM6a\r\n\r\n    if (this.isTombstoned()) {\r\n      // this object is tombstoned. this is a terminal state which can't be overridden. skip the rest of object state message processing\r\n      return { noop: true };\r\n    }\r\n\r\n    const previousDataRef = this._dataRef;\r\n    if (objectState.tombstone) {\r\n      // tombstone this object and ignore the data from the object state message\r\n      this.tombstone();\r\n    } else {\r\n      // override data for this object with data from the object state\r\n      this._createOperationIsMerged = false; // RTLM6b\r\n      this._dataRef = this._liveMapDataFromMapEntries(objectState.map?.entries ?? {}); // RTLM6c\r\n      // RTLM6d\r\n      if (!this._client.Utils.isNil(objectState.createOp)) {\r\n        this._mergeInitialDataFromCreateOperation(objectState.createOp);\r\n      }\r\n    }\r\n\r\n    // if object got tombstoned, the update object will include all data that got cleared.\r\n    // otherwise it is a diff between previous value and new value from object state.\r\n    return this._updateFromDataDiff(previousDataRef, this._dataRef);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  onGCInterval(): void {\r\n    // should remove any tombstoned entries from the underlying map data that have exceeded the GC grace period\r\n\r\n    const keysToDelete: string[] = [];\r\n    for (const [key, value] of this._dataRef.data.entries()) {\r\n      if (value.tombstone === true && Date.now() - value.tombstonedAt! >= DEFAULTS.gcGracePeriod) {\r\n        keysToDelete.push(key);\r\n      }\r\n    }\r\n\r\n    keysToDelete.forEach((x) => this._dataRef.data.delete(x));\r\n  }\r\n\r\n  /** @spec RTLM4 */\r\n  protected _getZeroValueData(): LiveMapData {\r\n    return { data: new Map<string, LiveMapEntry>() };\r\n  }\r\n\r\n  protected _updateFromDataDiff(prevDataRef: LiveMapData, newDataRef: LiveMapData): LiveMapUpdate<T> {\r\n    const update: LiveMapUpdate<T> = { update: {} };\r\n\r\n    for (const [key, currentEntry] of prevDataRef.data.entries()) {\r\n      const typedKey: keyof T & string = key;\r\n      // any non-tombstoned properties that exist on a current map, but not in the new data - got removed\r\n      if (currentEntry.tombstone === false && !newDataRef.data.has(typedKey)) {\r\n        update.update[typedKey] = 'removed';\r\n      }\r\n    }\r\n\r\n    for (const [key, newEntry] of newDataRef.data.entries()) {\r\n      const typedKey: keyof T & string = key;\r\n      if (!prevDataRef.data.has(typedKey)) {\r\n        // if property does not exist in the current map, but new data has it as a non-tombstoned property - got updated\r\n        if (newEntry.tombstone === false) {\r\n          update.update[typedKey] = 'updated';\r\n          continue;\r\n        }\r\n\r\n        // otherwise, if new data has this prop tombstoned - do nothing, as property didn't exist anyway\r\n        if (newEntry.tombstone === true) {\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // properties that exist both in current and new map data need to have their values compared to decide on the update type\r\n      const currentEntry = prevDataRef.data.get(typedKey)!;\r\n\r\n      // compare tombstones first\r\n      if (currentEntry.tombstone === true && newEntry.tombstone === false) {\r\n        // current prop is tombstoned, but new is not. it means prop was updated to a meaningful value\r\n        update.update[typedKey] = 'updated';\r\n        continue;\r\n      }\r\n      if (currentEntry.tombstone === false && newEntry.tombstone === true) {\r\n        // current prop is not tombstoned, but new is. it means prop was removed\r\n        update.update[typedKey] = 'removed';\r\n        continue;\r\n      }\r\n      if (currentEntry.tombstone === true && newEntry.tombstone === true) {\r\n        // both props are tombstoned - treat as noop, as there is no data to compare.\r\n        continue;\r\n      }\r\n\r\n      // both props exist and are not tombstoned, need to compare values with deep equals to see if it was changed\r\n      const valueChanged = !dequal(currentEntry.data, newEntry.data);\r\n      if (valueChanged) {\r\n        update.update[typedKey] = 'updated';\r\n        continue;\r\n      }\r\n    }\r\n\r\n    return update;\r\n  }\r\n\r\n  protected _mergeInitialDataFromCreateOperation(objectOperation: ObjectOperation): LiveMapUpdate<T> {\r\n    if (this._client.Utils.isNil(objectOperation.map)) {\r\n      // if a map object is missing for the MAP_CREATE op, the initial value is implicitly an empty map.\r\n      // in this case there is nothing to merge into the current map, so we can just end processing the op.\r\n      return { update: {} };\r\n    }\r\n\r\n    const aggregatedUpdate: LiveMapUpdate<T> = { update: {} };\r\n    // RTLM6d1\r\n    // in order to apply MAP_CREATE op for an existing map, we should merge their underlying entries keys.\r\n    // we can do this by iterating over entries from MAP_CREATE op and apply changes on per-key basis as if we had MAP_SET, MAP_REMOVE operations.\r\n    Object.entries(objectOperation.map.entries ?? {}).forEach(([key, entry]) => {\r\n      // for a MAP_CREATE operation we must use the serial value available on an entry, instead of a serial on a message\r\n      const opSerial = entry.timeserial;\r\n      let update: LiveMapUpdate<T> | LiveObjectUpdateNoop;\r\n      if (entry.tombstone === true) {\r\n        // RTLM6d1b - entry in MAP_CREATE op is removed, try to apply MAP_REMOVE op\r\n        update = this._applyMapRemove({ key }, opSerial);\r\n      } else {\r\n        // RTLM6d1a - entry in MAP_CREATE op is not removed, try to set it via MAP_SET op\r\n        update = this._applyMapSet({ key, data: entry.data }, opSerial);\r\n      }\r\n\r\n      // skip noop updates\r\n      if ((update as LiveObjectUpdateNoop).noop) {\r\n        return;\r\n      }\r\n\r\n      // otherwise copy update data to aggregated update\r\n      Object.assign(aggregatedUpdate.update, update.update);\r\n    });\r\n\r\n    this._createOperationIsMerged = true; // RTLM6d2\r\n\r\n    return aggregatedUpdate;\r\n  }\r\n\r\n  private _throwNoPayloadError(op: ObjectOperation): void {\r\n    throw new this._client.ErrorInfo(\r\n      `No payload found for ${op.action} op for LiveMap objectId=${this.getObjectId()}`,\r\n      92000,\r\n      500,\r\n    );\r\n  }\r\n\r\n  private _applyMapCreate(op: ObjectOperation): LiveMapUpdate<T> | LiveObjectUpdateNoop {\r\n    if (this._createOperationIsMerged) {\r\n      // There can't be two different create operation for the same object id, because the object id\r\n      // fully encodes that operation. This means we can safely ignore any new incoming create operations\r\n      // if we already merged it once.\r\n      this._client.Logger.logAction(\r\n        this._client.logger,\r\n        this._client.Logger.LOG_MICRO,\r\n        'LiveMap._applyMapCreate()',\r\n        `skipping applying MAP_CREATE op on a map instance as it was already applied before; objectId=${this.getObjectId()}`,\r\n      );\r\n      return { noop: true };\r\n    }\r\n\r\n    if (this._semantics !== op.map?.semantics) {\r\n      throw new this._client.ErrorInfo(\r\n        `Cannot apply MAP_CREATE op on LiveMap objectId=${this.getObjectId()}; map's semantics=${this._semantics}, but op expected ${op.map?.semantics}`,\r\n        92000,\r\n        500,\r\n      );\r\n    }\r\n\r\n    return this._mergeInitialDataFromCreateOperation(op);\r\n  }\r\n\r\n  /** @spec RTLM7 */\r\n  private _applyMapSet(op: ObjectsMapOp, opSerial: string | undefined): LiveMapUpdate<T> | LiveObjectUpdateNoop {\r\n    const { ErrorInfo, Utils } = this._client;\r\n\r\n    const existingEntry = this._dataRef.data.get(op.key);\r\n    // RTLM7a\r\n    if (existingEntry && !this._canApplyMapOperation(existingEntry.timeserial, opSerial)) {\r\n      // RTLM7a1 - the operation's serial <= the entry's serial, ignore the operation.\r\n      this._client.Logger.logAction(\r\n        this._client.logger,\r\n        this._client.Logger.LOG_MICRO,\r\n        'LiveMap._applyMapSet()',\r\n        `skipping update for key=\"${op.key}\": op serial ${opSerial?.toString()} <= entry serial ${existingEntry.timeserial?.toString()}; objectId=${this.getObjectId()}`,\r\n      );\r\n      return { noop: true };\r\n    }\r\n\r\n    if (\r\n      Utils.isNil(op.data) ||\r\n      (Utils.isNil(op.data.objectId) &&\r\n        Utils.isNil(op.data.boolean) &&\r\n        Utils.isNil(op.data.bytes) &&\r\n        Utils.isNil(op.data.number) &&\r\n        Utils.isNil(op.data.string))\r\n    ) {\r\n      throw new ErrorInfo(\r\n        `Invalid object data for MAP_SET op on objectId=${this.getObjectId()} on key=${op.key}`,\r\n        92000,\r\n        500,\r\n      );\r\n    }\r\n\r\n    let liveData: ObjectData;\r\n    // RTLM7c\r\n    if (!Utils.isNil(op.data.objectId)) {\r\n      liveData = { objectId: op.data.objectId } as ObjectIdObjectData;\r\n      // this MAP_SET op is setting a key to point to another object via its object id,\r\n      // but it is possible that we don't have the corresponding object in the pool yet (for example, we haven't seen the *_CREATE op for it).\r\n      // we don't want to return undefined from this map's .get() method even if we don't have the object,\r\n      // so instead we create a zero-value object for that object id if it not exists.\r\n      this._objects.getPool().createZeroValueObjectIfNotExists(op.data.objectId); // RTLM7c1\r\n    } else {\r\n      liveData = {\r\n        encoding: op.data.encoding,\r\n        boolean: op.data.boolean,\r\n        bytes: op.data.bytes,\r\n        number: op.data.number,\r\n        string: op.data.string,\r\n      } as ValueObjectData;\r\n    }\r\n\r\n    if (existingEntry) {\r\n      // RTLM7a2\r\n      existingEntry.tombstone = false; // RTLM7a2c\r\n      existingEntry.tombstonedAt = undefined;\r\n      existingEntry.timeserial = opSerial; // RTLM7a2b\r\n      existingEntry.data = liveData; // RTLM7a2a\r\n    } else {\r\n      // RTLM7b, RTLM7b1\r\n      const newEntry: LiveMapEntry = {\r\n        tombstone: false, // RTLM7b2\r\n        tombstonedAt: undefined,\r\n        timeserial: opSerial,\r\n        data: liveData,\r\n      };\r\n      this._dataRef.data.set(op.key, newEntry);\r\n    }\r\n\r\n    const update: LiveMapUpdate<T> = { update: {} };\r\n    const typedKey: keyof T & string = op.key;\r\n    update.update[typedKey] = 'updated';\r\n\r\n    return update;\r\n  }\r\n\r\n  /** @spec RTLM8 */\r\n  private _applyMapRemove(op: ObjectsMapOp, opSerial: string | undefined): LiveMapUpdate<T> | LiveObjectUpdateNoop {\r\n    const existingEntry = this._dataRef.data.get(op.key);\r\n    // RTLM8a\r\n    if (existingEntry && !this._canApplyMapOperation(existingEntry.timeserial, opSerial)) {\r\n      // RTLM8a1 - the operation's serial <= the entry's serial, ignore the operation.\r\n      this._client.Logger.logAction(\r\n        this._client.logger,\r\n        this._client.Logger.LOG_MICRO,\r\n        'LiveMap._applyMapRemove()',\r\n        `skipping remove for key=\"${op.key}\": op serial ${opSerial?.toString()} <= entry serial ${existingEntry.timeserial?.toString()}; objectId=${this.getObjectId()}`,\r\n      );\r\n      return { noop: true };\r\n    }\r\n\r\n    if (existingEntry) {\r\n      // RTLM8a2\r\n      existingEntry.tombstone = true; // RTLM8a2c\r\n      existingEntry.tombstonedAt = Date.now();\r\n      existingEntry.timeserial = opSerial; // RTLM8a2b\r\n      existingEntry.data = undefined; // RTLM8a2a\r\n    } else {\r\n      // RTLM8b, RTLM8b1\r\n      const newEntry: LiveMapEntry = {\r\n        tombstone: true, // RTLM8b2\r\n        tombstonedAt: Date.now(),\r\n        timeserial: opSerial,\r\n        data: undefined,\r\n      };\r\n      this._dataRef.data.set(op.key, newEntry);\r\n    }\r\n\r\n    const update: LiveMapUpdate<T> = { update: {} };\r\n    const typedKey: keyof T & string = op.key;\r\n    update.update[typedKey] = 'removed';\r\n\r\n    return update;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the serials of the given operation and entry indicate that\r\n   * the operation should be applied to the entry, following the CRDT semantics of this LiveMap.\r\n   * @spec RTLM9\r\n   */\r\n  private _canApplyMapOperation(mapEntrySerial: string | undefined, opSerial: string | undefined): boolean {\r\n    // for LWW CRDT semantics (the only supported LiveMap semantic) an operation\r\n    // should only be applied if its serial is strictly greater (\"after\") than an entry's serial.\r\n\r\n    if (!mapEntrySerial && !opSerial) {\r\n      // RTLM9b - if both serials are nullish or empty strings, we treat them as the \"earliest possible\" serials,\r\n      // in which case they are \"equal\", so the operation should not be applied\r\n      return false;\r\n    }\r\n\r\n    if (!mapEntrySerial) {\r\n      // RTLM9d - any operation serial is greater than non-existing entry serial\r\n      return true;\r\n    }\r\n\r\n    if (!opSerial) {\r\n      // RTLM9c - non-existing operation serial is lower than any entry serial\r\n      return false;\r\n    }\r\n\r\n    // RTLM9e - if both serials exist, compare them lexicographically\r\n    return opSerial > mapEntrySerial;\r\n  }\r\n\r\n  private _liveMapDataFromMapEntries(entries: Record<string, ObjectsMapEntry>): LiveMapData {\r\n    const liveMapData: LiveMapData = {\r\n      data: new Map<string, LiveMapEntry>(),\r\n    };\r\n\r\n    // need to iterate over entries to correctly process optional parameters\r\n    Object.entries(entries ?? {}).forEach(([key, entry]) => {\r\n      let liveData: ObjectData | undefined = undefined;\r\n\r\n      if (!this._client.Utils.isNil(entry.data)) {\r\n        if (!this._client.Utils.isNil(entry.data.objectId)) {\r\n          liveData = { objectId: entry.data.objectId } as ObjectIdObjectData;\r\n        } else {\r\n          liveData = {\r\n            encoding: entry.data.encoding,\r\n            boolean: entry.data.boolean,\r\n            bytes: entry.data.bytes,\r\n            number: entry.data.number,\r\n            string: entry.data.string,\r\n          } as ValueObjectData;\r\n        }\r\n      }\r\n\r\n      const liveDataEntry: LiveMapEntry = {\r\n        timeserial: entry.timeserial,\r\n        data: liveData,\r\n        // consider object as tombstoned only if we received an explicit flag stating that. otherwise it exists\r\n        tombstone: entry.tombstone === true,\r\n        tombstonedAt: entry.tombstone === true ? Date.now() : undefined,\r\n      };\r\n\r\n      liveMapData.data.set(key, liveDataEntry);\r\n    });\r\n\r\n    return liveMapData;\r\n  }\r\n\r\n  /**\r\n   * Returns value as is if object data stores a primitive type, or a reference to another LiveObject from the pool if it stores an objectId.\r\n   */\r\n  private _getResolvedValueFromObjectData(data: ObjectData): PrimitiveObjectValue | LiveObject | undefined {\r\n    // if object data stores one of the primitive values, just return it as is.\r\n    const asValueObject = data as ValueObjectData;\r\n    if (asValueObject.boolean !== undefined) {\r\n      return asValueObject.boolean; // RTLM5d2b\r\n    }\r\n    if (asValueObject.bytes !== undefined) {\r\n      return asValueObject.bytes; // RTLM5d2c\r\n    }\r\n    if (asValueObject.number !== undefined) {\r\n      return asValueObject.number; // RTLM5d2d\r\n    }\r\n    if (asValueObject.string !== undefined) {\r\n      return asValueObject.string; // RTLM5d2e\r\n    }\r\n\r\n    // RTLM5d2f - otherwise, it has an objectId reference, and we should get the actual object from the pool\r\n    const objectId = (data as ObjectIdObjectData).objectId;\r\n    const refObject: LiveObject | undefined = this._objects.getPool().get(objectId);\r\n    if (!refObject) {\r\n      return undefined; // RTLM5d2f1\r\n    }\r\n\r\n    if (refObject.isTombstoned()) {\r\n      // tombstoned objects must not be surfaced to the end users\r\n      return undefined;\r\n    }\r\n\r\n    return refObject; // RTLM5d2f2\r\n  }\r\n\r\n  private _isMapEntryTombstoned(entry: LiveMapEntry): boolean {\r\n    if (entry.tombstone === true) {\r\n      return true;\r\n    }\r\n\r\n    // data always exists for non-tombstoned entries\r\n    const data = entry.data!;\r\n    if ('objectId' in data) {\r\n      const refObject = this._objects.getPool().get(data.objectId);\r\n\r\n      if (refObject?.isTombstoned()) {\r\n        // entry that points to tombstoned object should be considered tombstoned as well\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n", "import type * as API from '../../../ably';\r\nimport { BatchContext } from './batchcontext';\r\nimport { LiveMap } from './livemap';\r\nimport { LiveObject } from './liveobject';\r\nimport { Objects } from './objects';\r\n\r\nexport class BatchContextLiveMap<T extends API.LiveMapType> {\r\n  constructor(\r\n    private _batchContext: BatchContext,\r\n    private _objects: Objects,\r\n    private _map: LiveMap<T>,\r\n  ) {}\r\n\r\n  get<TKey extends keyof T & string>(key: TKey): T[TKey] | undefined {\r\n    this._objects.throwIfInvalidAccessApiConfiguration();\r\n    this._batchContext.throwIfClosed();\r\n    const value = this._map.get(key);\r\n    if (value instanceof LiveObject) {\r\n      return this._batchContext.getWrappedObject(value.getObjectId()) as T[TKey];\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n\r\n  size(): number {\r\n    this._objects.throwIfInvalidAccessApiConfiguration();\r\n    this._batchContext.throwIfClosed();\r\n    return this._map.size();\r\n  }\r\n\r\n  *entries<TKey extends keyof T & string>(): IterableIterator<[TKey, T[TKey]]> {\r\n    this._objects.throwIfInvalidAccessApiConfiguration();\r\n    this._batchContext.throwIfClosed();\r\n    yield* this._map.entries();\r\n  }\r\n\r\n  *keys<TKey extends keyof T & string>(): IterableIterator<TKey> {\r\n    this._objects.throwIfInvalidAccessApiConfiguration();\r\n    this._batchContext.throwIfClosed();\r\n    yield* this._map.keys();\r\n  }\r\n\r\n  *values<TKey extends keyof T & string>(): IterableIterator<T[TKey]> {\r\n    this._objects.throwIfInvalidAccessApiConfiguration();\r\n    this._batchContext.throwIfClosed();\r\n    yield* this._map.values();\r\n  }\r\n\r\n  set<TKey extends keyof T & string>(key: TKey, value: T[TKey]): void {\r\n    this._objects.throwIfInvalidWriteApiConfiguration();\r\n    this._batchContext.throwIfClosed();\r\n    const msg = LiveMap.createMapSetMessage(this._objects, this._map.getObjectId(), key, value);\r\n    this._batchContext.queueMessage(msg);\r\n  }\r\n\r\n  remove<TKey extends keyof T & string>(key: TKey): void {\r\n    this._objects.throwIfInvalidWriteApiConfiguration();\r\n    this._batchContext.throwIfClosed();\r\n    const msg = LiveMap.createMapRemoveMessage(this._objects, this._map.getObjectId(), key);\r\n    this._batchContext.queueMessage(msg);\r\n  }\r\n}\r\n", "import type BaseClient from 'common/lib/client/baseclient';\r\nimport { DEFAULTS } from './defaults';\r\nimport { LiveCounter } from './livecounter';\r\nimport { LiveMap } from './livemap';\r\nimport { LiveObject } from './liveobject';\r\nimport { ObjectId } from './objectid';\r\nimport { Objects } from './objects';\r\n\r\nexport const ROOT_OBJECT_ID = 'root';\r\n\r\n/**\r\n * @internal\r\n * @spec RTO3\r\n */\r\nexport class ObjectsPool {\r\n  private _client: BaseClient;\r\n  private _pool: Map<string, LiveObject>; // RTO3a\r\n  private _gcInterval: ReturnType<typeof setInterval>;\r\n\r\n  constructor(private _objects: Objects) {\r\n    this._client = this._objects.getClient();\r\n    this._pool = this._createInitialPool();\r\n    this._gcInterval = setInterval(() => {\r\n      this._onGCInterval();\r\n    }, DEFAULTS.gcInterval);\r\n    // call nodejs's Timeout.unref to not require Node.js event loop to remain active due to this interval. see https://nodejs.org/api/timers.html#timeoutunref\r\n    this._gcInterval.unref?.();\r\n  }\r\n\r\n  get(objectId: string): LiveObject | undefined {\r\n    return this._pool.get(objectId);\r\n  }\r\n\r\n  /**\r\n   * Deletes objects from the pool for which object ids are not found in the provided array of ids.\r\n   */\r\n  deleteExtraObjectIds(objectIds: string[]): void {\r\n    const poolObjectIds = [...this._pool.keys()];\r\n    const extraObjectIds = poolObjectIds.filter((x) => !objectIds.includes(x));\r\n\r\n    extraObjectIds.forEach((x) => this._pool.delete(x));\r\n  }\r\n\r\n  set(objectId: string, liveObject: LiveObject): void {\r\n    this._pool.set(objectId, liveObject);\r\n  }\r\n\r\n  /**\r\n   * Removes all objects but root from the pool and clears the data for root.\r\n   * Does not create a new root object, so the reference to the root object remains the same.\r\n   */\r\n  resetToInitialPool(emitUpdateEvents: boolean): void {\r\n    // clear the pool first and keep the root object\r\n    const root = this._pool.get(ROOT_OBJECT_ID)!;\r\n    this._pool.clear();\r\n    this._pool.set(root.getObjectId(), root);\r\n\r\n    // clear the data, this will only clear the root object\r\n    this.clearObjectsData(emitUpdateEvents);\r\n  }\r\n\r\n  /**\r\n   * Clears the data stored for all objects in the pool.\r\n   */\r\n  clearObjectsData(emitUpdateEvents: boolean): void {\r\n    for (const object of this._pool.values()) {\r\n      const update = object.clearData();\r\n      if (emitUpdateEvents) {\r\n        object.notifyUpdated(update);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @spec RTO6 */\r\n  createZeroValueObjectIfNotExists(objectId: string): LiveObject {\r\n    const existingObject = this.get(objectId);\r\n    if (existingObject) {\r\n      return existingObject; // RTO6a\r\n    }\r\n\r\n    const parsedObjectId = ObjectId.fromString(this._client, objectId); // RTO6b\r\n    let zeroValueObject: LiveObject;\r\n    switch (parsedObjectId.type) {\r\n      case 'map': {\r\n        zeroValueObject = LiveMap.zeroValue(this._objects, objectId); // RTO6b2\r\n        break;\r\n      }\r\n\r\n      case 'counter':\r\n        zeroValueObject = LiveCounter.zeroValue(this._objects, objectId); // RTO6b3\r\n        break;\r\n    }\r\n\r\n    this.set(objectId, zeroValueObject);\r\n    return zeroValueObject;\r\n  }\r\n\r\n  private _createInitialPool(): Map<string, LiveObject> {\r\n    const pool = new Map<string, LiveObject>();\r\n    // RTO3b\r\n    const root = LiveMap.zeroValue(this._objects, ROOT_OBJECT_ID);\r\n    pool.set(root.getObjectId(), root);\r\n    return pool;\r\n  }\r\n\r\n  private _onGCInterval(): void {\r\n    const toDelete: string[] = [];\r\n    for (const [objectId, obj] of this._pool.entries()) {\r\n      // tombstoned objects should be removed from the pool if they have been tombstoned for longer than grace period.\r\n      // by removing them from the local pool, Objects plugin no longer keeps a reference to those objects, allowing JS's\r\n      // Garbage Collection to eventually free the memory for those objects, provided the user no longer references them either.\r\n      if (obj.isTombstoned() && Date.now() - obj.tombstonedAt()! >= DEFAULTS.gcGracePeriod) {\r\n        toDelete.push(objectId);\r\n        continue;\r\n      }\r\n\r\n      obj.onGCInterval();\r\n    }\r\n\r\n    toDelete.forEach((x) => this._pool.delete(x));\r\n  }\r\n}\r\n", "import type BaseClient from 'common/lib/client/baseclient';\nimport type * as API from '../../../ably';\nimport { BatchContextLiveCounter } from './batchcontextlivecounter';\nimport { BatchContextLiveMap } from './batchcontextlivemap';\nimport { LiveCounter } from './livecounter';\nimport { LiveMap } from './livemap';\nimport { ObjectMessage } from './objectmessage';\nimport { Objects } from './objects';\nimport { ROOT_OBJECT_ID } from './objectspool';\n\nexport class BatchContext {\n  private _client: BaseClient;\n  /** Maps object ids to the corresponding batch context object wrappers  */\n  private _wrappedObjects: Map<string, BatchContextLiveCounter | BatchContextLiveMap<API.LiveMapType>> = new Map();\n  private _queuedMessages: ObjectMessage[] = [];\n  private _isClosed = false;\n\n  constructor(\n    private _objects: Objects,\n    private _root: LiveMap<API.LiveMapType>,\n  ) {\n    this._client = _objects.getClient();\n    this._wrappedObjects.set(this._root.getObjectId(), new BatchContextLiveMap(this, this._objects, this._root));\n  }\n\n  getRoot<T extends API.LiveMapType = API.DefaultRoot>(): BatchContextLiveMap<T> {\n    this._objects.throwIfInvalidAccessApiConfiguration();\n    this.throwIfClosed();\n    return this.getWrappedObject(ROOT_OBJECT_ID) as BatchContextLiveMap<T>;\n  }\n\n  /**\n   * @internal\n   */\n  getWrappedObject(objectId: string): BatchContextLiveCounter | BatchContextLiveMap<API.LiveMapType> | undefined {\n    if (this._wrappedObjects.has(objectId)) {\n      return this._wrappedObjects.get(objectId);\n    }\n\n    const originObject = this._objects.getPool().get(objectId);\n    if (!originObject) {\n      return undefined;\n    }\n\n    let wrappedObject: BatchContextLiveCounter | BatchContextLiveMap<API.LiveMapType>;\n    if (originObject instanceof LiveMap) {\n      wrappedObject = new BatchContextLiveMap(this, this._objects, originObject);\n    } else if (originObject instanceof LiveCounter) {\n      wrappedObject = new BatchContextLiveCounter(this, this._objects, originObject);\n    } else {\n      throw new this._client.ErrorInfo(\n        `Unknown LiveObject instance type: objectId=${originObject.getObjectId()}`,\n        50000,\n        500,\n      );\n    }\n\n    this._wrappedObjects.set(objectId, wrappedObject);\n    return wrappedObject;\n  }\n\n  /**\n   * @internal\n   */\n  throwIfClosed(): void {\n    if (this.isClosed()) {\n      throw new this._client.ErrorInfo('Batch is closed', 40000, 400);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  isClosed(): boolean {\n    return this._isClosed;\n  }\n\n  /**\n   * @internal\n   */\n  close(): void {\n    this._isClosed = true;\n  }\n\n  /**\n   * @internal\n   */\n  queueMessage(msg: ObjectMessage): void {\n    this._queuedMessages.push(msg);\n  }\n\n  /**\n   * @internal\n   */\n  async flush(): Promise<void> {\n    try {\n      this.close();\n\n      if (this._queuedMessages.length > 0) {\n        await this._objects.publish(this._queuedMessages);\n      }\n    } finally {\n      this._wrappedObjects.clear();\n      this._queuedMessages = [];\n    }\n  }\n}\n", "import type BaseClient from 'common/lib/client/baseclient';\r\nimport type RealtimeChannel from 'common/lib/client/realtimechannel';\r\nimport { ObjectMessage, ObjectState } from './objectmessage';\r\nimport { Objects } from './objects';\r\n\r\nexport interface LiveObjectDataEntry {\r\n  objectState: ObjectState;\r\n  objectType: 'LiveMap' | 'LiveCounter';\r\n}\r\n\r\nexport interface LiveCounterDataEntry extends LiveObjectDataEntry {\r\n  objectType: 'LiveCounter';\r\n}\r\n\r\nexport interface LiveMapDataEntry extends LiveObjectDataEntry {\r\n  objectType: 'LiveMap';\r\n}\r\n\r\nexport type AnyDataEntry = LiveCounterDataEntry | LiveMapDataEntry;\r\n\r\n// TODO: investigate if this class is still needed after changes with createOp. objects are now initialized from the stateObject and this class does minimal processing\r\n/**\r\n * @internal\r\n */\r\nexport class SyncObjectsDataPool {\r\n  private _client: BaseClient;\r\n  private _channel: RealtimeChannel;\r\n  private _pool: Map<string, AnyDataEntry>;\r\n\r\n  constructor(private _objects: Objects) {\r\n    this._client = this._objects.getClient();\r\n    this._channel = this._objects.getChannel();\r\n    this._pool = new Map<string, AnyDataEntry>();\r\n  }\r\n\r\n  entries() {\r\n    return this._pool.entries();\r\n  }\r\n\r\n  size(): number {\r\n    return this._pool.size;\r\n  }\r\n\r\n  isEmpty(): boolean {\r\n    return this._pool.size === 0;\r\n  }\r\n\r\n  clear(): void {\r\n    this._pool.clear();\r\n  }\r\n\r\n  applyObjectSyncMessages(objectMessages: ObjectMessage[]): void {\r\n    for (const objectMessage of objectMessages) {\r\n      if (!objectMessage.object) {\r\n        this._client.Logger.logAction(\r\n          this._client.logger,\r\n          this._client.Logger.LOG_MAJOR,\r\n          'SyncObjectsDataPool.applyObjectSyncMessages()',\r\n          `object message is received during OBJECT_SYNC without 'object' field, skipping message; message id: ${objectMessage.id}, channel: ${this._channel.name}`,\r\n        );\r\n        continue;\r\n      }\r\n\r\n      const objectState = objectMessage.object;\r\n\r\n      if (objectState.counter) {\r\n        this._pool.set(objectState.objectId, this._createLiveCounterDataEntry(objectState));\r\n      } else if (objectState.map) {\r\n        this._pool.set(objectState.objectId, this._createLiveMapDataEntry(objectState));\r\n      } else {\r\n        this._client.Logger.logAction(\r\n          this._client.logger,\r\n          this._client.Logger.LOG_MAJOR,\r\n          'SyncObjectsDataPool.applyObjectSyncMessages()',\r\n          `received unsupported object state message during OBJECT_SYNC, expected 'counter' or 'map' to be present, skipping message; message id: ${objectMessage.id}, channel: ${this._channel.name}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private _createLiveCounterDataEntry(objectState: ObjectState): LiveCounterDataEntry {\r\n    const newEntry: LiveCounterDataEntry = {\r\n      objectState,\r\n      objectType: 'LiveCounter',\r\n    };\r\n\r\n    return newEntry;\r\n  }\r\n\r\n  private _createLiveMapDataEntry(objectState: ObjectState): LiveMapDataEntry {\r\n    const newEntry: LiveMapDataEntry = {\r\n      objectState,\r\n      objectType: 'LiveMap',\r\n    };\r\n\r\n    return newEntry;\r\n  }\r\n}\r\n", "import type BaseClient from 'common/lib/client/baseclient';\r\nimport type RealtimeChannel from 'common/lib/client/realtimechannel';\r\nimport type EventEmitter from 'common/lib/util/eventemitter';\r\nimport type * as API from '../../../ably';\r\nimport { BatchContext } from './batchcontext';\r\nimport { DEFAULTS } from './defaults';\r\nimport { LiveCounter } from './livecounter';\r\nimport { LiveMap } from './livemap';\r\nimport { LiveObject, LiveObjectUpdate, LiveObjectUpdateNoop } from './liveobject';\r\nimport { ObjectMessage, ObjectOperationAction } from './objectmessage';\r\nimport { ObjectsPool, ROOT_OBJECT_ID } from './objectspool';\r\nimport { SyncObjectsDataPool } from './syncobjectsdatapool';\r\n\r\nexport enum ObjectsEvent {\r\n  syncing = 'syncing',\r\n  synced = 'synced',\r\n}\r\n\r\nexport enum ObjectsState {\r\n  initialized = 'initialized',\r\n  syncing = 'syncing',\r\n  synced = 'synced',\r\n}\r\n\r\nconst StateToEventsMap: Record<ObjectsState, ObjectsEvent | undefined> = {\r\n  initialized: undefined,\r\n  syncing: ObjectsEvent.syncing,\r\n  synced: ObjectsEvent.synced,\r\n};\r\n\r\nexport type ObjectsEventCallback = () => void;\r\n\r\nexport interface OnObjectsEventResponse {\r\n  off(): void;\r\n}\r\n\r\nexport type BatchCallback = (batchContext: BatchContext) => void;\r\n\r\nexport class Objects {\r\n  private _client: BaseClient;\r\n  private _channel: RealtimeChannel;\r\n  private _state: ObjectsState;\r\n  // composition over inheritance since we cannot import class directly into plugin code.\r\n  // instead we obtain a class type from the client\r\n  private _eventEmitterInternal: EventEmitter;\r\n  // related to RTC10, should have a separate EventEmitter for users of the library\r\n  private _eventEmitterPublic: EventEmitter;\r\n  private _objectsPool: ObjectsPool; // RTO3\r\n  private _syncObjectsDataPool: SyncObjectsDataPool;\r\n  private _currentSyncId: string | undefined;\r\n  private _currentSyncCursor: string | undefined;\r\n  private _bufferedObjectOperations: ObjectMessage[];\r\n\r\n  // Used by tests\r\n  static _DEFAULTS = DEFAULTS;\r\n\r\n  constructor(channel: RealtimeChannel) {\r\n    this._channel = channel;\r\n    this._client = channel.client;\r\n    this._state = ObjectsState.initialized;\r\n    this._eventEmitterInternal = new this._client.EventEmitter(this._client.logger);\r\n    this._eventEmitterPublic = new this._client.EventEmitter(this._client.logger);\r\n    this._objectsPool = new ObjectsPool(this);\r\n    this._syncObjectsDataPool = new SyncObjectsDataPool(this);\r\n    this._bufferedObjectOperations = [];\r\n  }\r\n\r\n  /**\r\n   * When called without a type variable, we return a default root type which is based on globally defined interface for Objects feature.\r\n   * A user can provide an explicit type for the getRoot method to explicitly set the type structure on this particular channel.\r\n   * This is useful when working with multiple channels with different underlying data structure.\r\n   * @spec RTO1\r\n   */\r\n  async getRoot<T extends API.LiveMapType = API.DefaultRoot>(): Promise<LiveMap<T>> {\r\n    this.throwIfInvalidAccessApiConfiguration(); // RTO1a, RTO1b\r\n\r\n    // if we're not synced yet, wait for sync sequence to finish before returning root\r\n    if (this._state !== ObjectsState.synced) {\r\n      await this._eventEmitterInternal.once(ObjectsEvent.synced); // RTO1c\r\n    }\r\n\r\n    return this._objectsPool.get(ROOT_OBJECT_ID) as LiveMap<T>; // RTO1d\r\n  }\r\n\r\n  /**\r\n   * Provides access to the synchronous write API for Objects that can be used to batch multiple operations together in a single channel message.\r\n   */\r\n  async batch(callback: BatchCallback): Promise<void> {\r\n    this.throwIfInvalidWriteApiConfiguration();\r\n\r\n    const root = await this.getRoot();\r\n    const context = new BatchContext(this, root);\r\n\r\n    try {\r\n      callback(context);\r\n      await context.flush();\r\n    } finally {\r\n      context.close();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a MAP_CREATE operation to the realtime system to create a new map object in the pool.\r\n   *\r\n   * Once the ACK message is received, the method returns the object from the local pool if it got created due to\r\n   * the echoed MAP_CREATE operation, or if it wasn't received yet, the method creates a new object locally using the provided data and returns it.\r\n   *\r\n   * @returns A promise which resolves upon receiving the ACK message for the published operation message. A promise is resolved with an object containing provided data.\r\n   */\r\n  async createMap<T extends API.LiveMapType>(entries?: T): Promise<LiveMap<T>> {\r\n    this.throwIfInvalidWriteApiConfiguration();\r\n\r\n    const msg = await LiveMap.createMapCreateMessage(this, entries);\r\n    const objectId = msg.operation?.objectId!;\r\n\r\n    await this.publish([msg]);\r\n\r\n    // we may have already received the MAP_CREATE operation at this point, as it could arrive before the ACK for our publish message.\r\n    // this means the object might already exist in the local pool, having been added during the usual MAP_CREATE operation process.\r\n    // here we check if the object is present, and return it if found; otherwise, create a new object on the client side.\r\n    if (this._objectsPool.get(objectId)) {\r\n      return this._objectsPool.get(objectId) as LiveMap<T>;\r\n    }\r\n\r\n    // we haven't received the MAP_CREATE operation yet, so we can create a new map object using the locally constructed object operation.\r\n    // we don't know the serials for map entries, so we assign an \"earliest possible\" serial to each entry, so that any subsequent operation can be applied to them.\r\n    // we mark the MAP_CREATE operation as merged for the object, guaranteeing its idempotency and preventing it from being applied again when the operation arrives.\r\n    const map = LiveMap.fromObjectOperation<T>(this, msg.operation!);\r\n    this._objectsPool.set(objectId, map);\r\n\r\n    return map;\r\n  }\r\n\r\n  /**\r\n   * Send a COUNTER_CREATE operation to the realtime system to create a new counter object in the pool.\r\n   *\r\n   * Once the ACK message is received, the method returns the object from the local pool if it got created due to\r\n   * the echoed COUNTER_CREATE operation, or if it wasn't received yet, the method creates a new object locally using the provided data and returns it.\r\n   *\r\n   * @returns A promise which resolves upon receiving the ACK message for the published operation message. A promise is resolved with an object containing provided data.\r\n   */\r\n  async createCounter(count?: number): Promise<LiveCounter> {\r\n    this.throwIfInvalidWriteApiConfiguration();\r\n\r\n    const msg = await LiveCounter.createCounterCreateMessage(this, count);\r\n    const objectId = msg.operation?.objectId!;\r\n\r\n    await this.publish([msg]);\r\n\r\n    // we may have already received the COUNTER_CREATE operation at this point, as it could arrive before the ACK for our publish message.\r\n    // this means the object might already exist in the local pool, having been added during the usual COUNTER_CREATE operation process.\r\n    // here we check if the object is present, and return it if found; otherwise, create a new object on the client side.\r\n    if (this._objectsPool.get(objectId)) {\r\n      return this._objectsPool.get(objectId) as LiveCounter;\r\n    }\r\n\r\n    // we haven't received the COUNTER_CREATE operation yet, so we can create a new counter object using the locally constructed object operation.\r\n    // we mark the COUNTER_CREATE operation as merged for the object, guaranteeing its idempotency. this ensures we don't double count the initial counter value when the operation arrives.\r\n    const counter = LiveCounter.fromObjectOperation(this, msg.operation!);\r\n    this._objectsPool.set(objectId, counter);\r\n\r\n    return counter;\r\n  }\r\n\r\n  on(event: ObjectsEvent, callback: ObjectsEventCallback): OnObjectsEventResponse {\r\n    // this public API method can be called without specific configuration, so checking for invalid settings is unnecessary.\r\n    this._eventEmitterPublic.on(event, callback);\r\n\r\n    const off = () => {\r\n      this._eventEmitterPublic.off(event, callback);\r\n    };\r\n\r\n    return { off };\r\n  }\r\n\r\n  off(event: ObjectsEvent, callback: ObjectsEventCallback): void {\r\n    // this public API method can be called without specific configuration, so checking for invalid settings is unnecessary.\r\n\r\n    // prevent accidentally calling .off without any arguments on an EventEmitter and removing all callbacks\r\n    if (this._client.Utils.isNil(event) && this._client.Utils.isNil(callback)) {\r\n      return;\r\n    }\r\n\r\n    this._eventEmitterPublic.off(event, callback);\r\n  }\r\n\r\n  offAll(): void {\r\n    // this public API method can be called without specific configuration, so checking for invalid settings is unnecessary.\r\n    this._eventEmitterPublic.off();\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  getPool(): ObjectsPool {\r\n    return this._objectsPool;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  getChannel(): RealtimeChannel {\r\n    return this._channel;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  getClient(): BaseClient {\r\n    return this._client;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   * @spec RTO5\r\n   */\r\n  handleObjectSyncMessages(objectMessages: ObjectMessage[], syncChannelSerial: string | null | undefined): void {\r\n    const { syncId, syncCursor } = this._parseSyncChannelSerial(syncChannelSerial); // RTO5a\r\n    const newSyncSequence = this._currentSyncId !== syncId;\r\n    if (newSyncSequence) {\r\n      // RTO5a2 - new sync sequence started\r\n      this._startNewSync(syncId, syncCursor); // RTO5a2a\r\n    }\r\n\r\n    // RTO5a3 - continue current sync sequence\r\n    this._syncObjectsDataPool.applyObjectSyncMessages(objectMessages); // RTO5b\r\n\r\n    // RTO5a4 - if this is the last (or only) message in a sequence of sync updates, end the sync\r\n    if (!syncCursor) {\r\n      // defer the state change event until the next tick if this was a new sync sequence\r\n      // to allow any event listeners to process the start of the new sequence event that was emitted earlier during this event loop.\r\n      this._endSync(newSyncSequence);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  handleObjectMessages(objectMessages: ObjectMessage[]): void {\r\n    if (this._state !== ObjectsState.synced) {\r\n      // The client receives object messages in realtime over the channel concurrently with the sync sequence.\r\n      // Some of the incoming object messages may have already been applied to the objects described in\r\n      // the sync sequence, but others may not; therefore we must buffer these messages so that we can apply\r\n      // them to the objects once the sync is complete.\r\n      this._bufferedObjectOperations.push(...objectMessages);\r\n      return;\r\n    }\r\n\r\n    this._applyObjectMessages(objectMessages);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   * @spec RTO4\r\n   */\r\n  onAttached(hasObjects?: boolean): void {\r\n    this._client.Logger.logAction(\r\n      this._client.logger,\r\n      this._client.Logger.LOG_MINOR,\r\n      'Objects.onAttached()',\r\n      `channel=${this._channel.name}, hasObjects=${hasObjects}`,\r\n    );\r\n\r\n    // RTO4a\r\n    const fromInitializedState = this._state === ObjectsState.initialized;\r\n    if (hasObjects || fromInitializedState) {\r\n      // should always start a new sync sequence if we're in the initialized state, no matter the HAS_OBJECTS flag value.\r\n      // this guarantees we emit both \"syncing\" -> \"synced\" events in that order.\r\n      this._startNewSync();\r\n    }\r\n\r\n    // RTO4b\r\n    if (!hasObjects) {\r\n      // if no HAS_OBJECTS flag received on attach, we can end sync sequence immediately and treat it as no objects on a channel.\r\n      // reset the objects pool to its initial state, and emit update events so subscribers to root object get notified about changes.\r\n      this._objectsPool.resetToInitialPool(true); // RTO4b1, RTO4b2\r\n      this._syncObjectsDataPool.clear(); // RTO4b3\r\n      // defer the state change event until the next tick if we started a new sequence just now due to being in initialized state.\r\n      // this allows any event listeners to process the start of the new sequence event that was emitted earlier during this event loop.\r\n      this._endSync(fromInitializedState); // RTO4b4\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  actOnChannelState(state: API.ChannelState, hasObjects?: boolean): void {\r\n    switch (state) {\r\n      case 'attached':\r\n        this.onAttached(hasObjects);\r\n        break;\r\n\r\n      case 'detached':\r\n      case 'failed':\r\n        // do not emit data update events as the actual current state of Objects data is unknown when we're in these channel states\r\n        this._objectsPool.clearObjectsData(false);\r\n        this._syncObjectsDataPool.clear();\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  async publish(objectMessages: ObjectMessage[]): Promise<void> {\r\n    this._channel.throwIfUnpublishableState();\r\n\r\n    objectMessages.forEach((x) => ObjectMessage.encode(x, this._client));\r\n    const maxMessageSize = this._client.options.maxMessageSize;\r\n    const size = objectMessages.reduce((acc, msg) => acc + msg.getMessageSize(), 0);\r\n    if (size > maxMessageSize) {\r\n      throw new this._client.ErrorInfo(\r\n        `Maximum size of object messages that can be published at once exceeded (was ${size} bytes; limit is ${maxMessageSize} bytes)`,\r\n        40009,\r\n        400,\r\n      );\r\n    }\r\n\r\n    return this._channel.sendState(objectMessages);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  throwIfInvalidAccessApiConfiguration(): void {\r\n    this._throwIfMissingChannelMode('object_subscribe');\r\n    this._throwIfInChannelState(['detached', 'failed']);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  throwIfInvalidWriteApiConfiguration(): void {\r\n    this._throwIfMissingChannelMode('object_publish');\r\n    this._throwIfInChannelState(['detached', 'failed', 'suspended']);\r\n    this._throwIfEchoMessagesDisabled();\r\n  }\r\n\r\n  private _startNewSync(syncId?: string, syncCursor?: string): void {\r\n    // need to discard all buffered object operation messages on new sync start\r\n    this._bufferedObjectOperations = [];\r\n    this._syncObjectsDataPool.clear();\r\n    this._currentSyncId = syncId;\r\n    this._currentSyncCursor = syncCursor;\r\n    this._stateChange(ObjectsState.syncing, false);\r\n  }\r\n\r\n  /** @spec RTO5c */\r\n  private _endSync(deferStateEvent: boolean): void {\r\n    this._applySync();\r\n    // should apply buffered object operations after we applied the sync.\r\n    // can use regular object messages application logic\r\n    this._applyObjectMessages(this._bufferedObjectOperations);\r\n\r\n    this._bufferedObjectOperations = [];\r\n    this._syncObjectsDataPool.clear(); // RTO5c4\r\n    this._currentSyncId = undefined; // RTO5c3\r\n    this._currentSyncCursor = undefined; // RTO5c3\r\n    this._stateChange(ObjectsState.synced, deferStateEvent);\r\n  }\r\n\r\n  private _parseSyncChannelSerial(syncChannelSerial: string | null | undefined): {\r\n    syncId: string | undefined;\r\n    syncCursor: string | undefined;\r\n  } {\r\n    let match: RegExpMatchArray | null;\r\n    let syncId: string | undefined = undefined;\r\n    let syncCursor: string | undefined = undefined;\r\n    // RTO5a1 - syncChannelSerial is a two-part identifier: <sequence id>:<cursor value>\r\n    if (syncChannelSerial && (match = syncChannelSerial.match(/^([\\w-]+):(.*)$/))) {\r\n      syncId = match[1];\r\n      syncCursor = match[2];\r\n    }\r\n\r\n    return {\r\n      syncId,\r\n      syncCursor,\r\n    };\r\n  }\r\n\r\n  private _applySync(): void {\r\n    if (this._syncObjectsDataPool.isEmpty()) {\r\n      return;\r\n    }\r\n\r\n    const receivedObjectIds = new Set<string>();\r\n    const existingObjectUpdates: { object: LiveObject; update: LiveObjectUpdate | LiveObjectUpdateNoop }[] = [];\r\n\r\n    // RTO5c1\r\n    for (const [objectId, entry] of this._syncObjectsDataPool.entries()) {\r\n      receivedObjectIds.add(objectId);\r\n      const existingObject = this._objectsPool.get(objectId);\r\n\r\n      // RTO5c1a\r\n      if (existingObject) {\r\n        const update = existingObject.overrideWithObjectState(entry.objectState); // RTO5c1a1\r\n        // store updates to call subscription callbacks for all of them once the sync sequence is completed.\r\n        // this will ensure that clients get notified about the changes only once everything has been applied.\r\n        existingObjectUpdates.push({ object: existingObject, update });\r\n        continue;\r\n      }\r\n\r\n      // RTO5c1b,\r\n      let newObject: LiveObject;\r\n      // assign to a variable so TS doesn't complain about 'never' type in the default case\r\n      const objectType = entry.objectType;\r\n      switch (objectType) {\r\n        case 'LiveCounter':\r\n          newObject = LiveCounter.fromObjectState(this, entry.objectState); // RTO5c1b1a\r\n          break;\r\n\r\n        case 'LiveMap':\r\n          newObject = LiveMap.fromObjectState(this, entry.objectState); // RTO5c1b1b\r\n          break;\r\n\r\n        default:\r\n          throw new this._client.ErrorInfo(`Unknown LiveObject type: ${objectType}`, 50000, 500); // RTO5c1b1c\r\n      }\r\n\r\n      this._objectsPool.set(objectId, newObject); // RTO5c1b1\r\n    }\r\n\r\n    // RTO5c2 - need to remove LiveObject instances from the ObjectsPool for which objectIds were not received during the sync sequence\r\n    this._objectsPool.deleteExtraObjectIds([...receivedObjectIds]);\r\n\r\n    // call subscription callbacks for all updated existing objects\r\n    existingObjectUpdates.forEach(({ object, update }) => object.notifyUpdated(update));\r\n  }\r\n\r\n  private _applyObjectMessages(objectMessages: ObjectMessage[]): void {\r\n    for (const objectMessage of objectMessages) {\r\n      if (!objectMessage.operation) {\r\n        this._client.Logger.logAction(\r\n          this._client.logger,\r\n          this._client.Logger.LOG_MAJOR,\r\n          'Objects._applyObjectMessages()',\r\n          `object operation message is received without 'operation' field, skipping message; message id: ${objectMessage.id}, channel: ${this._channel.name}`,\r\n        );\r\n        continue;\r\n      }\r\n\r\n      const objectOperation = objectMessage.operation;\r\n\r\n      switch (objectOperation.action) {\r\n        case ObjectOperationAction.MAP_CREATE:\r\n        case ObjectOperationAction.COUNTER_CREATE:\r\n        case ObjectOperationAction.MAP_SET:\r\n        case ObjectOperationAction.MAP_REMOVE:\r\n        case ObjectOperationAction.COUNTER_INC:\r\n        case ObjectOperationAction.OBJECT_DELETE:\r\n          // we can receive an op for an object id we don't have yet in the pool. instead of buffering such operations,\r\n          // we can create a zero-value object for the provided object id and apply the operation to that zero-value object.\r\n          // this also means that all objects are capable of applying the corresponding *_CREATE ops on themselves,\r\n          // since they need to be able to eventually initialize themselves from that *_CREATE op.\r\n          // so to simplify operations handling, we always try to create a zero-value object in the pool first,\r\n          // and then we can always apply the operation on the existing object in the pool.\r\n          this._objectsPool.createZeroValueObjectIfNotExists(objectOperation.objectId);\r\n          this._objectsPool.get(objectOperation.objectId)!.applyOperation(objectOperation, objectMessage);\r\n          break;\r\n\r\n        default:\r\n          this._client.Logger.logAction(\r\n            this._client.logger,\r\n            this._client.Logger.LOG_MAJOR,\r\n            'Objects._applyObjectMessages()',\r\n            `received unsupported action in object operation message: ${objectOperation.action}, skipping message; message id: ${objectMessage.id}, channel: ${this._channel.name}`,\r\n          );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @spec RTO2 */\r\n  private _throwIfMissingChannelMode(expectedMode: 'object_subscribe' | 'object_publish'): void {\r\n    // RTO2a - channel.modes is only populated on channel attachment, so use it only if it is set\r\n    if (this._channel.modes != null && !this._channel.modes.includes(expectedMode)) {\r\n      throw new this._client.ErrorInfo(`\"${expectedMode}\" channel mode must be set for this operation`, 40024, 400); // RTO2a2\r\n    }\r\n    // RTO2b - otherwise as a best effort use user provided channel options\r\n    if (!this._client.Utils.allToLowerCase(this._channel.channelOptions.modes ?? []).includes(expectedMode)) {\r\n      throw new this._client.ErrorInfo(`\"${expectedMode}\" channel mode must be set for this operation`, 40024, 400); // RTO2b2\r\n    }\r\n  }\r\n\r\n  private _stateChange(state: ObjectsState, deferEvent: boolean): void {\r\n    if (this._state === state) {\r\n      return;\r\n    }\r\n\r\n    this._state = state;\r\n    const event = StateToEventsMap[state];\r\n    if (!event) {\r\n      return;\r\n    }\r\n\r\n    if (deferEvent) {\r\n      this._client.Platform.Config.nextTick(() => {\r\n        this._eventEmitterInternal.emit(event);\r\n        this._eventEmitterPublic.emit(event);\r\n      });\r\n    } else {\r\n      this._eventEmitterInternal.emit(event);\r\n      this._eventEmitterPublic.emit(event);\r\n    }\r\n  }\r\n\r\n  private _throwIfInChannelState(channelState: API.ChannelState[]): void {\r\n    if (channelState.includes(this._channel.state)) {\r\n      throw this._client.ErrorInfo.fromValues(this._channel.invalidStateError());\r\n    }\r\n  }\r\n\r\n  private _throwIfEchoMessagesDisabled(): void {\r\n    if (this._channel.client.options.echoMessages === false) {\r\n      throw new this._channel.client.ErrorInfo(\r\n        `\"echoMessages\" client option must be enabled for this operation`,\r\n        40000,\r\n        400,\r\n      );\r\n    }\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["objects_exports", "__export", "ObjectMessage", "Objects", "objects_default", "__toCommonJS", "ObjectMessage", "_ObjectMessage", "_utils", "_messageEncoding", "message", "client", "encodeInitialValueFn", "data", "encoding", "isNativeDataType", "encodedData", "newEncoding", "encodeObjectDataFn", "logger", "LoggerClass", "utils", "format", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "_i", "_j", "_k", "_l", "error", "values", "messageEncoding", "count", "result", "i", "initialValue", "msg", "initialValueWithDataEncoding", "encodedInitialValue", "mapEntries", "entry", "objectData", "objectOperation", "objectOperationCopy", "key", "objectState", "objectStateCopy", "encodeFn", "encodedBytes", "__spreadProps", "__spreadValues", "encodedOperation", "encodedObjectState", "operation", "size", "obj", "map", "counter", "mapOp", "LiveObject", "_objects", "objectId", "listener", "event", "callback", "update", "previousDataRef", "opSerial", "opSiteCode", "siteSerial", "ObjectId", "_ObjectId", "type", "hash", "msTimestamp", "platform", "objectType", "encodedInitialValue", "nonce", "valueForHashBuffer", "hashBuffer", "client", "objectId", "rest", "LiveCounter", "_LiveCounter", "LiveObject", "objects", "objectId", "objectState", "obj", "objectOperation", "amount", "client", "ObjectMessage", "count", "initialValueObj", "encodedInitialValue", "format", "nonce", "msTimestamp", "ObjectId", "__spreadProps", "__spreadValues", "msg", "op", "_a", "opSerial", "opSiteCode", "update", "_b", "_c", "_d", "_e", "previousDataRef", "prevDataRef", "newDataRef", "BatchContextLiveCounter", "_batchContext", "_objects", "_counter", "amount", "msg", "LiveCounter", "has", "find", "iter", "tar", "key", "dequal", "foo", "bar", "ctor", "len", "tmp", "DEFAULTS", "LiveMap", "_LiveMap", "LiveObject", "objects", "_semantics", "objectId", "objectState", "_a", "obj", "objectOperation", "key", "value", "client", "objectData", "typedObjectData", "ObjectMessage", "entries", "initialValueObj", "encodedInitialValue", "format", "nonce", "msTimestamp", "ObjectId", "__spreadProps", "__spreadValues", "mapEntries", "element", "size", "entry", "_", "msg", "op", "opSerial", "opSiteCode", "update", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "_i", "previousDataRef", "keysToDelete", "DEFAULTS", "x", "prevDataRef", "newDataRef", "currentEntry", "typedKey", "newEntry", "dequal", "aggregatedUpdate", "ErrorInfo", "Utils", "existingEntry", "liveData", "mapEntrySerial", "liveMapData", "liveDataEntry", "data", "asValueObject", "refObject", "BatchContextLiveMap", "_batchContext", "_objects", "_map", "key", "value", "LiveObject", "__yieldStar", "msg", "LiveMap", "ROOT_OBJECT_ID", "ObjectsPool", "_objects", "_a", "_b", "DEFAULTS", "objectId", "objectIds", "x", "liveObject", "emitUpdateEvents", "root", "object", "update", "existingObject", "parsedObjectId", "ObjectId", "zeroValueObject", "LiveMap", "LiveCounter", "pool", "toDelete", "obj", "BatchContext", "_objects", "_root", "BatchContextLiveMap", "ROOT_OBJECT_ID", "objectId", "originObject", "wrappedObject", "LiveMap", "LiveCounter", "BatchContextLiveCounter", "msg", "SyncObjectsDataPool", "_objects", "objectMessages", "objectMessage", "objectState", "StateToEventsMap", "Objects", "channel", "ObjectsPool", "SyncObjectsDataPool", "ROOT_OBJECT_ID", "callback", "root", "context", "BatchContext", "entries", "_a", "msg", "LiveMap", "objectId", "map", "count", "LiveCounter", "counter", "event", "objectMessages", "syncChannelSerial", "syncId", "syncCursor", "newSyncSequence", "hasObjects", "fromInitializedState", "state", "x", "ObjectMessage", "maxMessageSize", "size", "acc", "deferStateEvent", "match", "receivedObjectIds", "existingObjectUpdates", "entry", "existingObject", "update", "newObject", "objectType", "object", "objectMessage", "objectOperation", "expectedMode", "deferEvent", "channelState", "DEFAULTS", "objects_default", "Objects", "ObjectMessage"]
}
